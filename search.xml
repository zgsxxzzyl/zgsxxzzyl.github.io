<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker安装部署</title>
    <url>/2019/10/23/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="Docker安装部署"><a href="#Docker安装部署" class="headerlink" title="Docker安装部署"></a>Docker安装部署</h1><blockquote>
<p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
<h2 id="Linux环境下部署"><a href="#Linux环境下部署" class="headerlink" title="Linux环境下部署"></a>Linux环境下部署</h2><ul>
<li>卸载旧版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<ul>
<li>在新主机上首次安装Docker Engine-Community之前，需要设置Docker存储库。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<ul>
<li>启动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<ul>
<li>卸载</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 卸载Docker软件包：</span><br><span class="line">sudo yum remove docker-ce</span><br><span class="line"># 主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</span><br><span class="line">sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/2019/10/22/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><blockquote>
<p><a href="https://docs.docker.com/engine/reference/run/" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
<h2 id="启动docker进程"><a href="#启动docker进程" class="headerlink" title="启动docker进程"></a>启动docker进程</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="搜索可用镜像"><a href="#搜索可用镜像" class="headerlink" title="搜索可用镜像"></a>搜索可用镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search xx</span><br><span class="line"></span><br><span class="line">NAME           # 镜像仓库</span><br><span class="line">DESCRIPTION    # 镜像描述信息</span><br><span class="line">STARS          # 镜像收藏数</span><br><span class="line">OFFICIAL       # 是否为docker官方发布的镜像</span><br><span class="line">AUTOMATED      # 是否为自动化构建的镜像，关于自动化构建，可以查看官方文档：https://docs.docker.com/docker-hub/builds/#how-automated-builds-work</span><br></pre></td></tr></table></figure>
<h2 id="拉去镜像"><a href="#拉去镜像" class="headerlink" title="拉去镜像"></a>拉去镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br></pre></td></tr></table></figure>
<h2 id="列出本地全部镜像"><a href="#列出本地全部镜像" class="headerlink" title="列出本地全部镜像"></a>列出本地全部镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<h2 id="查看镜像的详情"><a href="#查看镜像的详情" class="headerlink" title="查看镜像的详情"></a>查看镜像的详情</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line">docker image inspect nginx:latest | grep -i version</span><br></pre></td></tr></table></figure>

<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure>
<h2 id="基于镜像创建并启动容器"><a href="#基于镜像创建并启动容器" class="headerlink" title="基于镜像创建并启动容器"></a>基于镜像创建并启动容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line">-d, --detach                         Run container in background and print container ID</span><br><span class="line">-t, --tty                            Allocate a pseudo-TTY</span><br><span class="line">-p, --publish list                   Publish a container's port(s) to the host</span><br><span class="line">-P, --publish-all                    Publish all exposed ports to random ports</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">基于镜像启动容器实例</span></span><br><span class="line">docker run -t -i IMAGE /bin/bash</span><br></pre></td></tr></table></figure>
<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>
<h2 id="查看启动容器日志"><a href="#查看启动容器日志" class="headerlink" title="查看启动容器日志"></a>查看启动容器日志</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line">Fetch the logs of a container</span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</span><br><span class="line">      --tail string    Number of lines to show from the end of the logs (default "all")</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看容器近30分钟日志</span></span><br><span class="line">docker logs --since 30m CONTAINER_ID</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某时间之后的日志</span></span><br><span class="line">docker logs -t --since="2019-08-02T13:23:37" CONTAINER_ID</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某时间段日志：</span></span><br><span class="line">docker logs -t --since="2019-08-02T13:23:37" --until "2019-08-03T12:23:37" CONTAINER_ID</span><br></pre></td></tr></table></figure>

<h2 id="查看启动的实例"><a href="#查看启动的实例" class="headerlink" title="查看启动的实例"></a>查看启动的实例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br><span class="line">-a, --all             Show all containers (default shows just running)</span><br></pre></td></tr></table></figure>
<h2 id="修改容器端口映射"><a href="#修改容器端口映射" class="headerlink" title="修改容器端口映射"></a>修改容器端口映射</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接修改配置文件</span></span><br><span class="line">/var/lib/docker/containers/[CONTAINER ID]/config.v2.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器3306端口映射到外部3310端口</span></span><br><span class="line">docker run -dit --privileged -p 3310:3306 --name=CONTAINNAME IMAGE /usr/sbin/init</span><br></pre></td></tr></table></figure>
<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [CONTAINER ID] bash</span><br><span class="line">docker <span class="built_in">exec</span> -it [CONTAINER ID] /bin/sh</span><br></pre></td></tr></table></figure>
<h2 id="导入导出容器"><a href="#导入导出容器" class="headerlink" title="导入导出容器"></a>导入导出容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker export [imagename] &gt; [url]</span><br><span class="line">docker import [url] &gt; [imagename]</span><br></pre></td></tr></table></figure>

<h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH</span><br><span class="line">docker cp [OPTIONS] SRC_PATH CONTAINER:DEST_PATH</span><br></pre></td></tr></table></figure>

<h2 id="基于容器创建镜像"><a href="#基于容器创建镜像" class="headerlink" title="基于容器创建镜像"></a>基于容器创建镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit containid imagename</span><br></pre></td></tr></table></figure>

<h2 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -v &lt;host&gt;:&lt;container&gt;:[rw|ro]</span><br></pre></td></tr></table></figure>

<h2 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -di \</span><br><span class="line">--name=tomcat8081 \</span><br><span class="line">-p 8081:8080 \</span><br><span class="line">-v /opt/tomcat.docker/tomcat8081/logs:/usr/local/tomcat/logs \</span><br><span class="line">-v /opt/tomcat.docker/tomcat8081/conf:/usr/local/tomcat/conf \</span><br><span class="line">-v /opt/tomcat.docker/tomcat8081/webapps:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat:8.5-jdk8</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Fork/Join框架详细介绍</title>
    <url>/2020/04/13/Fork-Join%E6%A1%86%E6%9E%B6%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>理解这个框架前，我们需要知道这个框架设计的目标是为了解决什么问题？</p>
<p>为什么不可以用已有的框架来解决？</p>
<p>举例说明：对一个数组进行求和操作，如果这个数组非常大，我们会选择分段求和最后汇总</p>
<p><img src="/images/ForkJoin%E6%A1%86%E6%9E%B6%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/%E6%95%B0%E7%BB%84%E6%B1%82%E5%92%8C.png" alt="数组求和"></p>
<p>上图所示，0-999表示数组的下标，如果使用<code>ThreadPoolExecutor</code>创建线程池，可以考虑一下分割成上面的任务需要多少个线程。这里需要用到7个线程来实现求和，如果再分割多次，最后需要的线程会很多，显然不是我们所想要的。</p>
<p>为了满足我们的需求，Java从JDK7开始引入了Fork/Join框架来解决这类问题，利用多个处理器，是为可以递归分解为较小部分的工作而设计的。目标是使用所有可用的处理能力来增强应用程序的性能。</p>
<p>Fork/Join是<code>ExecutorService</code>接口的实现（这个接口用来实现线程池的，譬如我们常用的<code>ThreadPoolExecutor</code>），与其他实现<code>ExecutorService</code>的线程池一样，Fork/Join框架将任务分配给线程池中的工作线程。</p>
<p>与其他线程池不同的是，它使用了工作窃取算法（<em>work-stealing</em>），工作用尽的工作线程可以从其他仍很忙的线程中窃取任务。举个例子，0-499这个线程的子线程都计算完了，500-999子线程还在计算500-749，如果0-499这个线程等待500-999这个线程返回结果再去汇总这样会浪费资源，工作窃取算法会使执行0-499这个线程执行750-999，这样可以提高效率。</p>
<h1 id="Fork-Join核心类"><a href="#Fork-Join核心类" class="headerlink" title="Fork/Join核心类"></a>Fork/Join核心类</h1><ul>
<li><p><code>ForkJoinPool</code> </p>
</li>
<li><p><code>ForkJoinTask</code></p>
</li>
<li><p><code>RecursiveAction</code></p>
</li>
<li><p><code>RecursiveTask</code></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中安装部署MySQL</title>
    <url>/2019/10/24/Docker%E4%B8%AD%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2MySQL/</url>
    <content><![CDATA[<h1 id="Docker中安装部署MySQL"><a href="#Docker中安装部署MySQL" class="headerlink" title="Docker中安装部署MySQL"></a>Docker中安装部署MySQL</h1><h2 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h2><blockquote>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/docker-mysql-getting-started.html#docker-starting-mysql-server" target="_blank" rel="noopener">参考文档</a></p>
<p>安装前要选择安装版本，访问<a href="https://hub.docker.com/r/mysql/mysql-server/tags/" target="_blank" rel="noopener">官方链接</a>，找到适合的版本，这里我选择5.7版本</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉去mysql镜像 docker pull mysql/mysql-server:tag</span></span><br><span class="line">docker pull mysql/mysql-server:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否全部镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择镜像，启动容器 docker run --name=container_name -d image_name:tag</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 后台启动 -p 容器3306端口映射外部端口3308 --name 给容器实例命名mysql5.7</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -p 3346:3306 --name mysql-slave4 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span></span><br><span class="line">docker run --name=mysql5.7 -p 3308:3306 -d mysql/mysql-server:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器启动过程中会重新初始化数据库，生成随机密码，查看容器启动日志</span></span><br><span class="line">docker logs mysql5.7 2&gt;&amp;1 | grep GENERATED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录数据库</span></span><br><span class="line">docker exec -it mysql5.7 mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改密码</span></span><br><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY 'password';</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认mysql的root用户不支持远程访问，开启访问权限</span></span><br><span class="line">GRANT ALL ON *.* TO root@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入docker</span></span><br><span class="line">docker exec -it mysql5.7 bash </span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器mysql部署路径</span></span><br><span class="line">cd /var/lib/mysql </span><br><span class="line"><span class="meta">#</span><span class="bash">启动、重启、停止、删除容器</span></span><br><span class="line">docker start mysql5.7</span><br><span class="line">docker restart mysql5.7</span><br><span class="line">docker stop mysql5.7</span><br><span class="line">docker rm mysql5.7</span><br></pre></td></tr></table></figure>

<h2 id="容器挂载本地配置和数据目录"><a href="#容器挂载本地配置和数据目录" class="headerlink" title="容器挂载本地配置和数据目录"></a>容器挂载本地配置和数据目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name=mysql5.7 \</span><br><span class="line">--mount type=bind,src=/opt/mysql.docker/my.cnf,dst=/etc/my.cnf \</span><br><span class="line">--mount type=bind,src=/opt/mysql.docker/datadir,dst=/var/lib/mysql \</span><br><span class="line">-p 3308:3306 \</span><br><span class="line">-d mysql/mysql-server:5.7</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab配置启动HTTPS</title>
    <url>/2019/10/22/GitLab%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8HTTPS/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">gitlab配置启用https</span></span><br><span class="line">openssl genrsa -des3 -out /etc/gitlab/ssl/gitlab.com.key 2048</span><br><span class="line">openssl rsa -in certificate_before.key -out certificate_after.key</span><br><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/gitlab/ssl/gitlab.com.key -out /etc/gitlab/ssl/gitlab.com.crt</span><br><span class="line">firewall-cmd --permanent --add-service=https</span><br><span class="line">systemctl reload firewalld</span><br><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK原生工具介绍</title>
    <url>/2019/12/18/JDK%E5%8E%9F%E7%94%9F%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="native2ascii"><a href="#native2ascii" class="headerlink" title="native2ascii"></a>native2ascii</h1><blockquote>
<p>native2ascii.exe 是Java的一个文件转码工具，是将特殊各异的内容转为用指定的编码标准文体形式统一的表现出来，它通常位于JDK_home\bin目录下，安装好Java SE后，可在命令行直接使用 native2ascii命令进行转码。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">native2ascii -[options] [inputfile] [outputfile]</span><br></pre></td></tr></table></figure>
<p>国际化resources.properties文件，中文字符转换为Unicode字符：<br><code>native2ascii resources.properties tmp.properties</code><br>或者<br> <code>native2ascii -encoding Unicode resources.properties tmp.properties</code><br> <strong>注意：Unicode首字母必须大写</strong><br>国际化resources.properties文件，Unicode字符转换为中文字符：<br> <code>native2ascii -reverse -encoding GB2312 resources.properties tmp.properties</code></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK安装部署</title>
    <url>/2019/10/22/JDK%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>Oracle JRE 8 <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载链接</a></p>
<p>选择jdk-8u211-linux-x64.rpm下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载全部包含java的包</span></span><br><span class="line">rpm -e --nodeps `rpm -qa|grep java`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看安装的路径</span></span><br><span class="line">rpm -qpl jdk-8u211-linux-x64.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">rpm -i jdk-8u211-linux-x64.rpm</span><br></pre></td></tr></table></figure>

<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&quot;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_211-amd64&quot;</span><br><span class="line">export PATH&#x3D;&quot;$JAVA_HOME&#x2F;bin:$PATH&quot;</span><br><span class="line">export CLASSPATH&#x3D;&quot;.:$JAVA_HOME&#x2F;lib&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpComponents组件介绍</title>
    <url>/2020/01/16/HttpComponents%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="HttpComponents概述"><a href="#HttpComponents概述" class="headerlink" title="HttpComponents概述"></a>HttpComponents概述</h1><p>超文本传输协议（HTTP）可能是当今Internet上使用的最重要的协议。Web服务，具有网络功能的设备以及网络计算的增长继续将HTTP协议的作用扩展到用户驱动的Web浏览器之外，同时增加了需要HTTP支持的应用程序的数量。</p>
<p>HttpComponents是为扩展而设计的，同时提供了对基本HTTP协议的强大支持，对于构建HTTP感知的客户端和服务器应用程序（例如Web浏览器，Web Spider，HTTP代理，Web服务传输库或利用或扩展HTTP协议以进行分布式通信。</p>
<h1 id="HttpCore"><a href="#HttpCore" class="headerlink" title="HttpCore"></a><a href="http://hc.apache.org/httpcomponents-core-ga/index.html" target="_blank" rel="noopener">HttpCore</a></h1><blockquote>
<p>是一组低级HTTP传输组件，可用于以最小的占用空间构建自定义客户端和服务器端HTTP服务。HttpCore支持两种I/O模型：基于经典Java I/O的阻塞I/O模型和基于Java NIO的非阻塞事件驱动的I/O模型。</p>
<p>阻塞I/O模型可能更适合于数据密集型低延迟方案，而非阻塞模型可能更适合于高延迟方案，在原始数据吞吐量中，原始数据吞吐量的重要性不如处理数千个同时HTTP连接的能力。资源高效的方式。</p>
</blockquote>
<ul>
<li>HttpCore教程<a href="http://hc.apache.org/httpcomponents-core-ga/tutorial/html" target="_blank" rel="noopener">HTML</a> / <a href="http://hc.apache.org/httpcomponents-core-ga/tutorial/pdf/httpcore-tutorial.pdf" target="_blank" rel="noopener">PDF</a></li>
<li>HttpCore <a href="http://hc.apache.org/httpcomponents-core-ga/examples.html" target="_blank" rel="noopener">示例</a></li>
</ul>
<h1 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a><a href="http://hc.apache.org/httpcomponents-client-ga/index.html" target="_blank" rel="noopener">HttpClient</a></h1><blockquote>
<p>是基于HttpCore的HTTP/1.1兼容HTTP代理实现。它还为客户端身份验证，HTTP状态管理和HTTP连接管理提供了可重用的组件。HttpComponents Client是<a href="http://hc.apache.org/httpclient-legacy/index.html" target="_blank" rel="noopener">Commons HttpClient 3.x</a>的继承者和替代者。强烈建议Commons HttpClient用户进行升级。</p>
</blockquote>
<ul>
<li>HttpClient教程<a href="http://hc.apache.org/httpcomponents-client-ga/tutorial/html" target="_blank" rel="noopener">HTML</a> / <a href="http://hc.apache.org/httpcomponents-client-ga/tutorial/pdf/httpclient-tutorial.pdf" target="_blank" rel="noopener">PDF</a></li>
<li>HttpClient <a href="http://hc.apache.org/httpcomponents-client-ga/examples.html" target="_blank" rel="noopener">示例</a></li>
</ul>
<h1 id="Asynch-HttpClient"><a href="#Asynch-HttpClient" class="headerlink" title="Asynch HttpClient"></a><a href="http://hc.apache.org/httpcomponents-asyncclient-dev/index.html" target="_blank" rel="noopener">Asynch HttpClient</a></h1><blockquote>
<p>是基于HttpCore NIO和HttpClient组件的HTTP/1.1兼容HTTP代理实现。它是Apache HttpClient的补充模块，适用于特殊情况，在特殊情况下，就原始数据吞吐量而言，处理大量并发连接的能力比性能更为重要。</p>
</blockquote>
<ul>
<li>HttpAsyncClient <a href="http://hc.apache.org/httpcomponents-asyncclient-dev/examples.html" target="_blank" rel="noopener">示例</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSPI介绍</title>
    <url>/2019/10/23/JavaSPI%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="Service-Provider-Interface"><a href="#Service-Provider-Interface" class="headerlink" title="Service Provider Interface"></a>Service Provider Interface</h1><ul>
<li>在classpath下创建META-INF/services/</li>
<li>在services文件夹下创建接口名字的文件，并在文件中添加实现的类列表<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceLoader&lt;DriverService&gt; serviceLoader = ServiceLoader.load(DriverService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (DriverService ds : serviceLoader) &#123;</span><br><span class="line">    System.out.println(ds.getClass().getName());</span><br><span class="line">    ds.onStartUp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM参数文档</title>
    <url>/2020/03/16/JVM%E5%8F%82%E6%95%B0%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html</a></p>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">参数名称 <div style="width:100px;"></div></th>
<th align="left">含义</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>-Xms</code></td>
<td align="left">设置堆的初始大小（以字节为单位）</td>
<td>初始大小将设置为为老一代和年轻一代分配的大小之和</td>
<td>此值必须是1024的倍数且大于1 MB。在字母后面加上<code>k</code>或<code>K</code>表示千字节，<code>m</code>或<code>M</code>表示兆字节，<code>g</code>或<code>G</code>表示千兆字节。</td>
</tr>
<tr>
<td align="center"><code>-Xmx</code></td>
<td align="left">指定内存分配池的最大大小（以字节为单位）</td>
<td>默认值是在运行时根据系统配置选择的</td>
<td>此值必须是1024的倍数且大于2 MB</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -server -Xms6144m -Xmx6144m -Xmn2048m -Xss256k -XX:PermSize=512m -XX:MaxPermSize=1024m  -XX:SurvivorRatio=2 -XX:+UseConcMarkSweepGC</span><br><span class="line">         -XX:+CMSParallelRemarkEnabled </span><br><span class="line">         -XX:+UseCMSCompactAtFullCollection </span><br><span class="line">         -XX:CMSFullGCsBeforeCompaction=3</span><br><span class="line">         -XX:+UseFastAccessorMethods </span><br><span class="line">         -XX:+UseCMSInitiatingOccupancyOnly </span><br><span class="line">         -XX:CMSInitiatingOccupancyFraction=80</span><br><span class="line">         -XX:+DoEscapeAnalysis </span><br><span class="line">         -XX:+EliminateAllocations</span><br><span class="line">         -XX:+HeapDumpOnOutOfMemoryError </span><br><span class="line">         -XX:-UseGCOverheadLimit </span><br><span class="line">         -XX:+TraceClassLoading </span><br><span class="line">         -XX:+CMSClassUnloadingEnabled </span><br><span class="line">         -XX:+PrintClassHistogram</span><br><span class="line">         -Djava.awt.headless=true </span><br><span class="line">         -XX:+UseParNewGC</span><br><span class="line">         -XX:ParallelGCThreads=4</span><br><span class="line">         -Doracle.jdbc.useThreadLocalBufferCache=false</span><br><span class="line">         -Doracle.jdbc.maxCachedBufferSize=0</span><br><span class="line">         -Dfile.encoding=utf-8i</span><br><span class="line">         -Dsun.zip.disableMemoryMapping=true</span><br><span class="line">        -Djava.rmi.server.hostname=192.168.99.67 -Dcom.sun.management.jmxremote.port=8989 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djavax.management.builder.initial=weblogic.management.jmx.mbeanserver.WLSMBeanServerBuilder"</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2019/10/22/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git配置多个SSH-key"><a href="#Git配置多个SSH-key" class="headerlink" title="Git配置多个SSH key"></a>Git配置多个SSH key</h1><blockquote>
<p>相关：<a href="https://blog.csdn.net/hao495430759/article/details/80673568" target="_blank" rel="noopener">https://blog.csdn.net/hao495430759/article/details/80673568</a></p>
</blockquote>
<h1 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h1><ul>
<li>从远端合并代码到本地</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.配置上游地址(只需要一次)</span><br><span class="line">git remote add upstream 你上游项目的地址 </span><br><span class="line"></span><br><span class="line">2.获取上游更新</span><br><span class="line">git fetch upstream</span><br><span class="line"></span><br><span class="line">3.合并到本地分支</span><br><span class="line">git merge upstream/master</span><br><span class="line"></span><br><span class="line">4.提交推送</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<ul>
<li>首次配置git时候测试连接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@192.168.99.168</span><br></pre></td></tr></table></figure>

<ul>
<li>生成密钥</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config –global user.name ‘username’ </span><br><span class="line">git config –global user.email ‘example@email.com<span class="string">'</span></span><br><span class="line"><span class="string">ssh-keygen -t rsa -C '</span>example@email.com<span class="string">'</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab安装部署</title>
    <url>/2019/12/31/GitLab%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><blockquote>
<p><a href="https://docs.gitlab.com/omnibus/manual_install.html" target="_blank" rel="noopener">https://docs.gitlab.com/omnibus/manual_install.html</a></p>
</blockquote>
<ul>
<li><p>配置ssh免密之后发现还是需要输入密码</p>
<p>网上的说法是：rpm安装过程当中会创建git用户，但是这个用户处在锁定状态，用下面这个命令解锁</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解锁</span></span><br><span class="line">sudo passwd -u -f git</span><br><span class="line"><span class="comment"># 查看所有账号</span></span><br><span class="line">cat /etc/passwd </span><br><span class="line"><span class="comment"># 查看xxx账户状态，是否被锁定</span></span><br><span class="line">passwd -S xxx</span><br><span class="line"><span class="comment"># 锁定xxx账号</span></span><br><span class="line">usermod -L xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>GitLab钩子</p>
<blockquote>
<p><a href="https://docs.gitlab.com/ee/administration/custom_hooks.html" target="_blank" rel="noopener">https://docs.gitlab.com/ee/administration/custom_hooks.html</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/opt/gitlab/git-data/repositories/</span><br><span class="line">/opt/gitlab/embedded/service/gitlab-shell/hooks</span><br></pre></td></tr></table></figure>
</li>
<li><p>汉化</p>
<blockquote>
<p><a href="https://gitlab.com/xhang/gitlab/-/wikis/home" target="_blank" rel="noopener">https://gitlab.com/xhang/gitlab/-/wikis/home</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 获取当前版本，版本可能不一致</span></span><br><span class="line">gitlab_version=$(sudo cat /opt/gitlab/embedded/service/gitlab-rails/VERSION)</span><br><span class="line"><span class="comment"># 克隆汉化版本库</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitlab.com/xhang/gitlab.git</span><br><span class="line"><span class="comment"># 如果已经克隆过，则进行更新</span></span><br><span class="line">git fetch</span><br><span class="line"><span class="comment"># 导出gitlab_version版本的汉化补丁</span></span><br><span class="line">git diff v<span class="variable">$&#123;gitlab_version&#125;</span> v<span class="variable">$&#123;gitlab_version&#125;</span>-zh &gt; ../<span class="variable">$&#123;gitlab_version&#125;</span>-zh.diff</span><br><span class="line"><span class="comment"># 停止 gitlab</span></span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line"><span class="comment"># 如果patch命令不存在 yum install -y patch</span></span><br><span class="line">sudo patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; <span class="variable">$&#123;gitlab_version&#125;</span>-zh.diff</span><br><span class="line"><span class="comment"># 停止gitlab</span></span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Java二进制操作方法</title>
    <url>/2020/03/16/Java%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="定义二进制"><a href="#定义二进制" class="headerlink" title="定义二进制"></a>定义二进制</h1><blockquote>
<p>二进制用<code>0b</code>开头</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i &#x3D; 0b11;</span><br></pre></td></tr></table></figure>

<h1 id="二进制转换"><a href="#二进制转换" class="headerlink" title="二进制转换"></a>二进制转换</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二进制字符串</span></span><br><span class="line">String b = Integer.toBinaryString(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//同理</span></span><br><span class="line">String b = Integer.toString(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//二进制字符串转int</span></span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(b, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h1 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h1><h2 id="int"><a href="#int" class="headerlink" title="int"></a><code>int</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i1 = <span class="number">0b11</span>, i2 = <span class="number">0b10</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 &lt;&lt; <span class="number">1</span>));</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 &gt;&gt; <span class="number">1</span>));</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 &amp; i2));</span><br><span class="line">System.out.println(Integer.toBinaryString(~i1));</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 | i2));</span><br><span class="line">System.out.println(Integer.toBinaryString(i1 ^ i2));</span><br></pre></td></tr></table></figure>
<h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a><code>BigInteger</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//11    00</span></span><br><span class="line">BigInteger bi1 = <span class="keyword">new</span> BigInteger(<span class="string">"3"</span>),bi2 = <span class="keyword">new</span> BigInteger(<span class="string">"0"</span>);</span><br><span class="line"><span class="comment">//左移</span></span><br><span class="line">System.out.println(bi1.shiftLeft(<span class="number">1</span>).toString(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//右移</span></span><br><span class="line">System.out.println(bi1.shiftRight(<span class="number">1</span>).toString(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//与</span></span><br><span class="line">System.out.println(bi1.and(bi2).toString(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//非</span></span><br><span class="line">System.out.println(bi1.not().toString(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">System.out.println(bi1.or(bi2).toString(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//异或</span></span><br><span class="line">System.out.println(bi1.xor(bi2).toString(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<h1 id="除基倒取余法"><a href="#除基倒取余法" class="headerlink" title="除基倒取余法"></a>除基倒取余法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binaryToDecimal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>; <span class="comment">// 用来记录位数</span></span><br><span class="line">    <span class="keyword">int</span> bin = <span class="number">0</span>; <span class="comment">// 用来记录最后的二进制数</span></span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>; <span class="comment">// 用来存储余数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        r = n % <span class="number">2</span>;</span><br><span class="line">        n = n / <span class="number">2</span>;</span><br><span class="line">        bin += r * Math.pow(<span class="number">10</span>, t);</span><br><span class="line">        t++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(bin + <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java图像相关操作</title>
    <url>/2019/12/19/Java%E5%9B%BE%E5%83%8F%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="BufferedImage"><a href="#BufferedImage" class="headerlink" title="BufferedImage"></a><code>BufferedImage</code></h1><blockquote>
</blockquote>
<h1 id="ImageIO"><a href="#ImageIO" class="headerlink" title="ImageIO"></a><code>ImageIO</code></h1><h1 id="Graphics，Graphics2D"><a href="#Graphics，Graphics2D" class="headerlink" title="Graphics，Graphics2D"></a><code>Graphics</code>，<code>Graphics2D</code></h1><ul>
<li>画一条线</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drawLine</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中常用却存在性能的问题</title>
    <url>/2020/01/10/Java%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%8D%B4%E5%AD%98%E5%9C%A8%E6%80%A7%E8%83%BD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="System-currentTimeMillis"><a href="#System-currentTimeMillis" class="headerlink" title="System.currentTimeMillis()"></a>System.currentTimeMillis()</h1><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">    singleThread(<span class="number">100</span>);</span><br><span class="line">    System.out.println(<span class="string">"single: "</span> + (System.nanoTime() - start));</span><br><span class="line">    start = System.nanoTime();</span><br><span class="line">    multiThread(<span class="number">100</span>);</span><br><span class="line">    System.out.println(<span class="string">"multi: "</span> + (System.nanoTime() - start));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">singleThread</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">multiThread</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.currentTimeMillis();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        latch.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>System.currentTimeMillis()调用会与系统交互，频繁访问或者高并发会造成严重的争用</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">single: 17727</span><br><span class="line">multi: 58580004</span><br></pre></td></tr></table></figure>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ul>
<li><p>创建一个类，在类中维护一个线程，定时去同步</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentTimeMillisClock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> now;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CurrentTimeMillisClock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.now = System.currentTimeMillis();</span><br><span class="line">        scheduleTick();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleTick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>, runnable -&gt; &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(runnable, <span class="string">"current-time-millis"</span>);</span><br><span class="line">            thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;).scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            now = System.currentTimeMillis();</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CurrentTimeMillisClock <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CurrentTimeMillisClock INSTANCE = <span class="keyword">new</span></span><br><span class="line">                CurrentTimeMillisClock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的引用</title>
    <url>/2020/01/09/Java%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<p>在Java中提供了四个级别的引用：强引用，软引用，弱引用和虚引用。在这四个引用类型中，只有强引用FinalReference类是包内可见，其他三种引用类型均为public，可以在应用程序中直接使用。引用类型的类结构如图所示。</p>
</blockquote>
<h2 id="强引用-FinalReference"><a href="#强引用-FinalReference" class="headerlink" title="强引用 FinalReference"></a>强引用 FinalReference</h2><blockquote>
<p>Java中的引用，类似C语言中最难的指针。（我是C语言入门编程，指针的概念还是很深入我心。）通过引用，可以对堆中的对象进行操作。如：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">"Helloword"</span>);</span><br></pre></td></tr></table></figure>
<p>变量str指向StringBuffer实例所在的堆空间，通过str可以操作该对象。</p>
<ul>
<li>强引用的特点：<ol>
<li>强引用可以直接访问目标对象。</li>
<li>强引用所指向的对象在任何时候都不会被系统回收。JVM宁愿抛出OOM异常，也不会回收强引用所指向的对象。</li>
<li>强引用可能导致内存泄漏。</li>
</ol>
</li>
</ul>
<h2 id="软引用-SoftReference"><a href="#软引用-SoftReference" class="headerlink" title="软引用 SoftReference"></a>软引用 SoftReference</h2><blockquote>
<p>软引用是除了强引用外，最强的引用类型。可以通过java.lang.ref.SoftReference使用软引用。一个持有软引用的对象，不会被JVM很快回收，JVM会根据当前堆的使用情况来判断何时回收。当堆使用率临近阈值时，才会去回收软引用的对象。因此，软引用可以用于实现对内存敏感的高速缓存。</p>
<p>SoftReference的特点是它的一个实例保存对一个Java对象的软引用， 该软引用的存在不妨碍垃圾收集线程对该Java对象的回收。也就是说，一旦SoftReference保存了对一个Java对象的软引用后，在垃圾线程对 这个Java对象回收前，SoftReference类所提供的get()方法返回Java对象的强引用。一旦垃圾线程回收该Java对象之后，get()方法将返回null。</p>
</blockquote>
<p>下面举一个例子说明软引用的使用方法。</p>
<p>在你的IDE设置参数 -Xmx2m -Xms2m规定堆内存大小为2m。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyObject obj = <span class="keyword">new</span> myObject();</span><br><span class="line">    SoftReference sf = <span class="keyword">new</span> SoftReference&lt;&gt;(obj);</span><br><span class="line">    obj = <span class="keyword">null</span>;</span><br><span class="line">    System.gc();</span><br><span class="line">    <span class="comment">//        byte[] bytes = new byte[1024*100];</span></span><br><span class="line">    <span class="comment">//        System.gc();</span></span><br><span class="line">    System.out.println(<span class="string">"是否被回收"</span>+sf.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">是否被回收cn.zyzpp.MyObject@42110406</span><br></pre></td></tr></table></figure>
<p>打开被注释掉的new byte[1024*100]语句，这条语句请求一块大的堆空间，使堆内存使用紧张。并显式的再调用一次GC，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">是否被回收null</span><br></pre></td></tr></table></figure>
<p>说明在系统内存紧张的情况下，软引用被回收。</p>
<h2 id="弱引用-PhantomReference"><a href="#弱引用-PhantomReference" class="headerlink" title="弱引用 PhantomReference"></a>弱引用 PhantomReference</h2><blockquote>
<p>弱引用是一种比软引用较弱的引用类型。在系统GC时，只要发现弱引用，不管系统堆空间是否足够，都会将对象进行回收。在java中，可以用java.lang.ref.WeakReference实例来保存对一个Java对象的弱引用。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyObject obj = <span class="keyword">new</span> MyObject();</span><br><span class="line">    WeakReference sf = <span class="keyword">new</span> WeakReference(obj);</span><br><span class="line">    obj = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(<span class="string">"是否被回收"</span>+sf.get());</span><br><span class="line">    System.gc();</span><br><span class="line">    System.out.println(<span class="string">"是否被回收"</span>+sf.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">是否被回收cn.zyzpp.MyObject@42110406</span><br><span class="line">是否被回收null</span><br></pre></td></tr></table></figure>
<p>软引用，弱引用都非常适合来保存那些可有可无的缓存数据，如果这么做，当系统内存不足时，这些缓存数据会被回收，不会导致内存溢出。而当内存资源充足时，这些缓存数据又可以存在相当长的时间，从而起到加速系统的作用。</p>
<h3 id="弱引用WeakHashMap"><a href="#弱引用WeakHashMap" class="headerlink" title="弱引用WeakHashMap"></a>弱引用WeakHashMap</h3><blockquote>
<p>WeakHashMap类在java.util包内，它实现了Map接口，是HashMap的一种实现，它使用弱引用作为内部数据的存储方案。WeakHashMap是弱引用的一种典型应用，它可以作为简单的缓存表解决方案。</p>
</blockquote>
<p>以下两段代码分别使用WeakHashMap和HashMap保存大量的数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map map;</span><br><span class="line">    map = <span class="keyword">new</span> WeakHashMap&lt;String,Object&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">        map.put(<span class="string">"key"</span>+i,<span class="keyword">new</span> <span class="keyword">byte</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//        map = new HashMap&lt;String,Object&gt;();</span></span><br><span class="line">    <span class="comment">//        for (int i =0;i&lt;10000;i++)&#123;</span></span><br><span class="line">    <span class="comment">//            map.put("key"+i,new byte[i]);</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用-Xmx2M限定堆内存，使用WeakHashMap的代码正常运行结束，而使用HashMap的代码段抛出异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br></pre></td></tr></table></figure>
<p>由此可见，WeakHashMap会在系统内存紧张时使用弱引用，自动释放掉持有弱引用的内存数据。</p>
<p>但如果WeakHashMap的key都在系统内持有强引用，那么WeakHashMap就退化为普通的HashMap，因为所有的表项都无法被自动清理。</p>
<h2 id="虚引用-WeakReference"><a href="#虚引用-WeakReference" class="headerlink" title="虚引用 WeakReference"></a>虚引用 WeakReference</h2><blockquote>
<p>虚引用是所有类型中最弱的一个。一个持有虚引用的对象，和没有引用几乎是一样的，随时可能被垃圾回收器回收。当试图通过虚引用的get()方法取得强引用时，总是会失败。并且，虚引用必须和引用队列一起使用，它的作用在于跟踪垃圾回收过程。</p>
<p>当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在垃圾回收后，销毁这个对象，将这个虚引用加入引用队列。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyObject obj = <span class="keyword">new</span> MyObject();</span><br><span class="line">    ReferenceQueue&lt;Object&gt; referenceQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">    PhantomReference sf = <span class="keyword">new</span> PhantomReference&lt;&gt;(obj,referenceQueue);</span><br><span class="line">    obj = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(<span class="string">"是否被回收"</span>+sf.get());</span><br><span class="line">    System.gc();</span><br><span class="line">    System.out.println(<span class="string">"是否被回收"</span>+sf.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">是否被回收null</span><br><span class="line">是否被回收null</span><br></pre></td></tr></table></figure>
<p>对虚引用的get()操作，总是返回null，因为sf.get()方法的实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java序列化</title>
    <url>/2019/12/12/Java%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java序列化是指把Java对象转换为字节序列的过程；而Java反序列化是指把字节序列恢复为Java对象的过程。从而达到网络传输、本地存储的效果。</p>
<h1 id="序列化Serializable"><a href="#序列化Serializable" class="headerlink" title="序列化Serializable"></a>序列化<code>Serializable</code></h1><blockquote>
<p>实现<code>Serializable</code>接口，会自动将非<code>transient</code>修饰的变量序列化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.serial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">184170424740238078L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.serial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserializable</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(bytes))) &#123;</span><br><span class="line">            Object o = objectInputStream.readObject();</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serializable(Object obj) &#123;</span><br><span class="line">        <span class="keyword">try</span> (ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">             ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);) &#123;</span><br><span class="line">            objectOutputStream.writeObject(obj);</span><br><span class="line">            <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"zhang"</span>);</span><br><span class="line">        user.setSex(<span class="string">"man"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] serializable = SerializableUtil.serializable(user);</span><br><span class="line">        User deserializable = (User)SerializableUtil.deserializable(serializable);</span><br><span class="line">        System.out.println(deserializable.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Externalizable"><a href="#Externalizable" class="headerlink" title="Externalizable"></a><code>Externalizable</code></h1><blockquote>
<p>实现<code>Externalizable</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.serial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput objectOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        objectOutput.writeObject(name);</span><br><span class="line">        objectOutput.writeObject(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput objectInput)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        String name = (String) objectInput.readObject();</span><br><span class="line">        String color = (String) objectInput.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p><code>Externalizable</code>接口实现方式一定要有默认的无参构造函数</p>
<p><code>Externalizable</code>不需要产生序列化ID而<code>Serializable</code>需要</p>
<p>相比较<code>Serializable</code>,<code>Externalizable</code>序列化、反序列更加快速，占用相比较小的内存</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中如何格式化内容</title>
    <url>/2020/03/24/Java%E4%B8%AD%E5%A6%82%E4%BD%95%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<blockquote>
<p>Java中经常会用到格式化内容输出，简单写个文档，看看自己还有哪些遗漏</p>
</blockquote>
<h1 id="String-format"><a href="#String-format" class="headerlink" title="String.format"></a><code>String.format</code></h1><ul>
<li><p>常规类型、字符类型和数值类型的格式说明符的语法如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%[argument_index$][flags][width][.precision]conversion</span><br></pre></td></tr></table></figure>

<p>可选的 <em>argument_index</em> 是一个十进制整数，用于表明参数在参数列表中的位置。第一个参数由 “<code>1$</code>“  引用，第二个参数由 “<code>2$</code>“ 引用，依此类推。  </p>
<p>可选 <em>flags</em> 是修改输出格式的字符集。有效标志集取决于转换类型。  </p>
<p>可选 <em>width</em> 是一个非负十进制整数，表明要向输出中写入的最少字符数。  </p>
<p>可选 <em>precision</em> 是一个非负十进制整数，通常用来限制字符数。特定行为取决于转换类型。 </p>
<p>必须 <em>conversion</em> 是一个表明应该如何格式化参数的字符。给定参数的有效转换集取决于参数的数据类型。 </p>
</li>
</ul>
<p>其他自己看API文档吧…</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java文件复制</title>
    <url>/2020/03/24/Java%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h1 id="一、使用FileStreams复制"><a href="#一、使用FileStreams复制" class="headerlink" title="一、使用FileStreams复制"></a>一、使用FileStreams复制</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFileUsingFileStreams</span><span class="params">(File source, File dest)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;    </span><br><span class="line">    InputStream input = <span class="keyword">null</span>;    </span><br><span class="line">    OutputStream output = <span class="keyword">null</span>;    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        input = <span class="keyword">new</span> FileInputStream(source);</span><br><span class="line">        output = <span class="keyword">new</span> FileOutputStream(dest);        </span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];        </span><br><span class="line">        <span class="keyword">int</span> bytesRead;        </span><br><span class="line">        <span class="keyword">while</span> ((bytesRead = input.read(buf)) ！= -<span class="number">1</span>) &#123;</span><br><span class="line">            output.write(buf, <span class="number">0</span>, bytesRead);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        input.close();</span><br><span class="line">        output.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、使用FileChannel复制"><a href="#二、使用FileChannel复制" class="headerlink" title="二、使用FileChannel复制"></a>二、使用FileChannel复制</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFileUsingFileChannels</span><span class="params">(File source, File dest)</span> <span class="keyword">throws</span> IOException </span>&#123;    </span><br><span class="line">    FileChannel inputChannel = <span class="keyword">null</span>;    </span><br><span class="line">    FileChannel outputChannel = <span class="keyword">null</span>;    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputChannel = <span class="keyword">new</span> FileInputStream(source).getChannel();</span><br><span class="line">        outputChannel = <span class="keyword">new</span> FileOutputStream(dest).getChannel();</span><br><span class="line">        outputChannel.transferFrom(inputChannel, <span class="number">0</span>, inputChannel.size());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        inputChannel.close();</span><br><span class="line">        outputChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、使用Commons-IO复制"><a href="#三、使用Commons-IO复制" class="headerlink" title="三、使用Commons IO复制"></a>三、使用Commons IO复制</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFileUsingApacheCommonsIO</span><span class="params">(File source, File dest)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileUtils.copyFile(source, dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doCopyFile</span><span class="params">(<span class="keyword">final</span> File srcFile, <span class="keyword">final</span> File destFile, <span class="keyword">final</span> <span class="keyword">boolean</span> preserveFileDate)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (destFile.exists() &amp;&amp; destFile.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Destination '"</span> + destFile + <span class="string">"' exists but is a directory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">         FileChannel input = fis.getChannel();</span><br><span class="line">         FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">         FileChannel output = fos.getChannel()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> size = input.size(); <span class="comment">// TODO See IO-386</span></span><br><span class="line">        <span class="keyword">long</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (pos &lt; size) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> remain = size - pos;</span><br><span class="line">            count = remain &gt; FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : remain;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> bytesCopied = output.transferFrom(input, pos, count);</span><br><span class="line">            <span class="keyword">if</span> (bytesCopied == <span class="number">0</span>) &#123; <span class="comment">// IO-385 - can happen if file is truncated after caching the size</span></span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// ensure we don't loop forever</span></span><br><span class="line">            &#125;</span><br><span class="line">            pos += bytesCopied;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> srcLen = srcFile.length(); <span class="comment">// TODO See IO-386</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> dstLen = destFile.length(); <span class="comment">// TODO See IO-386</span></span><br><span class="line">    <span class="keyword">if</span> (srcLen != dstLen) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Failed to copy full contents from '"</span> +</span><br><span class="line">                              srcFile + <span class="string">"' to '"</span> + destFile + <span class="string">"' Expected length: "</span> + srcLen + <span class="string">" Actual: "</span> + dstLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preserveFileDate) &#123;</span><br><span class="line">        destFile.setLastModified(srcFile.lastModified());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="四、使用Java7的Files类复制"><a href="#四、使用Java7的Files类复制" class="headerlink" title="四、使用Java7的Files类复制"></a>四、使用Java7的Files类复制</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFileUsingJava7Files</span><span class="params">(File source, File dest)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;    </span><br><span class="line">    Files.copy(source.toPath(), dest.toPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> snippet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFilesExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">            IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File source = <span class="keyword">new</span> File(<span class="string">"F:\\INSTALL_HISTORY\\ideaIU-2019.1.1.exe"</span>);</span><br><span class="line">        File dest = <span class="keyword">new</span> File(<span class="string">"F:\\TEST\\ideaIU-2019.1.1_1.exe"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// copy file using FileStreams</span></span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">long</span> end;</span><br><span class="line">        copyFileUsingFileStreams(source, dest);</span><br><span class="line">        System.out.printf(<span class="string">"%-50s = %20d\n"</span>, <span class="string">"Time taken by FileStreams Copy"</span>, (System.nanoTime() - start));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// copy files using java.nio.FileChannelsource = new File("C:\\Users\\nikos7\\Desktop\\files\\sourcefile2.txt");</span></span><br><span class="line">        dest = <span class="keyword">new</span> File(<span class="string">"F:\\TEST\\ideaIU-2019.1.1_2.exe"</span>);</span><br><span class="line">        start = System.nanoTime();</span><br><span class="line">        copyFileUsingFileChannels(source, dest);</span><br><span class="line">        end = System.nanoTime();</span><br><span class="line">        System.out.printf(<span class="string">"%-50s = %20d\n"</span>, <span class="string">"Time taken by FileChannels Copy"</span>, (System.nanoTime() - start));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// copy file using Java 7 Files classsource = new File("C:\\Users\\nikos7\\Desktop\\files\\sourcefile3.txt");</span></span><br><span class="line">        dest = <span class="keyword">new</span> File(<span class="string">"F:\\TEST\\ideaIU-2019.1.1_3.exe"</span>);</span><br><span class="line">        start = System.nanoTime();</span><br><span class="line">        copyFileUsingJava7Files(source, dest);</span><br><span class="line">        end = System.nanoTime();</span><br><span class="line">        System.out.printf(<span class="string">"%-50s = %20d\n"</span>, <span class="string">"Time taken by Java7 Files Copy"</span>, (System.nanoTime() - start));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// copy files using apache commons iosource = new File("C:\\Users\\nikos7\\Desktop\\files\\sourcefile4.txt");</span></span><br><span class="line">        dest = <span class="keyword">new</span> File(<span class="string">"F:\\TEST\\ideaIU-2019.1.1_4.exe"</span>);</span><br><span class="line">        start = System.nanoTime();</span><br><span class="line">        copyFileUsingApacheCommonsIO(source, dest);</span><br><span class="line">        end = System.nanoTime();</span><br><span class="line">        System.out.printf(<span class="string">"%-50s = %20d\n"</span>, <span class="string">"Time taken by Apache Commons IO Copy"</span>, (System.nanoTime() - start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFileUsingFileStreams</span><span class="params">(File source, File dest)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream input = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream output = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            input = <span class="keyword">new</span> FileInputStream(source);</span><br><span class="line">            output = <span class="keyword">new</span> FileOutputStream(dest);</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = input.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                output.write(buf, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            input.close();</span><br><span class="line">            output.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFileUsingFileChannels</span><span class="params">(File source, File dest)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileChannel inputChannel = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel outputChannel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputChannel = <span class="keyword">new</span> FileInputStream(source).getChannel();</span><br><span class="line">            outputChannel = <span class="keyword">new</span> FileOutputStream(dest).getChannel();</span><br><span class="line">            outputChannel.transferFrom(inputChannel, <span class="number">0</span>, inputChannel.size());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            inputChannel.close();</span><br><span class="line">            outputChannel.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFileUsingJava7Files</span><span class="params">(File source, File dest)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Files.copy(source.toPath(), dest.toPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFileUsingApacheCommonsIO</span><span class="params">(File source, File dest)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileUtils.copyFile(source, dest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time taken by FileStreams Copy                     &#x3D;           3307186847</span><br><span class="line">Time taken by FileChannels Copy                    &#x3D;            355407223</span><br><span class="line">Time taken by Java7 Files Copy                     &#x3D;            434544647</span><br><span class="line">Time taken by Apache Commons IO Copy               &#x3D;           2018366048</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java断点续传</title>
    <url>/2020/01/20/Java%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><blockquote>
<p>所谓断点续传，就是指从文件已经下载好的地方开始继续下载。所以下载端传给Web服务器的时候要多加一条信息，那就是从哪个字节开始下载。了解到这些，我们就可以开发了。</p>
</blockquote>
<h1 id="Range"><a href="#Range" class="headerlink" title="Range"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range" target="_blank" rel="noopener">Range</a></h1><blockquote>
<p>The <strong>Range</strong> 是一个请求首部，告知服务器返回文件的哪一部分。在一个  <code>Range</code> 首部中，可以一次性请求多个部分，服务器会以 <code>multipart</code> 文件的形式将其返回。如果服务器返回的是范围响应，需要使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206" target="_blank" rel="noopener"><code>206</code></a> <code>Partial Content</code> 状态码。假如所请求的范围不合法，那么服务器会返回  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/416" target="_blank" rel="noopener"><code>416</code></a> <code>Range Not Satisfiable</code> 状态码，表示客户端错误。服务器允许忽略  <code>Range</code>  首部，从而返回整个文件，状态码用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200" target="_blank" rel="noopener"><code>200</code></a> 。</p>
</blockquote>
<h1 id="Content-Range"><a href="#Content-Range" class="headerlink" title="Content-Range"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Range" target="_blank" rel="noopener">Content-Range</a></h1><blockquote>
<p>在HTTP协议中，响应首部 <strong>Content-Range</strong> 显示的是一个数据片段在整个文件中的位置。</p>
</blockquote>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a><a href="https://github.com/zgsxxzzyl/sample-code/tree/master/jdk.usage/src/main/java/net/download" target="_blank" rel="noopener">示例代码</a></h1>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程池解析</title>
    <url>/2020/03/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="线程池概念"><a href="#线程池概念" class="headerlink" title="线程池概念"></a>线程池概念</h2><blockquote>
<p>相关文章：<a href="https://juejin.im/post/5d1882b1f265da1ba84aa676" target="_blank" rel="noopener">https://juejin.im/post/5d1882b1f265da1ba84aa676</a></p>
</blockquote>
<p><strong>线程池：</strong> 简单理解，它就是一个管理线程的池子。</p>
<ul>
<li><strong>它帮我们管理线程，避免增加创建线程和销毁线程的资源损耗</strong>。因为线程其实也是一个对象，创建一个对象，需要经过类加载过程，销毁一个对象，需要走GC垃圾回收流程，都是需要资源开销的。</li>
<li><strong>提高响应速度。</strong> 如果任务到达了，相对于从线程池拿线程，重新去创建一条线程执行，速度肯定慢很多。</li>
<li><strong>重复利用。</strong> 线程用完，再放回池子，可以达到重复利用的效果，节省资源。</li>
</ul>
<h2 id="线程池的创建"><a href="#线程池的创建" class="headerlink" title="线程池的创建"></a>线程池的创建</h2><p>线程池可以通过ThreadPoolExecutor来创建，我们来看一下它的构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure>

<p>几个核心参数的作用：</p>
<ul>
<li><strong>corePoolSize：</strong> 线程池核心线程数最大值</li>
<li><strong>maximumPoolSize：</strong> 线程池最大线程数大小</li>
<li><strong>keepAliveTime：</strong> 线程池中非核心线程空闲的存活时间大小</li>
<li><strong>unit：</strong> 线程空闲存活时间单位</li>
<li><strong>workQueue：</strong> 存放任务的阻塞队列</li>
<li><strong>threadFactory：</strong> 用于设置创建线程的工厂，可以给创建的线程设置有意义的名字，可方便排查问题。</li>
<li><strong>handler：</strong> 线城池的饱和策略事件，主要有四种类型</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java语言解析XML的几种方式</title>
    <url>/2020/03/06/Java%E8%AF%AD%E8%A8%80%E8%A7%A3%E6%9E%90XML%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="1-DOM解析"><a href="#1-DOM解析" class="headerlink" title="(1)DOM解析"></a>(1)DOM解析</h1><blockquote>
<p>DOM是html和xml的应用程序接口(API)，以层次结构（类似于树型）来组织节点和信息片段，映射XML文档的结构，允许获取和操作文档的任意部分，是W3C的官方标准</p>
</blockquote>
<h2 id="【优点】"><a href="#【优点】" class="headerlink" title="【优点】"></a>【优点】</h2><ul>
<li>①允许应用程序对数据和结构做出更改。</li>
<li>②访问是双向的，可以在任何时候在树中上下导航，获取和操作任意部分的数据。</li>
</ul>
<h2 id="【缺点】"><a href="#【缺点】" class="headerlink" title="【缺点】"></a>【缺点】</h2><p>①通常需要加载整个XML文档来构造层次结构，消耗资源大。</p>
<h2 id="【解析详解】"><a href="#【解析详解】" class="headerlink" title="【解析详解】"></a>【解析详解】</h2><ul>
<li>①构建Document对象：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DocumentBuilderFactory dbf &#x3D; DocumentBuilderFactory.newInstance();</span><br><span class="line">DocumentBuilder db &#x3D; bdf.newDocumentBuilder();</span><br><span class="line">InputStream is &#x3D; Thread.currentThread().getContextClassLoader().getResourceAsStream(xml文件);</span><br><span class="line">Document doc &#x3D; bd.parse(is);</span><br></pre></td></tr></table></figure></li>
<li>②遍历DOM对象<ul>
<li>Document：    XML文档对象，由解析器获取</li>
<li>NodeList：    节点数组</li>
<li>Node：    节点(包括element、# text)</li>
<li>Element：    元素，可用于获取属性参数</li>
</ul>
</li>
</ul>
<h1 id="2-SAX-Simple-API-for-XML-解析"><a href="#2-SAX-Simple-API-for-XML-解析" class="headerlink" title="(2)SAX(Simple API for XML)解析"></a>(2)SAX(Simple API for XML)解析</h1><blockquote>
<p>流型中的”推”模型分析方式。通过事件驱动，每发现一个节点就引发一个事件，事件推给事件处理器，通过回调方法<br>完成解析工作，解析XML文档的逻辑需要应用程序完成</p>
</blockquote>
<h2 id="【优势】"><a href="#【优势】" class="headerlink" title="【优势】"></a>【优势】</h2><ul>
<li>①不需要等待所有数据都被处理，分析就能立即开始。</li>
<li>②只在读取数据时检查数据，不需要保存在内存中。</li>
<li>③可以在某个条件得到满足时停止解析，不必解析整个文档。</li>
<li>④效率和性能较高，能解析大于系统内存的文档。</li>
</ul>
<h2 id="【缺点】-1"><a href="#【缺点】-1" class="headerlink" title="【缺点】"></a>【缺点】</h2><ul>
<li>①需要应用程序自己负责TAG的处理逻辑（例如维护父/子关系等），文档越复杂程序就越复杂。</li>
<li>②单向导航，无法定位文档层次，很难同时访问同一文档的不同部分数据，不支持XPath。</li>
</ul>
<h2 id="【原理】"><a href="#【原理】" class="headerlink" title="【原理】"></a>【原理】</h2><p>简单的说就是对文档进行顺序扫描，当扫描到文档(document)开始与结束、元素(element)开始与结束时通知事件处理函数(回调函数)，进行相应处理，直到文档结束</p>
<h2 id="【事件处理器类型】"><a href="#【事件处理器类型】" class="headerlink" title="【事件处理器类型】"></a>【事件处理器类型】</h2><ul>
<li>①访问XML DTD：DTDHandler</li>
<li>②低级访问解析错误：ErrorHandler</li>
<li>③访问文档内容：ContextHandler</li>
</ul>
<h2 id="【DefaultHandler类】"><a href="#【DefaultHandler类】" class="headerlink" title="【DefaultHandler类】"></a>【DefaultHandler类】</h2><p>SAX事件处理程序的默认基类，实现了DTDHandler、ErrorHandler、ContextHandler和EntityResolver接口，通常做法是，继承该基类，重写需要的方法，如startDocument()</p>
<h2 id="【创建SAX解析器】"><a href="#【创建SAX解析器】" class="headerlink" title="【创建SAX解析器】"></a>【创建SAX解析器】</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SAXParserFactory saxf &#x3D; SAXParserFactory.newInstance();</span><br><span class="line">SAXParser sax &#x3D; saxf.newSAXParser();</span><br></pre></td></tr></table></figure>
<p>注：关于遍历</p>
<ul>
<li>①深度优先遍历(Depthi-First Traserval)</li>
<li>②广度优先遍历(Width-First Traserval)</li>
</ul>
<h1 id="3-JDOM-Java-based-Document-Object-Model"><a href="#3-JDOM-Java-based-Document-Object-Model" class="headerlink" title="(3)JDOM(Java-based Document Object Model)"></a>(3)JDOM(Java-based Document Object Model)</h1><blockquote>
<p>Java特定的文档对象模型。自身不包含解析器，使用SAX</p>
</blockquote>
<h2 id="【优点】-1"><a href="#【优点】-1" class="headerlink" title="【优点】"></a>【优点】</h2><ul>
<li>①使用具体类而不是接口，简化了DOM的API。</li>
<li>②大量使用了Java集合类，方便了Java开发人员。</li>
</ul>
<h2 id="【缺点】-2"><a href="#【缺点】-2" class="headerlink" title="【缺点】"></a>【缺点】</h2><ul>
<li>①没有较好的灵活性。</li>
<li>②性能较差。</li>
</ul>
<h1 id="4-DOM4J-Document-Object-Model-for-Java"><a href="#4-DOM4J-Document-Object-Model-for-Java" class="headerlink" title="(4)DOM4J(Document Object Model for Java)"></a>(4)DOM4J(Document Object Model for Java)</h1><blockquote>
<p>简单易用，采用Java集合框架，并完全支持DOM、SAX和JAXP</p>
</blockquote>
<h2 id="【优点】-2"><a href="#【优点】-2" class="headerlink" title="【优点】"></a>【优点】</h2><ul>
<li>①大量使用了Java集合类，方便Java开发人员，同时提供一些提高性能的替代方法。</li>
<li>②支持XPath。</li>
<li>③有很好的性能。</li>
</ul>
<h2 id="【缺点】-3"><a href="#【缺点】-3" class="headerlink" title="【缺点】"></a>【缺点】</h2><ul>
<li>①大量使用了接口，API较为复杂。</li>
</ul>
<h1 id="5-StAX-Streaming-API-for-XML"><a href="#5-StAX-Streaming-API-for-XML" class="headerlink" title="(5)StAX(Streaming API for XML)"></a>(5)StAX(Streaming API for XML)</h1><blockquote>
<p>流模型中的拉模型分析方式。提供基于指针和基于迭代器两种方式的支持,JDK1.6新特性</p>
</blockquote>
<h2 id="【和推式解析相比的优点】"><a href="#【和推式解析相比的优点】" class="headerlink" title="【和推式解析相比的优点】"></a>【和推式解析相比的优点】</h2><ul>
<li>①在拉式解析中，事件是由解析应用产生的，因此拉式解析中向客户端提供的是解析规则，而不是解析器。</li>
<li>②同推式解析相比，拉式解析的代码更简单，而且不用那么多库。</li>
<li>③拉式解析客户端能够一次读取多个XML文件。</li>
<li>④拉式解析允许你过滤XML文件和跳过解析事件。</li>
</ul>
<h2 id="【简介】"><a href="#【简介】" class="headerlink" title="【简介】"></a>【简介】</h2><p>StAX API的实现是使用了Java Web服务开发（JWSDP）1.6，并结合了Sun Java流式XML分析器(SJSXP)-它位于<br>javax.xml.stream包中。XMLStreamReader接口用于分析一个XML文档，而XMLStreamWriter接口用于生成一个<br>XML文档。XMLEventReader负责使用一个对象事件迭代子分析XML事件-这与XMLStreamReader所使用的光标机制<br>形成对照。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>DOM4J</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java泛型的协变与逆变</title>
    <url>/2019/11/14/Java%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98/</url>
    <content><![CDATA[<h1 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h1><p>Java的泛型本质上不是真正的泛型，而是利用了类型擦除（type erasure），比如下面的代码就会出现错误：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里会编译错误</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(List&lt;Integer&gt; list)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>报的错误是：both methods  have same erasure</p>
<p>原因是java在编译的时候会把泛型，上面的<code>&lt;String&gt;</code>和<code>&lt;Integer&gt;</code>都给擦除掉（其实并没有真正的被擦除，<code>javap -l -p -v -c</code>可以看到<code>LocalVariableTypeTable</code>里面有方法参数类型的签名）。</p>
<h1 id="协变与逆变"><a href="#协变与逆变" class="headerlink" title="协变与逆变"></a>协变与逆变</h1><p>理解了类型擦除有助于我们理解泛型的协变与逆变，现有几个类如下：</p>
<p>Plant　　Fruit　　Apple　　Banana　　Orange</p>
<p>其中Apple、Banana、Orange是Fruit的子类，Fruit是Plant的子类。我们来看下下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Fruit&gt; list = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();		<span class="comment">//编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>泛型没有内建的协变类型，无法将<code>List&lt;Fruit&gt;</code>和<code>ArrayList&lt;Apple&gt;</code>关联起来，所以在编译阶段就会出现错误。</p>
<h2 id="协变"><a href="#协变" class="headerlink" title="协变"></a>协变</h2><p>于是我们可以利用通配符实现泛型的协变：<code>&lt;? extends T&gt;</code>子类通配符；这个通配符定义了?继承自T，可以帮助我们实现向上转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;? extends Fruit&gt; list = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们要理解当转换之后list中的数据类型是什么。虽然将Apple类型赋值给了list，但是list的类型是<code>? extends Fruit</code>，把<code>? extends Fruit</code>看成一个整体，我们能确定list的具体类型肯定是Fruit或者Fruit的父类(因为一个类只能有一个直接父类，所以确定了Fruit，那么Fruit的父类则都是可以确定的)，而不能确定list的类型是Fruit的子类当中具体的哪一个？（有多个类都继承自Fruit），所以这也就直接导致了一旦使用了<code>&lt;? extends T&gt;</code>向上转换之后，不能再向list中添加任何类型的对象了，这个时候只能选择从list当中get数据而不能add。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;? extends Fruit&gt; list = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Apple());	<span class="comment">//编译错误</span></span><br><span class="line">    list.add(<span class="keyword">new</span> Banana());	<span class="comment">//编译错误</span></span><br><span class="line">    list.add(<span class="keyword">new</span> Orange());	<span class="comment">//编译错误</span></span><br><span class="line">    list.add(<span class="keyword">new</span> Fruit());	<span class="comment">//编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外还需要注意的是，这个时候从list当中get出来的数据不再是Apple，而是Fruit或者Fruit的父类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;? extends Fruit&gt; list = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();</span><br><span class="line">    Fruit fruit = list.get(<span class="number">0</span>);</span><br><span class="line">    Plant plant = list.get(<span class="number">0</span>);</span><br><span class="line">    Apple apple = list.get(<span class="number">0</span>);	<span class="comment">//编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a>逆变</h2><p>逆变则和协变相反，它是向下转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;? <span class="keyword">super</span> Fruit&gt; list = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Apple());</span><br><span class="line">    list.add(<span class="keyword">new</span> Fruit());</span><br><span class="line">    list.add(<span class="keyword">new</span> Plant());	<span class="comment">//编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逆变使用通配符<code>? super T</code>（超类通配符），如上面代码，Fruit是Apple的超类，则这个时候对于JVM来说，它能确定list的类型的超类肯定是Apple或者Apple的父类，换言之该类型就是Apple或者Apple的子类，所以和上面的协变一样，既然确定了类型的范围，那么list能够add的类型也就是Apple或者Apple的子类了。</p>
<h2 id="PECS"><a href="#PECS" class="headerlink" title="PECS"></a>PECS</h2><p>是指Producer Extends, Consumer Super</p>
<p>总结 <code>? extends T</code>和 <code>? super T</code> 通配符的特征，我们可以得出以下结论：</p>
<ul>
<li>如果你想从一个数据类型里获取数据，使用 <code>? extends T</code>通配符</li>
<li>如果你想把对象写入一个数据结构里，使用<code>? super T</code>通配符</li>
<li>如果你既想存，又想取，那就别用通配符。</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java泛型简介</title>
    <url>/2020/01/09/Java%E6%B3%9B%E5%9E%8B%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="泛型-Generics"><a href="#泛型-Generics" class="headerlink" title="泛型(Generics)"></a>泛型(Generics)</h1><ul>
<li><p>泛型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>&#123; </span><br><span class="line">    <span class="comment">//key这个成员变量的类型为T,T的类型由外部指定  </span></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123; <span class="comment">//泛型构造方法形参key的类型也为T，T的类型由外部指定</span></span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123; <span class="comment">//泛型方法getKey的返回值类型为T，T的类型由外部指定</span></span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>泛型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>泛型方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型方法的基本介绍</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tClass 传入的泛型实参</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> T 返回值为T类型</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> *     1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。</span></span><br><span class="line"><span class="comment"> *     2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。</span></span><br><span class="line"><span class="comment"> *     3）&lt;T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。</span></span><br><span class="line"><span class="comment"> *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">genericMethod</span><span class="params">(Class&lt;T&gt; tClass)</span><span class="keyword">throws</span> InstantiationException ,</span></span><br><span class="line"><span class="function">  IllegalAccessException</span>&#123;</span><br><span class="line">        T instance = tClass.newInstance();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins和SonarQube集成</title>
    <url>/2019/10/25/Jenkins%E5%92%8CSonarQube%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<h1 id="Jenkins和SonarQube集成"><a href="#Jenkins和SonarQube集成" class="headerlink" title="Jenkins和SonarQube集成"></a>Jenkins和SonarQube集成</h1><h2 id="安装插件SonarQube-Scanner-for-Jenkins"><a href="#安装插件SonarQube-Scanner-for-Jenkins" class="headerlink" title="安装插件SonarQube Scanner for Jenkins"></a>安装插件SonarQube Scanner for Jenkins</h2><ul>
<li>系统管理 - 插件管理</li>
<li>可选插件（没有内容点立即获取）</li>
<li>过滤 - 搜索SonarQube </li>
<li>安装SonarQube Scanner for Jenkins</li>
<li>安装成功 - 重启</li>
</ul>
<h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><ul>
<li>系统管理 - 系统设置 - SonarQube servers<br><img src="/images/Jenkins%E5%92%8CSonarQube%E9%9B%86%E6%88%90/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190628094437.png" alt=""></li>
</ul>
<h2 id="给项目配置启动SonarQube"><a href="#给项目配置启动SonarQube" class="headerlink" title="给项目配置启动SonarQube"></a>给项目配置启动SonarQube</h2><ul>
<li><p>创建一个maven项目<br><img src="/images/Jenkins%E5%92%8CSonarQube%E9%9B%86%E6%88%90/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190628100058.png" alt=""></p>
</li>
<li><p>配置maven项目</p>
</li>
<li><p>配置SonarQube<br>构建环境 - Pre Steps/Post Steps - Add pre-build step - Execute SonarQube Scanner<br><img src="/images/Jenkins%E5%92%8CSonarQube%E9%9B%86%E6%88%90/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190628100535.png" alt=""><br><img src="/images/Jenkins%E5%92%8CSonarQube%E9%9B%86%E6%88%90/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190628100715.png" alt=""></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">//多模块配置</span></span><br><span class="line"><span class="meta">sonar.projectKey</span>=<span class="string">project_key</span></span><br><span class="line"><span class="meta">sonar.projectName</span>=<span class="string">project_name</span></span><br><span class="line"><span class="meta">sonar.projectVersion</span>=<span class="string">1.0</span></span><br><span class="line"><span class="meta">sonar.sourceEncoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">sonar.modules</span>=<span class="string">root,core</span></span><br><span class="line"></span><br><span class="line"><span class="meta">root.sonar.projectBaseDir</span>=<span class="string">./</span></span><br><span class="line"><span class="meta">root.sonar.modules</span>=<span class="string">com.thirdservice</span></span><br><span class="line"><span class="meta">root.sonar.sources</span>=<span class="string">src/main/java</span></span><br><span class="line"><span class="meta">root.sonar.java.binaries</span>=<span class="string">target/classes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">core.sonar.projectBaseDir</span>=<span class="string">third/core/</span></span><br><span class="line"><span class="meta">core.sonar.modules</span>=<span class="string">com.bridge</span></span><br><span class="line"><span class="meta">core.sonar.sources</span>=<span class="string">src/main/java</span></span><br><span class="line"><span class="meta">core.sonar.java.binaries</span>=<span class="string">target/classes</span></span><br></pre></td></tr></table></figure>

<h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><h2 id="相关问题-注意"><a href="#相关问题-注意" class="headerlink" title="相关问题(注意)"></a>相关问题(注意)</h2></li>
</ul>
<ol>
<li>mysql参数设置问题<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">17:08:15.777 DEBUG: Upload report</span><br><span class="line">17:08:22.648 DEBUG: POST 500 http:&#x2F;&#x2F;192.168.99.108:9000&#x2F;api&#x2F;ce&#x2F;submit?projectKey&#x3D;bi_build_sonar&amp;projectName&#x3D;bi_build_sonar | time&#x3D;6864ms</span><br><span class="line">17:08:22.662 INFO: ------------------------------------------------------------------------</span><br><span class="line">17:08:22.663 INFO: EXECUTION FAILURE</span><br><span class="line">17:08:22.663 INFO: ------------------------------------------------------------------------</span><br><span class="line">17:08:22.663 INFO: Total time: 5:01.152s</span><br><span class="line">17:08:22.951 INFO: Final Memory: 47M&#x2F;1469M</span><br><span class="line">17:08:22.951 INFO: ------------------------------------------------------------------------</span><br><span class="line">17:08:22.951 ERROR: Error during SonarQube Scanner execution</span><br><span class="line">17:08:22.951 ERROR: Failed to upload report - An error has occurred. Please contact your administrator</span><br><span class="line">WARN: Unable to locate &#39;report-task.txt&#39; in the workspace. Did the SonarScanner succeeded?</span><br><span class="line">ERROR: SonarQube scanner exited with non-zero code: 1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;max_allowed_packet&#39;;</span><br><span class="line">修改&#x2F;etc&#x2F;my.cnf文件：</span><br><span class="line">max_allowed_packet &#x3D; 100M</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins安装部署</title>
    <url>/2019/10/22/Jenkins%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="Jenkins搭建指南-CentOS7"><a href="#Jenkins搭建指南-CentOS7" class="headerlink" title="Jenkins搭建指南(CentOS7)"></a>Jenkins搭建指南(CentOS7)</h1><blockquote>
<p><a href="https://pkg.jenkins.io/redhat-stable/" target="_blank" rel="noopener">下载链接</a></p>
<p><code>wget -i https://pkg.jenkins.io/redhat-stable/jenkins-2.164.3-1.1.noarch.rpm</code></p>
<p><a href="https://jenkins.io/doc/book/installing/" target="_blank" rel="noopener">安装手册</a></p>
</blockquote>
<h2 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h2><ul>
<li>Java</li>
<li>Maven<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装到 /opt/ 路径下</span></span><br><span class="line">tar xzvf apache-maven-3.6.1-bin.tar.gz -C /opt/</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改系统环境变量</span></span><br><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>
在最后一行添加下面的内容<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> customer settings</span></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_211-amd64</span><br><span class="line">export MVN_HOME=/opt/apache-maven-3.6.1</span><br><span class="line">export PATH=$JAVA_HOME/bin:$MVN_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li>
<li>Subversion<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install subversion</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">rpm -i jenkins-2.164.3-1.1.noarch.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">service jenkins start</span><br></pre></td></tr></table></figure>

<h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><p>系统管理 &gt; 插件管理 &gt; 可选插件<br>SonarQube Scanner<br>Maven Integration</p>
<h1 id="集成SonarQube"><a href="#集成SonarQube" class="headerlink" title="集成SonarQube"></a>集成SonarQube</h1><p>全局工具配置<br>JDK<br>SonarQube Scanner<br>Maven</p>
]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程池介绍</title>
    <url>/2020/04/13/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h1><h2 id="int-corePoolSize"><a href="#int-corePoolSize" class="headerlink" title="int corePoolSize"></a><code>int corePoolSize</code></h2><blockquote>
<p>该线程池中核心线程数最大值</p>
</blockquote>
<p>核心线程：线程池新建线程的时候，如果当前线程总数小于<code>corePoolSize</code>，则新建的是核心线程，如果超过<code>corePoolSize</code>，则新建的是非核心线程，核心线程默认情况下会一直存活在线程池中，即使这个核心线程啥也不干(闲置状态)。<br>如果指定<code>ThreadPoolExecutor</code>的<code>allowCoreThreadTimeOut</code>这个属性为<code>true</code>，那么核心线程如果不干活(闲置状态)的话，超过一定时间(时长下面参数决定)，就会被销毁掉。</p>
<h2 id="int-maximumPoolSize"><a href="#int-maximumPoolSize" class="headerlink" title="int maximumPoolSize"></a><code>int maximumPoolSize</code></h2><blockquote>
<p>该线程池中线程总数最大值</p>
</blockquote>
<p>线程总数 = 核心线程数 + 非核心线程数。</p>
<h2 id="long-keepAliveTime"><a href="#long-keepAliveTime" class="headerlink" title="long keepAliveTime"></a><code>long keepAliveTime</code></h2><blockquote>
<p>该线程池中非核心线程闲置超时时长</p>
</blockquote>
<p>一个非核心线程，如果不干活(闲置状态)的时长超过这个参数所设定的时长，就会被销毁掉，如果设置<code>allowCoreThreadTimeOut = true</code>，则会作用于核心线程。</p>
<h2 id="TimeUnit-unit"><a href="#TimeUnit-unit" class="headerlink" title="TimeUnit unit"></a><code>TimeUnit unit</code></h2><blockquote>
<p><code>keepAliveTime</code>的单位</p>
</blockquote>
<p><code>TimeUnit</code>是一个枚举类型，其包括：</p>
<ul>
<li><code>NANOSECONDS</code> : 1微毫秒 = 1微秒 / 1000</li>
<li><code>MICROSECONDS</code> : 1微秒 = 1毫秒 / 1000</li>
<li><code>MILLISECONDS</code> : 1毫秒 = 1秒 /1000</li>
<li><code>SECONDS</code> : 秒</li>
<li><code>MINUTES</code> : 分</li>
<li><code>HOURS</code> : 小时</li>
<li><code>DAYS</code> : 天</li>
</ul>
<h2 id="BlockingQueue-lt-Runnable-gt-workQueue"><a href="#BlockingQueue-lt-Runnable-gt-workQueue" class="headerlink" title="BlockingQueue&lt;Runnable&gt; workQueue"></a><code>BlockingQueue&lt;Runnable&gt; workQueue</code></h2><blockquote>
<p>该线程池中的任务队列：维护着等待执行的Runnable对象</p>
</blockquote>
<p>当所有的核心线程都在干活时，新添加的任务会被添加到这个队列中等待处理，如果队列满了，则新建非核心线程执行任务。</p>
<p>常用的<code>workQueue</code>类型：</p>
<ul>
<li><code>SynchronousQueue</code>：这个队列接收到任务的时候，会直接提交给线程处理，而不保留它，如果所有线程都在工作怎么办？那就新建一个线程来处理这个任务！所以为了保证不出现&lt;线程数达到了<code>maximumPoolSize</code>而不能新建线程&gt;的错误，使用这个类型队列的时候，<code>maximumPoolSize</code>一般指定成<code>Integer.MAX_VALUE</code>，即无限大</li>
<li><code>LinkedBlockingQueue</code>：这个队列接收到任务的时候，如果当前线程数小于核心线程数，则新建线程(核心线程)处理任务；如果当前线程数等于核心线程数，则进入队列等待。由于这个队列没有最大值限制，即所有超过核心线程数的任务都将被添加到队列中，这也就导致了<code>maximumPoolSize</code>的设定失效，因为总线程数永远不会超过<code>corePoolSize</code></li>
<li><code>ArrayBlockingQueue</code>：可以限定队列的长度，接收到任务的时候，如果没有达到<code>corePoolSize</code>的值，则新建线程(核心线程)执行任务，如果达到了，则入队等候，如果队列已满，则新建线程(非核心线程)执行任务，又如果总线程数到了<code>maximumPoolSize</code>，并且队列也满了，则发生错误</li>
<li><code>DelayQueue</code>：队列内元素必须实现Delayed接口，这就意味着你传进去的任务必须先实现Delayed接口。这个队列接收到任务时，首先先入队，只有达到了指定的延时时间，才会执行任务</li>
</ul>
<h2 id="ThreadFactory-threadFactory"><a href="#ThreadFactory-threadFactory" class="headerlink" title="ThreadFactory threadFactory"></a><code>ThreadFactory threadFactory</code></h2><blockquote>
<p>创建线程的工厂，这是一个接口，你new他的时候需要实现他的<code>Thread newThread(Runnable r)</code>方法，一般用不上。</p>
</blockquote>
<h2 id="RejectedExecutionHandler-handler"><a href="#RejectedExecutionHandler-handler" class="headerlink" title="RejectedExecutionHandler handler"></a><code>RejectedExecutionHandler handler</code></h2><blockquote>
<p>超出<code>maximumPoolSize</code>异常处理类，这玩意儿就是抛出异常专用的</p>
</blockquote>
<h1 id="线程池运行机制"><a href="#线程池运行机制" class="headerlink" title="线程池运行机制"></a>线程池运行机制</h1><ol>
<li>线程数量未达到corePoolSize，则新建一个线程(核心线程)执行任务</li>
<li>线程数量达到了corePools，则将任务移入队列等待</li>
<li>队列已满，新建线程(非核心线程)执行任务</li>
<li>队列已满，总线程数又达到了maximumPoolSize，就会由(RejectedExecutionHandler)抛出异常</li>
</ol>
<h1 id="Java通过Executors提供四种线程池"><a href="#Java通过Executors提供四种线程池" class="headerlink" title="Java通过Executors提供四种线程池"></a>Java通过Executors提供四种线程池</h1><p>分别为：</p>
<ul>
<li><p><code>newCachedThreadPool</code>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p>
</li>
<li><p><code>newFixedThreadPool</code> 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p>
</li>
<li><p><code>newScheduledThreadPool</code> 创建一个定长线程池，支持定时及周期性任务执行。</p>
</li>
<li><p><code>newSingleThreadExecutor</code> 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件句柄</title>
    <url>/2019/10/22/Linux%E6%96%87%E4%BB%B6%E5%8F%A5%E6%9F%84/</url>
    <content><![CDATA[<h1 id="Linux下查看及修改进程打开的文件句柄数量"><a href="#Linux下查看及修改进程打开的文件句柄数量" class="headerlink" title="Linux下查看及修改进程打开的文件句柄数量"></a>Linux下查看及修改进程打开的文件句柄数量</h1><p>查看Linux系统默认的最大文件句柄数，系统默认是1024</p>
<p>查看Linux系统某个进程打开的文件句柄数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -n | grep 5950 -c</span><br></pre></td></tr></table></figure>

<p>修改Linux系统的最大文件句柄数限制的方法：</p>
<ol>
<li><code>ulimit -n 65535</code></li>
</ol>
<p>针对当前session有效，用户退出或者系统重新后恢复默认值</p>
<ol start="2">
<li>修改profile文件：在profile文件中添加：<code>ulimit -n 65535</code></li>
</ol>
<p>只对单个用户有效</p>
<ol start="3">
<li><p>修改文件：<code>/etc/security/limits.conf</code>，在文件中添加：（立即生效-当前session中运行ulimit -a命令无法显示）</p>
</li>
<li><p><code>soft nofile 32768</code> #限制单个进程最大文件句柄数（到达此限制时系统报警）  </p>
</li>
<li><p><code>hard nofile 65536</code> #限制单个进程最大文件句柄数（到达此限制时系统报错）  </p>
</li>
<li><p>修改文件：<code>/etc/sysctl.conf</code>。在文件中添加：</p>
</li>
<li><p><code>fs.file-max=655350</code> #限制整个系统最大文件句柄数  </p>
</li>
</ol>
<p>运行命令：<code>/sbin/sysctl -p</code> 使配置生效</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven私服搭建</title>
    <url>/2020/03/10/Maven%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Nexus"><a href="#Nexus" class="headerlink" title="Nexus"></a>Nexus</h1><blockquote>
<p><a href="https://help.sonatype.com/repomanager3/installation" target="_blank" rel="noopener">https://help.sonatype.com/repomanager3/installation</a></p>
</blockquote>
]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MacBook实用技能</title>
    <url>/2019/12/24/MacBook%E5%AE%9E%E7%94%A8%E6%8A%80%E8%83%BD/</url>
    <content><![CDATA[<h1 id="系统快捷键"><a href="#系统快捷键" class="headerlink" title="系统快捷键"></a>系统快捷键</h1><table>
<thead>
<tr>
<th align="center">键</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">⌘⌥⎋</td>
<td align="center">强制退出</td>
</tr>
</tbody></table>
<h1 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h1><p><a href="https://support.apple.com/zh-cn/HT204904" target="_blank" rel="noopener">https://support.apple.com/zh-cn/HT204904</a></p>
<h1 id="关闭自动更新"><a href="#关闭自动更新" class="headerlink" title="关闭自动更新"></a>关闭自动更新</h1><p><code>AppStore</code> → <code>Preference</code> → <code>Automatically check for updates</code></p>
<h1 id="关于shell"><a href="#关于shell" class="headerlink" title="关于shell"></a>关于shell</h1><ul>
<li><p><a href="https://support.apple.com/zh-cn/HT208050" target="_blank" rel="noopener">在 Mac 上将 zsh 用作默认 Shell</a></p>
</li>
<li><p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 旧版本Mac系统的环境变量，加载顺序为：</span></span><br><span class="line">/etc/profile								</span><br><span class="line">/etc/paths </span><br><span class="line">~/.bash_profile </span><br><span class="line">~/.bash_login </span><br><span class="line">~/.profile </span><br><span class="line">~/.bashrc</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/zprofile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 中间用冒号隔开</span></span><br><span class="line">export PATH=$PATH:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> environment variable</span></span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home</span><br><span class="line">export MVN_HOME=/opt/apache-maven-3.6.2</span><br><span class="line">export PATH=$JAVA_HOME/bin:$MVN_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主机名称</p>
<blockquote>
<p>在某些情况下，主机名称会改变成bogon，用下面这个命令修改</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo scutil --set HostName XXXX</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl [options...] &lt;url&gt;</span><br><span class="line">-O, --remote-name   Write output to a file named as the remote file</span><br><span class="line">    --remote-name-all Use the remote file name for all URLs</span><br><span class="line">    </span><br><span class="line">curl -O &lt;URL&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>权限授予</p>
<blockquote>
<p>某些情况下，如果发现某些应用无法启动，可能是因为权限的问题</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前路径下文件的全部权限</span></span><br><span class="line">ls -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权</span></span><br><span class="line">chmod [ugoa...][[+-=][rwxX]...][,...]</span><br><span class="line">其中：</span><br><span class="line">u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</span><br><span class="line">+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</span><br><span class="line">r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</span><br><span class="line">r=4，w=2，x=1</span><br><span class="line">其他参数说明：</span><br><span class="line">-c : 若该文件权限确实已经更改，才显示其更改动作</span><br><span class="line">-f : 若该文件权限无法被更改也不要显示错误讯息</span><br><span class="line">-v : 显示权限变更的详细资料</span><br><span class="line">-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</span><br><span class="line">--help : 显示辅助说明</span><br><span class="line">--version : 显示版本</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h1><blockquote>
<p>一直没有遇到自己喜欢的图形化</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看文件跟踪状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把文件加入到跟踪索引</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除文件跟踪，并且保留文件</span></span><br><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure>



<h1 id="IDEA常用快捷键-macOS"><a href="#IDEA常用快捷键-macOS" class="headerlink" title="IDEA常用快捷键(macOS)"></a>IDEA常用快捷键(macOS)</h1><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="center">键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Implementation(s)</td>
<td align="center">⌥⌘B</td>
<td align="left">查看实现类</td>
</tr>
<tr>
<td align="left">Evaluate Expression…</td>
<td align="center">⌥F8</td>
<td align="left">DEBUG模式下调试参数</td>
</tr>
<tr>
<td align="left">Run to Cursor</td>
<td align="center">⌥F9</td>
<td align="left">运行到这一行</td>
</tr>
<tr>
<td align="left">Generate…</td>
<td align="center">⌘N</td>
<td align="left">代码生成</td>
</tr>
<tr>
<td align="left">File…</td>
<td align="center">⇧⌘O</td>
<td align="left">文件打开</td>
</tr>
<tr>
<td align="left">Find Usages</td>
<td align="center">⌥F7</td>
<td align="left">查找类的使用</td>
</tr>
<tr>
<td align="left">Show Context Actions</td>
<td align="center">⌥↩</td>
<td align="left">导入依赖</td>
</tr>
<tr>
<td align="left">Find in Path…</td>
<td align="center">⇧⌘F</td>
<td align="left">在路径中查询</td>
</tr>
<tr>
<td align="left">Reformat Code</td>
<td align="center">⌥⌘L</td>
<td align="left">格式化代码</td>
</tr>
<tr>
<td align="left">Delete Line</td>
<td align="center">⌘⌦</td>
<td align="left">删除一行</td>
</tr>
<tr>
<td align="left">Last Edit Location</td>
<td align="center">⇧⌘⌦</td>
<td align="left">退到上一次编辑的地方</td>
</tr>
</tbody></table>
<h1 id="按键符号"><a href="#按键符号" class="headerlink" title="按键符号"></a>按键符号</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">⌘ == Command</span><br><span class="line">⇧ == Shift</span><br><span class="line">⇪ == Caps Lock</span><br><span class="line">⌥ == Option</span><br><span class="line">⌃ == Control</span><br><span class="line">↩ == Return/Enter</span><br><span class="line">⌫ == Delete</span><br><span class="line">⌦ == 向前删除键（Fn+Delete）</span><br><span class="line">↑ == 上箭头</span><br><span class="line">↓ == 下箭头</span><br><span class="line">← == 左箭头</span><br><span class="line">→ == 右箭头</span><br><span class="line">⇞ == Page Up（Fn+↑）</span><br><span class="line">⇟ == Page Down（Fn+↓）</span><br><span class="line">Home == Fn + ←</span><br><span class="line">End == Fn + →</span><br><span class="line">⇥ == 右制表符（Tab键）</span><br><span class="line">⇤ == 左制表符（Shift+Tab）</span><br><span class="line">⎋ == Escape (Esc)</span><br><span class="line">⏏ == 电源开关键</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL复制-基于二进制日志文件</title>
    <url>/2020/04/17/MySQL-Replication-Binary/</url>
    <content><![CDATA[<blockquote>
<p> <a href="https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html" target="_blank" rel="noopener">参考文档</a></p>
</blockquote>
<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><blockquote>
<p> <a href="https://dev.mysql.com/doc/refman/5.7/en/replication-options.html" target="_blank" rel="noopener">配置介绍</a></p>
</blockquote>
<ul>
<li>Master数据库</li>
</ul>
<p>编辑配置文件<code>vim /etc/my.cnf</code>，文件内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 必须配置的服务id，一般配置主机的ip</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">168</span></span><br><span class="line"><span class="comment"># 必须配置，开启二进制</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面都是可选配置</span></span><br><span class="line"><span class="comment"># 要同步的数据库</span></span><br><span class="line"><span class="attr">binlog-do-db</span>=demo</span><br><span class="line"><span class="comment"># 同步表</span></span><br><span class="line"><span class="comment"># replicate-do-table=user</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Slave数据库</li>
</ul>
<p>修改配置文件如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 必须配置</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">169</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面都是可选配置</span></span><br><span class="line"><span class="attr">sync_binlog</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">slave-skip-errors</span>=all</span><br><span class="line"><span class="comment"># 配置忽略的数据库</span></span><br><span class="line"><span class="comment"># binlog-ignore-db=mysql</span></span><br><span class="line"><span class="comment"># 配置同步的数据库</span></span><br><span class="line"><span class="comment"># replicate-do-db=demo</span></span><br></pre></td></tr></table></figure>

<ul>
<li>重启修改配置后的数据库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<h1 id="在Master创建用户用于同步"><a href="#在Master创建用户用于同步" class="headerlink" title="在Master创建用户用于同步"></a>在Master创建用户用于同步</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &#39;slave&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO &#39;slave&#39;@&#39;%&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h1 id="查看Master二进制文件信息"><a href="#查看Master二进制文件信息" class="headerlink" title="查看Master二进制文件信息"></a>查看Master二进制文件信息</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 锁住全部表</span><br><span class="line">FLUSH TABLES WITH READ LOCK;</span><br><span class="line"># 同步完解锁</span><br><span class="line">unlock tables;</span><br><span class="line"># File和Position的参数是我们配置Slave的时候需要的</span><br><span class="line">SHOW MASTER STATUS;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |     1077 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure>

<h1 id="Slave配置连接"><a href="#Slave配置连接" class="headerlink" title="Slave配置连接"></a>Slave配置连接</h1><ul>
<li>在Slave配置连接Master信息 <a href="https://dev.mysql.com/doc/refman/5.7/en/change-master-to.html" target="_blank" rel="noopener">命令详解</a></li>
</ul>
<p>登录MySQL命令控制台</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># MASTER_HOST 主机地址</span><br><span class="line"># MASTER_USER Master创建好的用户</span><br><span class="line"># MASTER_PASSWORD 密码</span><br><span class="line"># MASTER_PORT 端口，可选</span><br><span class="line"># MASTER_LOG_FILE 二进制文件名</span><br><span class="line"># MASTER_LOG_POS 开始同步位置</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO </span><br><span class="line">    MASTER_HOST&#x3D;&#39;192.168.99.168&#39;,</span><br><span class="line">    MASTER_USER&#x3D;&#39;slave&#39;,</span><br><span class="line">    MASTER_PASSWORD&#x3D;&#39;123456&#39;,</span><br><span class="line">    MASTER_PORT&#x3D;&#39;3306&#39;,</span><br><span class="line">    MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000002&#39;,</span><br><span class="line">    MASTER_LOG_POS&#x3D;2216;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看Slave</li>
</ul>
<p>输入<code>show slave status\G</code>，会显示类似如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.99.168</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 700</span><br><span class="line">               Relay_Log_File: LENOVO-PC-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 867</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: demo</span><br><span class="line">          Replicate_Ignore_DB: mysql</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 700</span><br><span class="line">              Relay_Log_Space: 1079</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 168</span><br><span class="line">                  Master_UUID: bd1531fb-f568-11e9-bc4b-46afd4d32e02</span><br><span class="line">             Master_Info_File: mysql.slave_master_info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more up</span><br><span class="line">dates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">       Master_public_key_path:</span><br><span class="line">        Get_master_public_key: 0</span><br><span class="line">            Network_Namespace:</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<p>注意显示状态是这样表示成功连到Master：</p>
<p><code>Slave_IO_Running: Yes</code><br><code>Slave_SQL_Running: Yes</code></p>
<p>不是这个状态会有错误显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 每次重新配置Slave需要停止</span><br><span class="line">stop slave</span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>配置前务必将两个数据库手工同步</li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-安装部署</title>
    <url>/2019/11/12/Nginx%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote>
<p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">官方下载</a></p>
<p><a href="https://www.nginx.com/resources/wiki/start/topics/examples/full/" target="_blank" rel="noopener">文档</a></p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>解压到安装路径即可</p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s [ stop | quit | reopen | reload ]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven打包介绍</title>
    <url>/2019/10/22/Maven%E6%89%93%E5%8C%85%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="依赖JAR"><a href="#依赖JAR" class="headerlink" title="依赖JAR"></a>依赖JAR</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--maven-assembly-plugin打包方式运行assembly:single--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.yss.jdbc.util.Sample<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  <span class="comment">&lt;!--继承合并--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  <span class="comment">&lt;!--绑定到打包阶段--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span><span class="comment">&lt;!--MANIFEST.MF文件设置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.XX.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/deploy/svntool<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/deploy/svntool/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="可执行JAR"><a href="#可执行JAR" class="headerlink" title="可执行JAR"></a>可执行JAR</h1><h2 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--maven-assembly-plugin打包方式运行assembly:single--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.yss.jdbc.util.Sample<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  <span class="comment">&lt;!--继承合并--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  <span class="comment">&lt;!--绑定到打包阶段--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span><span class="comment">&lt;!--MANIFEST.MF文件设置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.XX.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/deploy/svntool<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/deploy/svntool/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="生成JAR文件后增加时间戳"><a href="#生成JAR文件后增加时间戳" class="headerlink" title="生成JAR文件后增加时间戳"></a>生成JAR文件后增加时间戳</h1><h2 id="自带属性实现"><a href="#自带属性实现" class="headerlink" title="自带属性实现"></a>自带属性实现</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.build.timestamp.format</span>&gt;</span>yyyyMMddHHmmss<span class="tag">&lt;/<span class="name">maven.build.timestamp.format</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span></span><br><span class="line">        $&#123;project.artifactId&#125;-$&#123;project.version&#125;.$&#123;maven.build.timestamp&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Maven自带时间戳使用${maven.build.timestamp}，但是时区是UTC。</strong></p>
<p>如果要使用GMT+8，就需要插件提供支持，以下两个插件可以实现。</p>
<h2 id="buildnubmer-maven-plugin"><a href="#buildnubmer-maven-plugin" class="headerlink" title="buildnubmer-maven-plugin"></a>buildnubmer-maven-plugin</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span></span><br><span class="line">        $&#123;project.artifactId&#125;-$&#123;project.version&#125;_$&#123;timestamp&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>buildnumber-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timestampFormat</span>&gt;</span>yyyyMMdd<span class="tag">&lt;/<span class="name">timestampFormat</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>create-timestamp<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="build-helper-maven-plugin"><a href="#build-helper-maven-plugin" class="headerlink" title="build-helper-maven-plugin"></a>build-helper-maven-plugin</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ProjectName-$&#123;current.time&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>build-helper-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>timestamp-property<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>timestamp-property<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>current.time<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>yyyyMMdd-HHmmss<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">timeZone</span>&gt;</span>GMT+8<span class="tag">&lt;/<span class="name">timeZone</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL性能优化</title>
    <url>/2019/11/12/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="慢查询配置"><a href="#慢查询配置" class="headerlink" title="慢查询配置"></a>慢查询配置</h1><blockquote>
<p>MySQL 的慢查询日志是MySQL提供的一种日志记录，它是用来记录在MySQL中响应时间超过阀值的语句。系统默认情况下，MySQL 并不启动慢查询日志，需要我们手动来设置这个参数，当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。</p>
</blockquote>
<p>默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的，可以通过设置slow_query_log的值来开启，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%slow_query_log%&#39;</span><br><span class="line">+---------------------+-------------------------------+</span><br><span class="line">| Variable_name       | Value                         |</span><br><span class="line">+---------------------+-------------------------------+</span><br><span class="line">| slow_query_log      | OFF                           |</span><br><span class="line">| slow_query_log_file | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-slow.log |</span><br><span class="line">+---------------------+-------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>开启慢查询日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global slow_query_log&#x3D;1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>然后看状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%slow_query_log%&#39;;</span><br><span class="line">+---------------------+-------------------------------+</span><br><span class="line">| Variable_name       | Value                         |</span><br><span class="line">+---------------------+-------------------------------+</span><br><span class="line">| slow_query_log      | ON                            |</span><br><span class="line">| slow_query_log_file | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-slow.log |</span><br><span class="line">+---------------------+-------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>使用<code>set global slow_query_log=1</code>开启了慢查询日志只对当前数据库生效，如果MySQL重启后则会失效。如果要永久生效，就必须修改配置文件<code>my.cnf</code>（其它系统变量也是如此）。</p>
<p>例如如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">slow_query_log&#x3D;1</span><br><span class="line">slow_query_log_file&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-slow.log</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>slow_query_log 慢查询开启状态；</li>
<li>slow_query_log_file 慢查询日志存放的位置；</li>
<li>long_query_time查询超过多少秒才记录。</li>
</ul>
<h1 id="日志分析工具"><a href="#日志分析工具" class="headerlink" title="日志分析工具"></a>日志分析工具</h1><blockquote>
<p> MySQL 自带了一个查看慢日志的工具 mysqldumpslow，执行mysqldumpslow –help 可以查看其相关参数和说明：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysqldumpslow --help</span><br><span class="line">Usage: mysqldumpslow [ OPTS... ] [ LOGS... ]</span><br><span class="line"></span><br><span class="line">Parse and summarize the MySQL slow query log. Options are</span><br><span class="line"></span><br><span class="line">  --verbose    verbose</span><br><span class="line">  --debug      debug</span><br><span class="line">  --help       write this text to standard output</span><br><span class="line"></span><br><span class="line">  -v           verbose</span><br><span class="line">  -d           debug</span><br><span class="line">  -s ORDER     what to sort by (al, at, ar, c, l, r, t), &#39;at&#39; is default</span><br><span class="line">                al: average lock time</span><br><span class="line">                ar: average rows sent</span><br><span class="line">                at: average query time</span><br><span class="line">                 c: count</span><br><span class="line">                 l: lock time</span><br><span class="line">                 r: rows sent</span><br><span class="line">                 t: query time</span><br><span class="line">  -r           reverse the sort order (largest last instead of first)</span><br><span class="line">  -t NUM       just show the top n queries</span><br><span class="line">  -a           don&#39;t abstract all numbers to N and strings to &#39;S&#39;</span><br><span class="line">  -n NUM       abstract numbers with at least n digits within names</span><br><span class="line">  -g PATTERN   grep: only consider stmts that include this string</span><br><span class="line">  -h HOSTNAME  hostname of db server for *-slow.log filename (can be wildcard),</span><br><span class="line">               default is &#39;*&#39;, i.e. match all</span><br><span class="line">  -i NAME      name of server instance (if using mysql.server startup script)</span><br><span class="line">  -l           don&#39;t subtract lock time from total time</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li>-s:是表示按照何种方式排序；</li>
<li>c: 访问计数；</li>
<li>l: 锁定时间；</li>
<li>r: 返回记录；</li>
<li>t: 查询时间；</li>
<li>al:平均锁定时间；</li>
<li>ar:平均返回记录数；</li>
<li>at:平均查询时间；</li>
<li>-t:是top n的意思，即为返回前面多少条的数据；</li>
<li>-g:后边可以写一个正则匹配模式，大小写不敏感的。</li>
</ul>
<p>例如，得到返回记录集最多的10个SQL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s r -t 10 /mysql/mysql_slow.log</span><br></pre></td></tr></table></figure>

<p>得到访问次数最多的10个SQL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s c -t 10 /mysql/mysql_slow.log</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>R语言开发环境部署</title>
    <url>/2019/10/23/R%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="R语言"><a href="#R语言" class="headerlink" title="R语言"></a>R语言</h1><p>介绍：<em>R</em>是用于统计分析、绘图的语言和操作环境。<em>R</em>是属于GNU系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。</p>
<h2 id="R语言开发环境"><a href="#R语言开发环境" class="headerlink" title="R语言开发环境"></a>R语言开发环境</h2><blockquote>
<p><a href="[https://www.r-project.org](https://www.r-project.org/)">官方网站</a></p>
<p><a href="https://cran.r-project.org/mirrors.html" target="_blank" rel="noopener">下载地址</a></p>
</blockquote>
<h2 id="R语言开发工具-RStudio"><a href="#R语言开发工具-RStudio" class="headerlink" title="R语言开发工具 RStudio"></a>R语言开发工具 RStudio</h2><blockquote>
<p><a href="https://rstudio.com/products/rstudio/download/" target="_blank" rel="noopener">官方网站</a></p>
<p><a href="https://rstudio.com/products/rstudio/download/" target="_blank" rel="noopener">下载地址</a></p>
</blockquote>
<p>相关学习网站：<a href="https://www.w3cschool.cn/r/r_environment_setup.html" target="_blank" rel="noopener">https://www.w3cschool.cn/r/r_environment_setup.html</a></p>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC框架介绍</title>
    <url>/2020/02/28/RPC%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h1><p><code>C:\Program Files\Java\jdk1.8.0_211\jre\lib\rt.jar!\java\rmi</code></p>
<h1 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h1>]]></content>
      <tags>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL历史记录</title>
    <url>/2019/10/22/SQL%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="SQL历史记录"><a href="#SQL历史记录" class="headerlink" title="SQL历史记录"></a>SQL历史记录</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> logon_time,</span><br><span class="line">       last_call_et <span class="string">"time inactive"</span>,</span><br><span class="line">       nvl(s.username, <span class="string">'ORACLE PROCESS'</span>) username,</span><br><span class="line">       s.machine,</span><br><span class="line">       s.program,</span><br><span class="line">       s.sid session_id,</span><br><span class="line">       s.status,</span><br><span class="line">       sql_text,</span><br><span class="line">       ss.value <span class="string">"CPU used"</span>,</span><br><span class="line">       trunc(buffer_gets / (executions + <span class="number">1</span>)) <span class="string">"BUFF-EXEC"</span>,</span><br><span class="line">       trunc(buffer_gets / (rows_processed + <span class="number">1</span>)) <span class="string">"BUFF-ROWS"</span>,</span><br><span class="line">       first_load_time,</span><br><span class="line">       executions,</span><br><span class="line">       parse_calls,</span><br><span class="line">       disk_reads,</span><br><span class="line">       buffer_gets,</span><br><span class="line">       rows_processed</span><br><span class="line">  <span class="keyword">from</span> v$<span class="keyword">session</span> s, v$sesstat ss, v$statname sn, v$sqlarea sa</span><br><span class="line"><span class="keyword">where</span> s.sid = ss.sid</span><br><span class="line">   <span class="keyword">and</span> ss.statistic<span class="comment"># = sn.statistic#</span></span><br><span class="line">   <span class="keyword">and</span> sn.name = <span class="string">'CPU used by this session'</span></span><br><span class="line">   <span class="keyword">and</span> s.sql_address = sa.address</span><br><span class="line">   <span class="keyword">and</span> s.sql_hash_value = sa.hash_value</span><br><span class="line">   <span class="keyword">and</span> last_call_et &gt; <span class="number">5000</span>  <span class="comment">--超过5秒不释放的sql</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> machine, <span class="keyword">status</span>, program, last_call_et <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ss.value <span class="string">"CPU used"</span>,</span><br><span class="line">       sa.SQL_FULLTEXT,</span><br><span class="line">       sql_text,</span><br><span class="line">       s.status,</span><br><span class="line">       last_call_et <span class="string">"time inactive"</span>,</span><br><span class="line">       nvl(s.username, <span class="string">'ORACLE PROCESS'</span>) username,</span><br><span class="line">       s.sid,</span><br><span class="line">     s.serial<span class="comment">#,</span></span><br><span class="line">       logon_time,</span><br><span class="line">       s.machine,</span><br><span class="line">       s.program,</span><br><span class="line">       s.sid session_id,</span><br><span class="line">       trunc(buffer_gets / (executions + <span class="number">1</span>)) <span class="string">"BUFF-EXEC"</span>,</span><br><span class="line">       trunc(buffer_gets / (rows_processed + <span class="number">1</span>)) <span class="string">"BUFF-ROWS"</span>,</span><br><span class="line">       first_load_time,</span><br><span class="line">       executions,</span><br><span class="line">       parse_calls,</span><br><span class="line">       disk_reads,</span><br><span class="line">       buffer_gets,</span><br><span class="line">       rows_processed</span><br><span class="line">  <span class="keyword">from</span> v$<span class="keyword">session</span> s, v$sesstat ss, v$statname sn, v$sqlarea sa</span><br><span class="line"> <span class="keyword">where</span> s.sid = ss.sid</span><br><span class="line">   <span class="keyword">and</span> ss.statistic<span class="comment"># = sn.statistic#</span></span><br><span class="line">   <span class="keyword">and</span> sn.name = <span class="string">'CPU used by this session'</span></span><br><span class="line">   <span class="keyword">and</span> s.sql_address = sa.address</span><br><span class="line">   <span class="keyword">and</span> s.sql_hash_value = sa.hash_value</span><br><span class="line"><span class="comment">--   and status='ACTIVE'</span></span><br><span class="line"><span class="comment">--   and username=''</span></span><br><span class="line"><span class="comment">--   and last_call_et &gt; 1000</span></span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> ss.value <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>
<h1 id="bigint类型转换为datetime类型"><a href="#bigint类型转换为datetime类型" class="headerlink" title="bigint类型转换为datetime类型"></a>bigint类型转换为datetime类型</h1><p>假设 1164691264437 是 Java 里的“日期时间”：即：自1970-01-01 00:00:00以来的毫秒数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select from_unixtime(1164691264437&#x2F;1000);</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| from_unixtime(1164691264437&#x2F;1000) |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| 2006-11-28 13:21:04               |</span><br><span class="line">+-----------------------------------+</span><br></pre></td></tr></table></figure>
<h1 id="datetime类型转换为bigint类型"><a href="#datetime类型转换为bigint类型" class="headerlink" title="datetime类型转换为bigint类型"></a>datetime类型转换为bigint类型</h1><p>假设 “2011-05-31 23:59:59” 是 Java 里的“日期时间”：即：自1970-01-01 00:00:00以来的毫秒数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select UNIX_TIMESTAMP(&#39;2011-05-31 23:59:59&#39;);</span><br><span class="line">+-----------------------------------+</span><br><span class="line">| from_unixtime(1306857599&#x2F;1000) |</span><br><span class="line">+-----------------------------------+</span><br></pre></td></tr></table></figure>

<h1 id="MYSQL查询锁"><a href="#MYSQL查询锁" class="headerlink" title="MYSQL查询锁"></a>MYSQL查询锁</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询是否锁表</span><br><span class="line">show OPEN TABLES where In_use &gt; 0;</span><br><span class="line"># 查看所有进程</span><br><span class="line"># MySQL:</span><br><span class="line">show processlist;</span><br><span class="line"># mariabd:</span><br><span class="line">show full processlist;</span><br><span class="line"># 杀掉指定mysql连接的进程号</span><br><span class="line">kill $pid</span><br><span class="line"># 查看正在锁的事务</span><br><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; </span><br><span class="line"># 查看等待锁的事务</span><br><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS; </span><br><span class="line"># 查看innodb引擎的运行时信息</span><br><span class="line">show engine innodb status\G;</span><br><span class="line"># 查看造成死锁的sql语句，分析索引情况，然后优化sql语句； </span><br><span class="line"># 查看服务器状态</span><br><span class="line">show status like &#39;%lock%&#39;;</span><br><span class="line"># 查看超时时间：</span><br><span class="line">show variables like &#39;%timeout%&#39;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SonarQube安装部署</title>
    <url>/2019/10/23/SonarQube%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<blockquote>
<p>详细查看<a href="https://docs.sonarqube.org/latest/setup/overview/" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
<h1 id="安装前准备环境"><a href="#安装前准备环境" class="headerlink" title="安装前准备环境"></a>安装前准备环境</h1><h2 id="Centos7-Linux-version-3-10-0-957-el7-x86-64"><a href="#Centos7-Linux-version-3-10-0-957-el7-x86-64" class="headerlink" title="Centos7(Linux version 3.10.0-957.el7.x86_64):"></a>Centos7(Linux version 3.10.0-957.el7.x86_64):</h2><p>vm.max_map_count 大于或等于262144<br>fs.file-max 大于或等于65536<br>运行SonarQube的用户可以打开至少65536个文件描述符<br>运行SonarQube的用户可以打开至少2048个线程</p>
<h2 id="Oracle-JRE-8"><a href="#Oracle-JRE-8" class="headerlink" title="Oracle JRE 8"></a>Oracle JRE 8</h2><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载链接</a><br>    - 选择jdk-8u211-linux-x64.rpm下载   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看安装的路径</span></span><br><span class="line">rpm -qpl jdk-8u211-linux-x64.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装</span></span></span><br><span class="line">rpm -i jdk-8u211-linux-x64.rpm</span><br></pre></td></tr></table></figure>
<h2 id="MySQL-5-7"><a href="#MySQL-5-7" class="headerlink" title="MySQL 5.7"></a>MySQL 5.7</h2><p><a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">下载链接</a> <a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html" target="_blank" rel="noopener">参考文档</a> </p>
<p>下载mysql80-community-release-el7-3.noarch.rpm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装rpm源</span></span><br><span class="line">sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑，找到Enable to use MySQL 5.7，改为enabled=1，其他版本设置成enabled=0</span></span><br><span class="line">vim /etc/yum.repos.d/mysql-community.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查只有MySQL 5.7启动</span></span><br><span class="line">yum repolist enabled | grep mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装MySQL</span></span><br><span class="line">sudo yum install mysql-community-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动MySQL服务器</span></span><br><span class="line">sudo service mysqld start</span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL服务器的状态</span></span><br><span class="line">sudo service mysqld status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看超级用户的密码</span></span><br><span class="line">sudo grep 'temporary password' /var/log/mysqld.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码校验</span></span><br><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_length=1;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认mysql的root用户不支持远程访问，开启访问权限</span></span><br><span class="line">GRANT ALL ON *.* TO root@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;</span><br><span class="line">update user set host='%' where user='root';</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建数据库sonarqube</span></span><br><span class="line">CREATE DATABASE `sonarqube` CHARACTER SET 'utf8';</span><br><span class="line">新增用户sonarqube并授予sonarqube数据库全部权限</span><br><span class="line">rant all privileges on sonarqube.* to sonarqube@'%' identified by "password";</span><br><span class="line">开启3306端口</span><br><span class="line">irewall-cmd --add-port=3306/tcp</span><br><span class="line"></span><br><span class="line">(a)数据库目录</span><br><span class="line">var/lib/mysql/</span><br><span class="line">(b)配置文件</span><br><span class="line">usr/share /mysql（mysql.server命令及配置文件） </span><br><span class="line">etc/my.cnf</span><br><span class="line">(c)相关命令</span><br><span class="line">/usr/bin（mysqladmin mysqldump等命令）</span><br><span class="line"><span class="meta">#</span><span class="bash"> (d)启动脚本</span></span><br><span class="line">/etc/rc.d/init.d/（启动脚本文件mysql的目录）</span><br></pre></td></tr></table></figure>
<h1 id="安装SonarQube"><a href="#安装SonarQube" class="headerlink" title="安装SonarQube"></a>安装SonarQube</h1><h2 id="1-下载-SonarQube"><a href="#1-下载-SonarQube" class="headerlink" title="1. 下载 SonarQube"></a>1. 下载 SonarQube</h2><p>当前版本： 7.7 <a href="https://www.sonarqube.org/downloads/" target="_blank" rel="noopener">下载链接</a></p>
<h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h2><p>得到当前路径: <code>/opt/sonarqube-7.7</code> </p>
<h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h2><p><code>vim /opt/sonarqube-7.7/conf/sonar.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对应的数据库信息</span></span><br><span class="line"><span class="meta">sonar.jdbc.username</span>=<span class="string"></span></span><br><span class="line"><span class="meta">sonar.jdbc.password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">sonar.jdbc.url</span>=<span class="string"></span></span><br></pre></td></tr></table></figure>
<h2 id="4-新增用户"><a href="#4-新增用户" class="headerlink" title="4. 新增用户"></a>4. 新增用户</h2><p><strong>SonarQube不能以root启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">adduser sonarqube</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置密码</span></span><br><span class="line">passwd sonarqube</span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权</span></span><br><span class="line">chown -R sonarqube:sonarqube /opt/sonarqube-7.7</span><br></pre></td></tr></table></figure>
<h2 id="5-默认SonarQube启动在9000端口"><a href="#5-默认SonarQube启动在9000端口" class="headerlink" title="5.默认SonarQube启动在9000端口"></a>5.默认SonarQube启动在9000端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=9000/tcp</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>
<h2 id="6-以服务启动SonarQube"><a href="#6-以服务启动SonarQube" class="headerlink" title="6.以服务启动SonarQube"></a>6.以服务启动SonarQube</h2><ul>
<li>创建文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/sonarqube.service</span><br></pre></td></tr></table></figure>

<ul>
<li>添加下面内容：</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=SonarQube service</span><br><span class="line"><span class="attr">After</span>=syslog.target network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=sonarqube</span><br><span class="line"><span class="attr">Group</span>=sonarqube</span><br><span class="line"><span class="attr">PermissionsStartOnly</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ExecStart</span>=/bin/nohup /bin/java -Xms32m -Xmx32m -Djava.net.preferIPv4Stack=<span class="literal">true</span> -jar /opt/sonarqube-<span class="number">7.7</span>/lib/sonar-application-<span class="number">7.7</span>.jar</span><br><span class="line"><span class="attr">StandardOutput</span>=syslog</span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65536</span></span><br><span class="line"><span class="attr">LimitNPROC</span>=<span class="number">8192</span></span><br><span class="line"><span class="attr">TimeoutStartSec</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<ul>
<li>安装启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su sonarqube</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注册服务</span></span><br><span class="line">sudo systemctl enable sonarqube.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">sudo systemctl start sonarqube.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">sudo systemctl restart sonarqube.service</span><br></pre></td></tr></table></figure>
<ul>
<li>查看日志</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/sonarqube-7.7/logs/web.log</span><br></pre></td></tr></table></figure>

<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul>
<li>使用sudo命令时，出现问题：</li>
</ul>
<p><img src="/images/20200306_1.png" alt=""></p>
<p>​         编辑<code>vim /etc/sudoers</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root    ALL=(ALL:ALL) ALL</span><br><span class="line">sonarqube    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>

<ul>
<li>扫描成功但是上传失败</li>
</ul>
<p>可能是因为mysql数据库上传数据限制了包的大小，查看web.log日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: com.mysql.jdbc.PacketTooBigException: Packet for query is too large (6980220 &gt; 4194304). You can change this value on the server by setting the max_allowed_packet&#39; variable.</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For advice on how to change settings please see</span></span><br><span class="line"><span class="comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">max_allowed_packet</span>=<span class="number">100</span>M</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title>javaagent开发指南</title>
    <url>/2020/04/15/javaagent%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>场景：你需要在Java进程中获取所有已知加载类的字节码。或者你想要调试运行时发生的某种类型的instrumentation。</p>
<p>看这篇文章前你需要了解：<strong>Java字节码</strong>。</p>
<p>下面介绍如何获取加载到JVM中的所有类的字节码。</p>
<h1 id="javaagent"><a href="#javaagent" class="headerlink" title="javaagent"></a>javaagent</h1><blockquote>
<p>通常，我们可以把javaagent当成一个JVM插件。一种专门的jar文件，它可以利用JVM提供的InstrumentationAPI。Java1.5提供了InstrumentationAPI。</p>
</blockquote>
<p><img src="/images/javaagent%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/java_agent_overview_min.png" alt="OverviewofJavaagents"></p>
<p>成功创建一个javaagent需要三个环节：</p>
<h2 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h2><p>代理类必须有<code>premain</code>方法，当Java虚拟机启动时，在执行main函数之前，JVM会先运行<code>-javaagent</code>所指定jar包内<code>Premain-Class</code>这个类的<code>premain</code>方法，其中，该方法可以签名如下：</p>
<ol>
<li><code>publicstaticvoidpremain(StringagentArgs,Instrumentationinst)</code></li>
<li><code>publicstaticvoidpremain(StringagentArgs)</code></li>
</ol>
<p>JVM会优先加载1签名的方法，加载成功忽略2，如果1没有，加载2方法。这个逻辑在<code>sun.instrument.InstrumentationImpl</code>类中。</p>
<h2 id="一些元信息（告诉JVM为我们的代理类提供哪些功能）"><a href="#一些元信息（告诉JVM为我们的代理类提供哪些功能）" class="headerlink" title="一些元信息（告诉JVM为我们的代理类提供哪些功能）"></a>一些元信息（告诉JVM为我们的代理类提供哪些功能）</h2><p>定义一个<code>MANIFEST.MF</code>文件，必须包含<code>Premain-Class</code>选项，且指定我们的代理类，通常也会加入<code>Can-Redefine-Classes</code>和<code>Can-Retransform-Classes</code>选项。</p>
<p>将代理类和<code>MANIFEST.MF</code>文件打成jar包。</p>
<h2 id="一种使JVM加载jar文件和代理的方式"><a href="#一种使JVM加载jar文件和代理的方式" class="headerlink" title="一种使JVM加载jar文件和代理的方式"></a>一种使JVM加载jar文件和代理的方式</h2><p>使用参数<code>-javaagent:agent.jar=[agentArgs]</code>启动要代理类中的<code>premain</code>方法。<br>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java-javaagent:sample-agent.jar=hello-jarsample-release.jar</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="agentmain"><a href="#agentmain" class="headerlink" title="agentmain"></a>agentmain</h1><ol>
<li>定义一个MANIFEST.MF文件，文件中必须包含Agent-Class</li>
<li>创建一个Agent-Class指定的类，该类必须包含agentmain方法（参数和premian相同）</li>
<li>将MANIFEST.MF和Agent类打成jar包</li>
<li>将jar包载入目标虚拟机。目标虚拟机将会自动执行agentmain方法执行方法逻辑，同时，ClassFileTransformer也会长期有效，在每一个类加载器加载Class的时候都会拦截</li>
</ol>
<hr>
<p>相关文章：<br><a href="https://www.cnblogs.com/stateis0/p/9062199.html" target="_blank" rel="noopener">https://www.cnblogs.com/stateis0/p/9062199.html</a><br><a href="https://www.cnblogs.com/stateis0/p/9062201.html" target="_blank" rel="noopener">https://www.cnblogs.com/stateis0/p/9062201.html</a><br><a href="https://www.jrebel.com/blog/java-bytecode-tutorial" target="_blank" rel="noopener">https://www.jrebel.com/blog/java-bytecode-tutorial</a><br><a href="https://blogs.oracle.com/ouchina/javaagent" target="_blank" rel="noopener">https://blogs.oracle.com/ouchina/javaagent</a></p>
]]></content>
  </entry>
  <entry>
    <title>SonarQube插件开发</title>
    <url>/2020/05/11/SonarQube%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://docs.sonarqube.org/latest/extend/developing-plugin/" target="_blank" rel="noopener">官方文档</a></p>
<p>最近涉及到开发sonarqube的一些插件工作，记录一下工作需要的内容。</p>
</blockquote>
<p>SonarQube开发分为三部分：web服务开发、计算引擎开发、扫描开发。针对这三种开发方式，其官方为我们提供了三种远程调试方式。</p>
<p><strong>Debugging web server extensions</strong></p>
<p>修改配置文件：conf/sonar.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">sonar.web.javaAdditionalOpts</span>=<span class="string">-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000</span></span><br></pre></td></tr></table></figure>

<p><strong>Debugging compute engine extensions</strong></p>
<p>修改配置文件：conf/sonar.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">sonar.ce.javaAdditionalOpts</span>=<span class="string">-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000</span></span><br></pre></td></tr></table></figure>

<p><strong>Debugging scanner extensions</strong></p>
<p>控制台命令窗口设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SONAR_SCANNER_OPTS=<span class="string">"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> SONAR_SCANNER_OPTS=<span class="string">"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000"</span></span><br></pre></td></tr></table></figure>
<p>然后在需要检查的代码根路径执行扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvnDebug sonar:sonar</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sonar-scanner</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title>char、varchar、varchar2的区别</title>
    <url>/2020/04/08/char%E3%80%81varchar%E3%80%81varchar2%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>1、长度上的区别</p>
<p>CHAR的长度是固定的，VARCHAR2的长度是可以变化的。</p>
<p>例如，存储字符zhidao串“abc”，对于CHAR (20)，表示存储的字符占20个字节，而同样的VARCHAR2 (20)就只占3个字节的长度，20只是最大值，而且当存储的字符小于20时，按实际的长度来存储。 </p>
<p>2、意义上的区别</p>
<p>VARCHAR是VARCHAR2的同义词，工业标准的VARCHAR类型可以用来存储<a href="https://www.baidu.com/s?wd=空字符串&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">空字符串</a>，但是Oracle自己开发了一个数据类型VARCHAR2，这个类型不是一个标准的VARCHAR，它在数据库中varchar列可以存储<a href="https://www.baidu.com/s?wd=空字符串&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">空字符串</a>的特性改为存储NULL值。</p>
<p><img src="/images/char%E3%80%81varchar%E3%80%81varchar2%E7%9A%84%E5%8C%BA%E5%88%AB/1.png" alt="img"></p>
<p>3、空间大小上的区别</p>
<p>VARCHAR2比CHAR要节省空间，VARCHAR2在效率上也比CHAR差一些，所以如果想获得效率，就必须牺牲一定的空间，这就是在<a href="https://www.baidu.com/s?wd=数据库设计&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">数据库设计</a>上常说的‘以空间换效率’。 </p>
<p>VARCHAR2虽然比CHAR节省空间，但如果一个VARCHAR2列经常被修改，且每次被修改数据的长度不同会引起‘行迁移’现象。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>PING命令使用</title>
    <url>/2019/11/04/PING%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="一、ping基本使用详解"><a href="#一、ping基本使用详解" class="headerlink" title="一、ping基本使用详解"></a>一、ping基本使用详解</h1><p>在网络中ping是一个十分强大的TCP/IP工具。它的作用主要为：</p>
<ol>
<li><p>用来检测网络的连通情况和分析网络速度</p>
</li>
<li><p>根据域名得到服务器IP</p>
</li>
<li><p>根据ping返回的TTL值来判断对方所使用的操作系统及数据包经过路由器数量。</p>
</li>
</ol>
<p>我们通常会用它来直接ping ip地址，来测试网络的连通情况。</p>
<p><img src="/images/ping/ping0.webp" alt="img"></p>
<p>类如这种，直接ping ip地址或网关，ping通会显示出以上数据，有朋友可能会问，bytes=32；time&lt;1ms；TTL=128 这些是什么意思。</p>
<p><strong>bytes值：</strong>数据包大小，也就是字节。</p>
<p><strong>time值：</strong>响应时间，这个时间越小，说明你连接这个地址速度越快。</p>
<p><strong>TTL值：</strong>Time To Live,表示DNS记录在DNS服务器上存在的时间，它是IP协议包的一个值，告诉路由器该数据包何时需要被丢弃。可以通过Ping返回的TTL值大小，粗略地判断目标系统类型是Windows系列还是UNIX/Linux系列。</p>
<p>默认情况下，Linux系统的TTL值为64或255，WindowsNT/2000/XP系统的TTL值为128，Windows98系统的TTL值为32，UNIX主机的TTL值为255。</p>
<p>因此一般TTL值：</p>
<p>100~130ms之间，Windows系统 ；</p>
<p>240~255ms之间，UNIX/Linux系统。</p>
<p>当然，我们今天主要了解并不是这些，而是ping的其它参考。</p>
<p>ping命令除了直接ping网络的ip地址，验证网络畅通和速度之外，它还有这些用法。</p>
<p><img src="/images/ping/ping1.webp" alt="img"></p>
<h1 id="二、ping-t的使用"><a href="#二、ping-t的使用" class="headerlink" title="二、ping -t的使用"></a>二、ping -t的使用</h1><p>不间断地Ping指定计算机，直到管理员中断。</p>
<p><img src="/images/ping/ping2.webp" alt="img"></p>
<p>这就说明电脑连接路由器是通的，网络效果很好。下面按按住键盘的Ctrl+c终止它继续ping下去，就会停止了，会总结出运行的数据包有多少，通断的有多少了。</p>
<h1 id="三、ping-a的使用"><a href="#三、ping-a的使用" class="headerlink" title="三、ping -a的使用"></a>三、ping -a的使用</h1><p>ping-a解析计算机名与NetBios名。就是可以通过ping它的ip地址，可以解析出主机名。</p>
<p><img src="/images/ping/ping3.webp" alt="img"></p>
<h1 id="四、ping-n的使用"><a href="#四、ping-n的使用" class="headerlink" title="四、ping -n的使用"></a>四、ping -n的使用</h1><p>在默认情况下，一般都只发送四个数据包，通过这个命令可以自己定义发送的个数，对衡量网络速度很有帮助，比如我想测试发送10个数据包的返回的平均时间为多少，最快时间为多少，最慢时间为多少就可以通过以下获知：</p>
<p><img src="/images/ping/ping4.webp" alt="img"></p>
<p>从以上我就可以知道在给47.93.187.142发送10个数据包的过程当中，返回了10个，没有丢失，这10个数据包当中返回速度最快为32ms，最慢为55ms，平均速度为37ms。说明我的网络良好。</p>
<p>如果对于一些不好的网络，比如监控系统中非常卡顿，这样测试，返回的结果可能会显示出丢失出一部分，如果丢失的比较多的话，那么就说明网络不好，可以很直观的判断出网络的情况。</p>
<h1 id="五、ping-l-size的使用"><a href="#五、ping-l-size的使用" class="headerlink" title="五、ping -l size的使用"></a>五、ping -l size的使用</h1><p>-l size：发送size指定大小的到目标主机的数据包。</p>
<p>在默认的情况下Windows的ping发送的数据包大小为32byte，最大能发送65500byte。当一次发送的数据包大于或等于65500byte时，将可能导致接收方计算机宕机。所以微软限制了这一数值；这个参数配合其它参数以后危害非常强大，比如攻击者可以结合-t参数实施DOS攻击。（所以它具有危险性，不要轻易向别人计算机使用）。</p>
<p>例如：<code>ping -l 65500 -t  211.84.7.46</code></p>
<p>会连续对IP地址执行ping命令，直到被用户以Ctrl+C中断.</p>
<p><img src="/images/ping/ping5.webp" alt="img"></p>
<p>这样它就会不停的向211.84.7.46计算机发送大小为65500byte的数据包，如果你只有一台计算机也许没有什么效果，但如果有很多计算机那么就可以使对方完全瘫痪，网络严重堵塞，由此可见威力非同小可。</p>
<h1 id="六、ping-r-count的使用"><a href="#六、ping-r-count的使用" class="headerlink" title="六、ping -r count的使用"></a>六、ping -r count的使用</h1><p>在“记录路由”字段中记录传出和返回数据包的路由，探测经过的</p>
<p>路由个数，但最多只能跟踪到9个路由。</p>
<p><code>ping -n 1 -r 9 202.102.224.25</code> （发送一个数据包，最多记录9个路由）</p>
<p><img src="/images/ping/ping6.webp" alt="img"></p>
<p>将经过 9个路由都显示出来了，可以看上图。</p>
<p>ping命令用的较多的就这6类的，大家有可能在项目中会用到的。</p>
<h1 id="七、批量ping网段"><a href="#七、批量ping网段" class="headerlink" title="七、批量ping网段"></a>七、批量ping网段</h1><p>对于一个网段ip地址众多，如果单个检测实在麻烦，那么我们可以直接批量ping网段检测，那个ip地址出了问题，一目了然。</p>
<p>先看代码，直接在命令行窗口输入：</p>
<p><code>for /L %D in (1,1,255) do ping 10.168.1.%D</code></p>
<p>IP地址段修改成你要检查的IP地址段。</p>
<p><img src="/images/ping/ping7.webp" alt="img"></p>
<p>当输入批量命令后，那么它就自动把网段内所有的ip地址都ping完为止。</p>
<p>那么这段<code>for /L %D in(1,1,255) do ping 10.168.1.%D</code> 代码是什么意思呢？</p>
<p>代码中的这个<strong>(1,1,255)</strong>就是网段起与始，就是检测网段192.168.1.1到192.168.1.255之间的所有的ip地址，每次逐增1，直接到1到255这255个ip检测完为止。</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL复制-基于全局事务标识符</title>
    <url>/2020/04/17/MySQL-Replication-GTID/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/replication-gtids.html" target="_blank" rel="noopener">官方参考文档</a></p>
</blockquote>
<h1 id="全局事务标识符"><a href="#全局事务标识符" class="headerlink" title="全局事务标识符"></a>全局事务标识符</h1><p>全局事务标识符（GTID）是创建的唯一标识符，并且与在源服务器（主服务器）上提交的每个事务相关联。该标识符不仅对于它起源的服务器是唯一的，而且在给定复制拓扑中的所有服务器上也是唯一的。<br>GTID表示为一对坐标，并用冒号（:）分隔，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GTID &#x3D; source_id:transaction_id</span><br></pre></td></tr></table></figure>
<p>source_id：主服务器上的uuid</p>
<p>transaction_id：提交的事务id</p>
<p>例如，最初要在服务器上使用UUID提交的第二十三笔交易 <code>3E11FA47-71CA-11E1-9E33-C80AA9429562</code>具有以下GTID：<code>3E11FA47-71CA-11E1-9E33-C80AA9429562:23</code></p>
<p>GTID集：<code>2174B383-5441-11E8-B90A-C80AA9429562:1-3, 24DA167-0C0C-11E8-8442-00059A3C7B00:1-19</code></p>
<p>事务的GTID通过<code>mysqlbinlog</code>命令可以查询出来</p>
<h1 id="设置复制"><a href="#设置复制" class="headerlink" title="设置复制"></a>设置复制</h1><h2 id="1-如果复制已经在运行，则通过将它们设置为只读来同步两个服务器。"><a href="#1-如果复制已经在运行，则通过将它们设置为只读来同步两个服务器。" class="headerlink" title="1. 如果复制已经在运行，则通过将它们设置为只读来同步两个服务器。"></a>1. 如果复制已经在运行，则通过将它们设置为只读来同步两个服务器。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @@GLOBAL.read_only &#x3D; ON;</span><br></pre></td></tr></table></figure>

<p>通过上面的命令，使主从都变成只读状态，然后开始同步。</p>
<h2 id="2-停止两个服务器。"><a href="#2-停止两个服务器。" class="headerlink" title="2. 停止两个服务器。"></a>2. 停止两个服务器。</h2><h2 id="3-重新启动两个启用了GTID并配置了正确选项的服务器。"><a href="#3-重新启动两个启用了GTID并配置了正确选项的服务器。" class="headerlink" title="3. 重新启动两个启用了GTID并配置了正确选项的服务器。"></a>3. 重新启动两个启用了GTID并配置了正确选项的服务器。</h2><ul>
<li>主服务器配置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">###########必须############</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">142</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="attr">gtid_mode</span>=<span class="literal">ON</span></span><br><span class="line"><span class="attr">enforce-gtid-consistency</span>=<span class="literal">ON</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########可选############</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从服务器配置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">###########必须############</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">168</span></span><br><span class="line"></span><br><span class="line"><span class="attr">gtid_mode</span>=<span class="literal">ON</span></span><br><span class="line"><span class="attr">enforce-gtid-consistency</span>=<span class="literal">ON</span></span><br><span class="line"><span class="comment">###########可选############</span></span><br></pre></td></tr></table></figure>



<h2 id="4-指示从属服务器将主服务器用作复制数据源并使用自动定位"><a href="#4-指示从属服务器将主服务器用作复制数据源并使用自动定位" class="headerlink" title="4. 指示从属服务器将主服务器用作复制数据源并使用自动定位"></a>4. 指示从属服务器将主服务器用作复制数据源并使用自动定位</h2><p>在从服务器端执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">  MASTER_HOST &#x3D; host,</span><br><span class="line">  MASTER_PORT &#x3D; port,</span><br><span class="line">  MASTER_USER &#x3D; user,</span><br><span class="line">  MASTER_PASSWORD &#x3D; password,</span><br><span class="line">  MASTER_AUTO_POSITION &#x3D; 1;</span><br></pre></td></tr></table></figure>



<h2 id="5-进行新的备份"><a href="#5-进行新的备份" class="headerlink" title="5. 进行新的备份"></a>5. 进行新的备份</h2><p>包含没有GTID的事务的二进制日志不能在启用了GTID的服务器上使用，因此在此之前进行的备份不能与新配置一起使用。</p>
<p>在主服务器端执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLUSH LOGS</span><br></pre></td></tr></table></figure>



<h2 id="6-启动从属服务器，然后在两台服务器上禁用只读模式，以便它们可以接受更新。"><a href="#6-启动从属服务器，然后在两台服务器上禁用只读模式，以便它们可以接受更新。" class="headerlink" title="6. 启动从属服务器，然后在两台服务器上禁用只读模式，以便它们可以接受更新。"></a>6. 启动从属服务器，然后在两台服务器上禁用只读模式，以便它们可以接受更新。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">START SLAVE;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @@GLOBAL.read_only &#x3D; OFF;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>关于JVM对反射调用的优化</title>
    <url>/2019/11/12/%E5%85%B3%E4%BA%8EJVM%E5%AF%B9%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E7%9A%84%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="关于JVM对反射调用的优化"><a href="#关于JVM对反射调用的优化" class="headerlink" title="关于JVM对反射调用的优化"></a>关于JVM对反射调用的优化</h1><h2 id="Java中对反射的优化"><a href="#Java中对反射的优化" class="headerlink" title="Java中对反射的优化"></a>Java中对反射的优化</h2><p>使用反射调用某个类的方法，jvm内部有两种方式</p>
<h3 id="1-JNI"><a href="#1-JNI" class="headerlink" title="1. JNI"></a>1. JNI</h3><p>使用native方法进行反射操作。</p>
<h3 id="2-pure-Java"><a href="#2-pure-Java" class="headerlink" title="2. pure-Java"></a>2. pure-Java</h3><p>生成bytecode进行反射操作，即生成类sun.reflect.GeneratedMethodAccessor，它是一个被反射调用方法的包装类，代理不同的方法，类后缀序号会递增。这种方式第一次调用速度较慢，较之第一种会慢3-4倍，但是多次调用后速度会提升20倍</p>
<p>对于使用JNI的方式，因为每次都要调用native方法再返回，速度会比较慢。所以，当一个方法被反射调用的次数超过一定次数（默认15次）时，JVM内部会进行优化，使用第2种方法，来加快运行速度。</p>
<p>JVM有两个参数来控制这种优化</p>
<p><code>-Dsun.reflect.inflationThreshold=&lt;value&gt;</code></p>
<p>value默认为15，即反射调用某个方法15次后，会由JNI的方式变为pure-java的方式</p>
<p><code>-Dsun.reflect.noInflation=true</code></p>
<p>默认为false。当设置为true时，表示在第一次反射调用时，就转为pure-java的方式</p>
<p>下面是一个验证反射优化的样例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMethodInvoke</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clz = Class.forName(<span class="string">"A"</span>);</span><br><span class="line">        Object o = clz.newInstance();</span><br><span class="line">        Method m = clz.getMethod(<span class="string">"foo"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            m.invoke(o, Integer.toString(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置如下JVM参数，使得在第一次反射调用时，就转为pure-java的方式</p>
<p><code>-Dsun.reflect.noInflation=true</code></p>
<h2 id="如何关闭JVM对反射调用的优化？"><a href="#如何关闭JVM对反射调用的优化？" class="headerlink" title="如何关闭JVM对反射调用的优化？"></a>如何关闭JVM对反射调用的优化？</h2><p>想关闭JVM对反射优化怎么办?</p>
<p>JVM中只提供了两个参数，因此，没有办法完全关闭反射优化。</p>
<p>一种能想到的接近于关闭反射优化的方法就是将inflationThreshold设为的一个特别大的数。</p>
<p>inflationThreshold是java中的int型值，可以考虑把其设置为Integer.MAX_VALUE ((2^31)-1)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java-Dsun.reflect.inflationThreshold&#x3D;2147483647MyApp</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树遍历</title>
    <url>/2020/04/01/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<blockquote>
<p>二叉树遍历有三种遍历方式，前、中、后。这些不多介绍了。</p>
<p>如果使用代码实现有可以有多种不同的方式。本文着重讲解这几种方式，并且探究不同方式的时间和空间复杂度。</p>
</blockquote>
<h1 id="定义二叉树"><a href="#定义二叉树" class="headerlink" title="定义二叉树"></a>定义二叉树</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">  TreeNode left;</span><br><span class="line">  TreeNode right;</span><br><span class="line"></span><br><span class="line">  TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">    val = x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h1><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(root.val);</span><br><span class="line">        preorderTraversal(root.left);</span><br><span class="line">        preorderTraversal(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; output = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stack.add(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        TreeNode node = stack.pollLast();</span><br><span class="line">        output.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.add(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="莫里斯法"><a href="#莫里斯法" class="headerlink" title="莫里斯法"></a>莫里斯法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; output = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    TreeNode node = root;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">            output.add(node.val);</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode predecessor = node.left;</span><br><span class="line">            <span class="keyword">while</span> ((predecessor.right != <span class="keyword">null</span>) &amp;&amp; (predecessor.right != node)) &#123;</span><br><span class="line">                predecessor = predecessor.right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (predecessor.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                output.add(node.val);</span><br><span class="line">                predecessor.right = node;</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                predecessor.right = <span class="keyword">null</span>;</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><h2 id="递归法-1"><a href="#递归法-1" class="headerlink" title="递归法"></a>递归法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        inorderTraversal(root.left);</span><br><span class="line">        System.out.println(root.val);</span><br><span class="line">        inorderTraversal(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="迭代法-1"><a href="#迭代法-1" class="headerlink" title="迭代法"></a>迭代法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    TreeNode curr = root;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(curr);</span><br><span class="line">            curr = curr.left;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = stack.pop();</span><br><span class="line">        res.add(curr.val);</span><br><span class="line">        curr = curr.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="莫里斯法-1"><a href="#莫里斯法-1" class="headerlink" title="莫里斯法"></a>莫里斯法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ldr = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line">    TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.left==<span class="keyword">null</span>)&#123;<span class="comment">//左子树为空，输出当前节点，将其右孩子作为当前节点</span></span><br><span class="line">            ldr.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            pre = cur.left;<span class="comment">//左子树</span></span><br><span class="line">            <span class="keyword">while</span>(pre.right!=<span class="keyword">null</span>&amp;&amp;pre.right!=cur)&#123;<span class="comment">//找到前驱节点，即左子树中的最右节点</span></span><br><span class="line">                pre = pre.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。</span></span><br><span class="line">            <span class="keyword">if</span>(pre.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                pre.right = cur;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。</span></span><br><span class="line">            <span class="keyword">if</span>(pre.right==cur)&#123;</span><br><span class="line">                pre.right = <span class="keyword">null</span>;</span><br><span class="line">                ldr.add(cur.val);</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ldr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><h2 id="递归法-2"><a href="#递归法-2" class="headerlink" title="递归法"></a>递归法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        postorderTraversal(root.left);</span><br><span class="line">        postorderTraversal(root.right);</span><br><span class="line">        System.out.println(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="迭代法-2"><a href="#迭代法-2" class="headerlink" title="迭代法"></a>迭代法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; output = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">    stack.add(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        TreeNode node = stack.pollLast();</span><br><span class="line">        output.addFirst(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.add(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="莫里斯法-2"><a href="#莫里斯法-2" class="headerlink" title="莫里斯法"></a>莫里斯法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">时间复杂度</th>
<th align="center">空间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">递归</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">迭代</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">莫里斯</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>算法相关</category>
      </categories>
  </entry>
  <entry>
    <title>关于Java中的变量</title>
    <url>/2019/11/28/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h1><blockquote>
<p>存在于堆内存中，和类一起创建</p>
</blockquote>
<ul>
<li>实例变量（不以static修饰）</li>
</ul>
<p>实例变量则从该类的实例被创建起开始存在，直到系统完全销毁这个实例，实例变量的作用域与对应实例的生存范围相同</p>
<ul>
<li>类变量（以static修饰）</li>
</ul>
<p>类变量从该类的准备阶段起开始存在，直到系统完全销毁这个类，类变量的作用域与这个类的生存范围相同</p>
<h1 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h1><blockquote>
<p>存在于栈内存中，当方法执行完成，回收内存</p>
</blockquote>
<ul>
<li>形参（方法签名中定义的变量）</li>
</ul>
<p>在定义方法签名时定义的变量，形参的作用域在整个方法中都有效</p>
<ul>
<li>方法局部变量（在方法内定义）</li>
</ul>
<p>在方法体内定义的局部变量，它的作用域是从定义该变量的地方生效，到该方法结束时失效</p>
<ul>
<li>代码块局部变量（在代码块内定义）</li>
</ul>
<p>这个局部变量的作用域从定义该变量的地方生效，到该代码结束时失效。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>元注解介绍</title>
    <url>/2020/01/09/%E5%85%83%E6%B3%A8%E8%A7%A3%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="元注解："><a href="#元注解：" class="headerlink" title="元注解："></a>元注解：</h1><p>元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：</p>
<ol>
<li>@Target,</li>
<li>@Retention,</li>
<li>@Documented,</li>
<li>@Inherited　</li>
</ol>
<p>这些类型和它们所支持的类在java.lang.annotation包中可以找到。下面我们看一下每个元注解的作用和相应分参数的使用说明。</p>
<h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h2><p>说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p>
<ul>
<li>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</li>
<li>取值(ElementType)有：<ol>
<li>CONSTRUCTOR:用于描述构造器</li>
<li>FIELD:用于描述域</li>
<li>LOCAL_VARIABLE:用于描述局部变量</li>
<li>METHOD:用于描述方法</li>
<li>PACKAGE:用于描述包</li>
<li>PARAMETER:用于描述参数</li>
<li>TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>
</ol>
</li>
</ul>
<h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h2><p>定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。</p>
<ul>
<li>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</li>
<li>取值（RetentionPoicy）有：<ol>
<li>SOURCE:在源文件中有效（即源文件保留）</li>
<li>CLASS:在class文件中有效（即class保留）</li>
<li>RUNTIME:在运行时有效（即运行时保留）</li>
</ol>
</li>
</ul>
<h2 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h2><p>用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。</p>
<h2 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h2><p>元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p>
<ul>
<li><p>注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。</p>
</li>
<li><p>当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p>
</li>
</ul>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="@自定义注解"></a>@自定义注解</h2><p>使用@interface自定义注解时，自动继承了<code>java.lang.annotation.Annotation</code>接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</p>
<p>定义注解格式：</p>
<p><code>public @interface 注解名 {定义体}</code></p>
<p>注解参数的可支持数据类型：</p>
<ol>
<li>所有基本数据类型（int,float,boolean,byte,double,char,long,short)</li>
<li>String类型</li>
<li>Class类型</li>
<li>enum类型</li>
<li>Annotation类型</li>
<li>以上所有类型的数组</li>
</ol>
<p>Annotation类型里面的参数该怎么设定: </p>
<ol>
<li>只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为default默认类型 　</li>
<li>参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String</li>
<li>如果只有一个参数成员,最好把参数名称设为”value”,后加小括号.例:下面的例子FruitName注解就只有一个参数成员</li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>将Linux命令的结果作为下一个命令的参数</title>
    <url>/2019/10/25/%E5%B0%86Linux%E5%91%BD%E4%BB%A4%E7%9A%84%E7%BB%93%E6%9E%9C%E4%BD%9C%E4%B8%BA%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="符号："><a href="#符号：" class="headerlink" title="符号：``"></a>符号：``</h1><p>名称：反引号，上分隔符</p>
<p>位置：反引号（`）这个字符一般在键盘的左上角，数字1的左边，不要将其同单引号（’）混淆</p>
<p>作用：反引号括起来的字符串被shell解释为命令行，在执行时，shell首先执行该命令行，并以它的标准输出结果取代整个反引号（包括两个反引号）部分</p>
<p>举例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo `rpm -qa|grep java`</span><br></pre></td></tr></table></figure>

<h1 id="命令：xargs"><a href="#命令：xargs" class="headerlink" title="命令：xargs"></a>命令：xargs</h1><p>xargs是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。它把一个数据流分割为一些足够小的块，以方便过滤器和命令进行处理。</p>
<p>通常情况下，xargs从管道或者stdin中读取数据，但是它也能够从文件的输出中读取数据。</p>
<p>xargs的默认命令是echo，这意味着通过管道传递给xargs的输入将会包含换行和空白，不过通过xargs的处理，换行和空白将被空格取代。</p>
<p>举例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep java |xargs echo</span><br></pre></td></tr></table></figure>



<h1 id="命令：awk"><a href="#命令：awk" class="headerlink" title="命令：awk"></a>命令：awk</h1><p>就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep java|awk '&#123;print $1&#125;'</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>哀悼日网站全站变灰代码</title>
    <url>/2020/04/07/%E5%93%80%E6%82%BC%E6%97%A5%E7%BD%91%E7%AB%99%E5%85%A8%E7%AB%99%E5%8F%98%E7%81%B0%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="第一种：修改CSS文件"><a href="#第一种：修改CSS文件" class="headerlink" title="第一种：修改CSS文件"></a>第一种：修改CSS文件</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第二种：在网页的-lt-head-gt-标签内加入以下代码"><a href="#第二种：在网页的-lt-head-gt-标签内加入以下代码" class="headerlink" title="第二种：在网页的&lt;head&gt;标签内加入以下代码"></a>第二种：在网页的<code>&lt;head&gt;</code>标签内加入以下代码</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    html &#123;</span><br><span class="line">        filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);</span><br><span class="line">        -webkit-filter: grayscale(100%);&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="第三种：修改-lt-html-gt-标签加入内联样式"><a href="#第三种：修改-lt-html-gt-标签加入内联样式" class="headerlink" title="第三种：修改&lt;html&gt;标签加入内联样式"></a>第三种：修改<code>&lt;html&gt;</code>标签加入内联样式</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">style</span>=<span class="string">"filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);</span></span></span><br><span class="line"><span class="tag"><span class="string">             -webkit-filter: grayscale(100%);"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="第四种：body"><a href="#第四种：body" class="headerlink" title="第四种：body"></a>第四种：body</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> *&#123;</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>); <span class="comment">/* webkit */</span></span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>); <span class="comment">/*firefox*/</span></span><br><span class="line">    <span class="attribute">-ms-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>); <span class="comment">/*ie9*/</span></span><br><span class="line">    <span class="attribute">-o-filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>); <span class="comment">/*opera*/</span></span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">filter</span>:progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=<span class="number">1</span>); </span><br><span class="line">    <span class="attribute">filter</span>:gray; <span class="comment">/*ie9- */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第五种：Nginx-sub-filter"><a href="#第五种：Nginx-sub-filter" class="headerlink" title="第五种：Nginx sub_filter"></a>第五种：Nginx sub_filter</h1><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>   /opt/app/code/;</span><br><span class="line">    <span class="attribute">random_index</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    sub_filter '&lt;h1&gt;Admin' '&lt;h1&gt;ggggg';  //第一个参数是要被替换的，第二个参数是替换后的</span><br><span class="line">    sub_filter_once off;   //替换所有的，默认是on，替换第一个</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>缓存算法</title>
    <url>/2019/12/25/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="FIFO算法"><a href="#FIFO算法" class="headerlink" title="FIFO算法"></a>FIFO算法</h1><p>FIFO 算法是一种比较容易实现的算法。它的思想是先进先出（FIFO，队列），这是最简单、最公平的一种思想，即<strong>如果一个数据是最先进入的，那么可以认为在将来它被访问的可能性很小。空间满的时候，最先进入的数据会被最早置换（淘汰）掉</strong>。</p>
<p>FIFO 算法的描述：设计一种缓存结构，该结构在构造时确定大小，假设大小为 K，并有两个功能：</p>
<ol>
<li>set(key,value)：将记录(key,value)插入该结构。当缓存满时，将最先进入缓存的数据置换掉。</li>
<li>get(key)：返回key对应的value值。</li>
</ol>
<p>实现：维护一个FIFO队列，按照时间顺序将各数据（已分配页面）链接起来组成队列，并将置换指针指向队列的队首。再进行置换时，只需把置换指针所指的数据（页面）顺次换出，并把新加入的数据插到队尾即可。</p>
<p>缺点：判断一个页面置换算法优劣的指标就是缺页率，而FIFO算法的一个显著的缺点是，在某些特定的时刻，缺页率反而会随着分配页面的增加而增加，这称为<strong>Belady现象</strong>。产生Belady现象现象的原因是，FIFO置换算法与进程访问内存的动态特征是不相容的，被置换的内存页面往往是被频繁访问的，或者没有给进程分配足够的页面，因此FIFO算法会使一些页面频繁地被替换和重新申请内存，从而导致缺页率增加。因此，<strong>现在不再使用FIFO算法</strong>。</p>
<h1 id="LRU算法"><a href="#LRU算法" class="headerlink" title="LRU算法"></a>LRU算法</h1><p>LRU（The Least Recently Used，最近最久未使用算法）是一种常见的缓存算法，在很多分布式缓存系统（如Redis, Memcached）中都有广泛使用。</p>
<p>LRU算法的思想是：<strong>如果一个数据在最近一段时间没有被访问到，那么可以认为在将来它被访问的可能性也很小。因此，当空间满时，最久没有访问的数据最先被置换（淘汰）</strong>。</p>
<p>LRU算法的描述： 设计一种缓存结构，该结构在构造时确定大小，假设大小为 K，并有两个功能：</p>
<ol>
<li>set(key,value)：将记录(key,value)插入该结构。当缓存满时，将最久未使用的数据置换掉。</li>
<li>get(key)：返回key对应的value值。</li>
</ol>
<p>实现：最朴素的思想就是用数组+时间戳的方式，不过这样做效率较低。因此，我们可以用双向链表（LinkedList）+哈希表（HashMap）实现（链表用来表示位置，哈希表用来存储和查找），在Java里有对应的数据结构<strong>LinkedHashMap</strong>。</p>
<h2 id="LInkedHashMap"><a href="#LInkedHashMap" class="headerlink" title="LInkedHashMap"></a>LInkedHashMap</h2><p>利用<code>Java</code>的<code>LinkedHashMap</code>用非常简单的代码来实现基于LRU算法的Cache功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Copyimport java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 简单用LinkedHashMap来实现的LRU算法的缓存</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class LRUCache&lt;K, V&gt; extends LinkedHashMap&lt;K, V&gt; &#123;</span><br><span class="line">    private int cacheSize;</span><br><span class="line">    public LRUCache(int cacheSize) &#123;</span><br><span class="line">        super(16, (float) 0.75, true);</span><br><span class="line">        this.cacheSize &#x3D; cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line">    protected boolean removeEldestEntry(Map.Entry&lt;K, V&gt; eldest) &#123;</span><br><span class="line">        return size() &gt; cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Copyimport org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">public class LRUCacheTest &#123;</span><br><span class="line">    private static final Logger log &#x3D; LoggerFactory.getLogger(LRUCacheTest.class);</span><br><span class="line">    private static LRUCache&lt;String, Integer&gt; cache &#x3D; new LRUCache&lt;&gt;(10);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            cache.put(&quot;k&quot; + i, i);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(&quot;all cache :&#39;&#123;&#125;&#39;&quot;,cache);</span><br><span class="line">        cache.get(&quot;k3&quot;);</span><br><span class="line">        log.info(&quot;get k3 :&#39;&#123;&#125;&#39;&quot;, cache);</span><br><span class="line">        cache.get(&quot;k4&quot;);</span><br><span class="line">        log.info(&quot;get k4 :&#39;&#123;&#125;&#39;&quot;, cache);</span><br><span class="line">        cache.get(&quot;k4&quot;);</span><br><span class="line">        log.info(&quot;get k4 :&#39;&#123;&#125;&#39;&quot;, cache);</span><br><span class="line">        cache.put(&quot;k&quot; + 10, 10);</span><br><span class="line">        log.info(&quot;After running the LRU algorithm cache :&#39;&#123;&#125;&#39;&quot;, cache);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Copyall cache :&#39;&#123;k0&#x3D;0, k1&#x3D;1, k2&#x3D;2, k3&#x3D;3, k4&#x3D;4, k5&#x3D;5, k6&#x3D;6, k7&#x3D;7, k8&#x3D;8, k9&#x3D;9&#125;&#39;</span><br><span class="line">get k3 :&#39;&#123;k0&#x3D;0, k1&#x3D;1, k2&#x3D;2, k4&#x3D;4, k5&#x3D;5, k6&#x3D;6, k7&#x3D;7, k8&#x3D;8, k9&#x3D;9, k3&#x3D;3&#125;&#39;</span><br><span class="line">get k4 :&#39;&#123;k0&#x3D;0, k1&#x3D;1, k2&#x3D;2, k5&#x3D;5, k6&#x3D;6, k7&#x3D;7, k8&#x3D;8, k9&#x3D;9, k3&#x3D;3, k4&#x3D;4&#125;&#39;</span><br><span class="line">get k4 :&#39;&#123;k0&#x3D;0, k1&#x3D;1, k2&#x3D;2, k5&#x3D;5, k6&#x3D;6, k7&#x3D;7, k8&#x3D;8, k9&#x3D;9, k3&#x3D;3, k4&#x3D;4&#125;&#39;</span><br><span class="line">After running the LRU algorithm cache :&#39;&#123;k1&#x3D;1, k2&#x3D;2, k5&#x3D;5, k6&#x3D;6, k7&#x3D;7, k8&#x3D;8, k9&#x3D;9, k3&#x3D;3, k4&#x3D;4, k10&#x3D;10&#125;&#39;</span><br></pre></td></tr></table></figure>

<h1 id="LFU算法"><a href="#LFU算法" class="headerlink" title="LFU算法"></a>LFU算法</h1><p>LFU（Least Frequently Used ，最近最少使用算法）也是一种常见的缓存算法。</p>
<p>顾名思义，LFU算法的思想是：<strong>如果一个数据在最近一段时间很少被访问到，那么可以认为在将来它被访问的可能性也很小。因此，当空间满时，最小频率访问的数据最先被淘汰</strong>。</p>
<p>LFU 算法的描述：</p>
<p>设计一种缓存结构，该结构在构造时确定大小，假设大小为 K，并有两个功能：</p>
<ol>
<li>set(key,value)：将记录(key,value)插入该结构。当缓存满时，将访问频率最低的数据置换掉。</li>
<li>get(key)：返回key对应的value值。</li>
</ol>
<p>算法实现策略：考虑到 LFU 会淘汰访问频率最小的数据，我们需要一种合适的方法按大小顺序维护数据访问的频率。LFU  算法本质上可以看做是一个 top K 问题(K =  1)，即选出频率最小的元素，因此我们很容易想到可以用二项堆来选择频率最小的元素，这样的实现比较高效。最终实现策略为小顶堆+哈希表。</p>
]]></content>
      <categories>
        <category>算法相关</category>
      </categories>
  </entry>
  <entry>
    <title>如何保护自己的Java代码</title>
    <url>/2020/04/15/%E5%A6%82%E4%BD%95%E4%BF%9D%E6%8A%A4%E8%87%AA%E5%B7%B1%E7%9A%84Java%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<p>代码混淆是为了防止反编译。如果没有对代码混淆，那么其他人很容易就可以得到你的项目中的所有代码。而混淆之后，其他人就没那么容易获得了。</p>
<p>保护软件有着双重意义： 一是保护软件的知识产权 (intellectual property)， 防止被人盗用； 二是保护软件中可能隐含的诸如技术漏洞等私密信息， 防止被人利用。 就保护思路而言， 目前主要有两条： 一条是加密 (encryption)， 另一条是代码混淆 (obfuscation)。 两者的主要区别是前者需解密 (decryption)， 后者则不需要——因为后者只是将代码换成普通人难以读懂、 在计算机上却仍能运行， 且功能相同的形式， 很多网站采用的 JavaScript 代码混淆就是很好的例子。</p>
</blockquote>
<h1 id="ProGuard"><a href="#ProGuard" class="headerlink" title="ProGuard"></a><code>ProGuard</code></h1><blockquote>
<p><a href="https://www.guardsquare.com/en/products/proguard" target="_blank" rel="noopener">官方网站</a></p>
<p>ProGuard是最流行的Java字节码优化器。它使Java和Android应用程序的体积缩小了90％，速度提高了20％。ProGuard还通过混淆类，字段和方法的名称来提供最小的保护，以防止逆向工程。</p>
<p>ProGuard可以免费使用来处理您的应用程序，无论是否商业。ProGuard代码本身受版权保护，并根据GNU通用公共许可证（GPL）版本2进行分配。该用户手册也受版权保护，并且只能以其原始形式与未经修改的代码一起重新分发。</p>
</blockquote>
<p>看一下 <a href="https://www.guardsquare.com/en/products/proguard/manual/gui" target="_blank" rel="noopener">https://www.guardsquare.com/en/products/proguard/manual/gui</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java开发规范</title>
    <url>/2019/10/24/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="一、MyBatis不要为了多个查询条件而写1-1"><a href="#一、MyBatis不要为了多个查询条件而写1-1" class="headerlink" title="一、MyBatis不要为了多个查询条件而写1 = 1"></a>一、MyBatis不要为了多个查询条件而写1 = 1</h2><blockquote>
<p>当遇到多个查询条件，使用where  1=1 可以很方便的解决我们的问题，但是这样很可能会造成非常大的性能损失，因为添加了 “where 1=1  ”的过滤条件之后，数据库系统就无法使用索引等查询优化策略，数据库系统将会被迫对每行数据进行扫描（即全表扫描）  以比较此行是否满足过滤条件，当表中的数据量较大时查询速度会非常慢；此外，还会存在SQL 注入的风险。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookInfo"</span> <span class="attr">parameterType</span>=<span class="string">"com.tjt.platform.entity.BookInfo"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    select count(*) from t_rule_BookInfo t where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title !=null and title !='' "</span>&gt;</span></span><br><span class="line">        AND title = #&#123;title&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author !=null and author !='' "</span>&gt;</span></span><br><span class="line">        AND author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookInfo"</span> <span class="attr">parameterType</span>=<span class="string">"com.tjt.platform.entity.BookInfo"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    select count(*) from t_rule_BookInfo t</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title !=null and title !='' "</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author !=null and author !='' "</span>&gt;</span> </span><br><span class="line">            AND author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UPDATE 操作也一样，可以用标记代替 1=1。</p>
<h2 id="二、迭代entrySet-获取Map的key和value"><a href="#二、迭代entrySet-获取Map的key和value" class="headerlink" title="二、迭代entrySet()获取Map的key和value"></a>二、迭代entrySet()获取Map的key和value</h2><blockquote>
<p>当循环中只需要获取Map 的主键key时，迭代keySet() 是正确的；但是，当需要主键key 和取值value 时，迭代entrySet() 才是更高效的做法，其比先迭代keySet() 后再去通过get 取值性能更佳。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map 获取value 反例:</span></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet())&#123;</span><br><span class="line">    String value = map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map 获取key &amp; value 正例:</span></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String,String&gt; entry : map.entrySet())&#123;</span><br><span class="line">    String key = entry.getKey();</span><br><span class="line">    String value = entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、使用Collection-isEmpty-检测空"><a href="#三、使用Collection-isEmpty-检测空" class="headerlink" title="三、使用Collection.isEmpty()检测空"></a>三、使用Collection.isEmpty()检测空</h2><blockquote>
<p>使用<code>Collection.size()</code>来检测是否为空在逻辑上没有问题，但是使用<code>Collection.isEmpty()</code> 使得代码更易读，并且可以获得更好的性能；除此之外，任何<code>Collection.isEmpty()</code> 实现的时间复杂度都是O(1)  ，不需要多次循环遍历，但是某些通过<code>Collection.size()</code> 方法实现的时间复杂度可能是O(n)。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;Object&gt; collection = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (collection.size() == <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"collection is empty."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;Object&gt; collection = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (collection.isEmpty())&#123;</span><br><span class="line">    System.out.println(<span class="string">"collection is empty."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测是否为null 可以使用CollectionUtils.isEmpty()</span></span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(collection))&#123;</span><br><span class="line">    System.out.println(<span class="string">"collection is null."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、初始化集合时尽量指定其大小"><a href="#四、初始化集合时尽量指定其大小" class="headerlink" title="四、初始化集合时尽量指定其大小"></a>四、初始化集合时尽量指定其大小</h2><blockquote>
<p>尽量在初始化时指定集合的大小，能有效减少集合的扩容次数，因为集合每次扩容的时间复杂度很可能时O(n)，耗费时间和性能。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化list，往list 中添加元素反例：</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化list，往list 中添加元素正例：</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">//指定集合list 的容量大小</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(arr.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、使用StringBuilder拼接字符串"><a href="#五、使用StringBuilder拼接字符串" class="headerlink" title="五、使用StringBuilder拼接字符串"></a>五、使用StringBuilder拼接字符串</h2><blockquote>
<p>一般的字符串拼接在编译期Java 会对其进行优化，但是在循环中字符串的拼接Java 编译期无法执行优化，所以需要使用<code>StringBuilder</code>进行替换。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在循环中拼接字符串反例</span></span><br><span class="line">String str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="comment">//在循环中字符串拼接Java 不会对其进行优化</span></span><br><span class="line">    str += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在循环中拼接字符串正例</span></span><br><span class="line">String str1 = <span class="string">"Love"</span>;</span><br><span class="line">String str2 = <span class="string">"Courage"</span>;</span><br><span class="line">String strConcat = str1 + str2;  <span class="comment">//Java 编译器会对该普通模式的字符串拼接进行优化</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="comment">//在循环中，Java 编译器无法进行优化，所以要手动使用StringBuilder</span></span><br><span class="line">    sb.append(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、若需频繁调用Collection-contains方法则使用Set"><a href="#六、若需频繁调用Collection-contains方法则使用Set" class="headerlink" title="六、若需频繁调用Collection.contains方法则使用Set"></a>六、若需频繁调用Collection.contains方法则使用Set</h2><blockquote>
<p>在Java 集合类库中，List的<code>contains</code> 方法普遍时间复杂度为O(n)，若代码中需要频繁调用contains 方法查找数据则先将集合list 转换成<code>HashSet</code>实现，将O(n) 的时间复杂度将为O(1)。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//频繁调用Collection.contains() 反例</span></span><br><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++)&#123;</span><br><span class="line">    <span class="comment">//时间复杂度为O(n)</span></span><br><span class="line">    <span class="keyword">if</span> (list.contains(i))</span><br><span class="line">        System.out.println(<span class="string">"list contains "</span>+ i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//频繁调用Collection.contains() 正例</span></span><br><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Set&lt;Object&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++)&#123;</span><br><span class="line">    <span class="comment">//时间复杂度为O(1)</span></span><br><span class="line">    <span class="keyword">if</span> (set.contains(i))&#123;</span><br><span class="line">        System.out.println(<span class="string">"list contains "</span>+ i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、使用静态代码块实现赋值静态成员变量"><a href="#七、使用静态代码块实现赋值静态成员变量" class="headerlink" title="七、使用静态代码块实现赋值静态成员变量"></a>七、使用静态代码块实现赋值静态成员变量</h2><blockquote>
<p>对于集合类型的静态成员变量，应该使用静态代码块赋值，而不是使用集合实现来赋值。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//赋值静态成员变量反例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;()&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        map.put(<span class="string">"Leo"</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">"Family-loving"</span>,<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">"Cold on the out side passionate on the inside"</span>,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;()&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        list.add(<span class="string">"Sagittarius"</span>);</span><br><span class="line">        list.add(<span class="string">"Charming"</span>);</span><br><span class="line">        list.add(<span class="string">"Perfectionist"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//赋值静态成员变量正例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    map.put(<span class="string">"Leo"</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">"Family-loving"</span>,<span class="number">2</span>);</span><br><span class="line">    map.put(<span class="string">"Cold on the out side passionate on the inside"</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    list.add(<span class="string">"Sagittarius"</span>);</span><br><span class="line">    list.add(<span class="string">"Charming"</span>);</span><br><span class="line">    list.add(<span class="string">"Perfectionist"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、删除未使用的局部变量、方法参数、私有方法、字段和多余的括号。"><a href="#八、删除未使用的局部变量、方法参数、私有方法、字段和多余的括号。" class="headerlink" title="八、删除未使用的局部变量、方法参数、私有方法、字段和多余的括号。"></a>八、删除未使用的局部变量、方法参数、私有方法、字段和多余的括号。</h2><h2 id="九、工具类中屏蔽构造函数"><a href="#九、工具类中屏蔽构造函数" class="headerlink" title="九、工具类中屏蔽构造函数"></a>九、工具类中屏蔽构造函数</h2><blockquote>
<p>工具类是一堆静态字段和函数的集合，其不应该被实例化；但是，Java 为每个没有明确定义构造函数的类添加了一个隐式公有构造函数，为了避免不必要的实例化，应该显式定义私有构造函数来屏蔽这个隐式公有构造函数。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//工具类构造函数反例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(PasswordUtils<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CRYPT_ALGO = <span class="string">"PBEWithMD5AndDES"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptPassword</span><span class="params">(String aPassword)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PasswordUtils(aPassword).encrypt();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//工具类构造函数正例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(PasswordUtils<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义私有构造函数来屏蔽这个隐式公有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PasswordUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CRYPT_ALGO = <span class="string">"PBEWithMD5AndDES"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptPassword</span><span class="params">(String aPassword)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PasswordUtils(aPassword).encrypt();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="十、删除多余的异常捕获并跑出"><a href="#十、删除多余的异常捕获并跑出" class="headerlink" title="十、删除多余的异常捕获并跑出"></a>十、删除多余的异常捕获并跑出</h2><blockquote>
<p>用catch 语句捕获异常后，若什么也不进行处理，就只是让异常重新抛出，这跟不捕获异常的效果一样，可以删除这块代码或添加别的处理。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多余异常反例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">fileReader</span><span class="params">(String fileName)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileName))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            builder.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//仅仅是重复抛异常 未作任何处理</span></span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多余异常正例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">fileReader</span><span class="params">(String fileName)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileName))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            builder.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">        <span class="comment">//删除多余的抛异常，或增加其他处理：</span></span><br><span class="line">        <span class="comment">/*catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">            return "fileReader exception";</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十一、字符串转化使用String-valueOf-value-代替””-value"><a href="#十一、字符串转化使用String-valueOf-value-代替””-value" class="headerlink" title="十一、字符串转化使用String.valueOf(value) 代替”” + value"></a>十一、字符串转化使用String.valueOf(value) 代替”” + value</h2><blockquote>
<p>把其它对象或类型转化为字符串时，使用<code>String.valueOf(value)</code> 比 <code>&quot;&quot;+value</code> 的效率更高。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把其它对象或类型转化为字符串反例：</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">520</span>;</span><br><span class="line"><span class="comment">// "" + value</span></span><br><span class="line">String strLove = <span class="string">""</span> + num;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把其它对象或类型转化为字符串正例：</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">520</span>;</span><br><span class="line"><span class="comment">// String.valueOf() 效率更高</span></span><br><span class="line">String strLove = String.valueOf(num);</span><br></pre></td></tr></table></figure>

<h2 id="十二、避免使用BigDecimal-double"><a href="#十二、避免使用BigDecimal-double" class="headerlink" title="十二、避免使用BigDecimal(double)"></a>十二、避免使用BigDecimal(double)</h2><blockquote>
<p><code>BigDecimal(double)</code>存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BigDecimal 反例    </span></span><br><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(<span class="number">0.11</span>D);</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BigDecimal 正例</span></span><br><span class="line">BigDecimal bigDecimal1 = bigDecimal.valueOf(<span class="number">0.11</span>D);</span><br></pre></td></tr></table></figure>

<h2 id="十三、返回空数组和集合而非-null"><a href="#十三、返回空数组和集合而非-null" class="headerlink" title="十三、返回空数组和集合而非 null"></a>十三、返回空数组和集合而非 null</h2><blockquote>
<p>若程序运行返回null，需要调用方强制检测null，否则就会抛出空指针异常；返回空数组或空集合，有效地避免了调用方因为未检测null 而抛出空指针异常的情况，还可以删除调用方检测null 的语句使代码更简洁。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回null 反例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result[] getResults() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Result&gt; <span class="title">getResultList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Result&gt; <span class="title">getResultMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回空数组和空集正例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result[] getResults() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Result&gt; <span class="title">getResultList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Result&gt; <span class="title">getResultMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十四、优先使用常量或确定值调用equals-方法"><a href="#十四、优先使用常量或确定值调用equals-方法" class="headerlink" title="十四、优先使用常量或确定值调用equals 方法"></a>十四、优先使用常量或确定值调用equals 方法</h2><blockquote>
<p>对象的equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals 方法。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用 equals 方法反例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileReader</span><span class="params">(String fileName)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可能抛空指针异常</span></span><br><span class="line">    <span class="keyword">return</span> fileName.equals(<span class="string">"Charming"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用 equals 方法正例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">fileReader</span><span class="params">(String fileName)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用常量或确定有值的对象来调用 equals 方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Charming"</span>.equals(fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//或使用：java.util.Objects.equals() 方法</span></span><br><span class="line">    <span class="keyword">return</span> Objects.equals(<span class="string">"Charming"</span>,fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十五、枚举的属性字段必须是私有且不可变"><a href="#十五、枚举的属性字段必须是私有且不可变" class="headerlink" title="十五、枚举的属性字段必须是私有且不可变"></a>十五、枚举的属性字段必须是私有且不可变</h2><blockquote>
<p>枚举通常被当做常量使用，如果枚举中存在公共属性字段或设置字段方法，那么这些枚举常量的属性很容易被修改；理想情况下，枚举中的属性字段是私有的，并在私有构造函数中赋值，没有对应的Setter 方法，最好加上final 修饰符。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SwitchStatus &#123;</span><br><span class="line">    <span class="comment">// 枚举的属性字段反例</span></span><br><span class="line">    DISABLED(<span class="number">0</span>, <span class="string">"禁用"</span>),</span><br><span class="line">    ENABLED(<span class="number">1</span>, <span class="string">"启用"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SwitchStatus</span><span class="params">(<span class="keyword">int</span> value, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SwitchStatus &#123;</span><br><span class="line">    <span class="comment">// 枚举的属性字段正例</span></span><br><span class="line">    DISABLED(<span class="number">0</span>, <span class="string">"禁用"</span>),</span><br><span class="line">    ENABLED(<span class="number">1</span>, <span class="string">"启用"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// final 修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SwitchStatus</span><span class="params">(<span class="keyword">int</span> value, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有Setter 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十六、String-split-String-regex-部分关键字需要转译"><a href="#十六、String-split-String-regex-部分关键字需要转译" class="headerlink" title="十六、String.split(String regex)部分关键字需要转译"></a>十六、String.split(String regex)部分关键字需要转译</h2><blockquote>
<p>使用字符串String的split 方法时，传入的分隔字符串是正则表达式，则部分关键字（比如<code>.[]()|</code>等）需要转义。</p>
</blockquote>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String.split(String regex) 反例</span></span><br><span class="line">String[] split = <span class="string">"a.ab.abc"</span>.split(<span class="string">"."</span>);</span><br><span class="line">System.out.println(Arrays.toString(split));   <span class="comment">// 结果为[]</span></span><br><span class="line"></span><br><span class="line">String[] split1 = <span class="string">"a|ab|abc"</span>.split(<span class="string">"|"</span>);</span><br><span class="line">System.out.println(Arrays.toString(split1));  <span class="comment">// 结果为["a", "|", "a", "b", "|", "a", "b", "c"]</span></span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String.split(String regex) 正例</span></span><br><span class="line"><span class="comment">// . 需要转译</span></span><br><span class="line">String[] split2 = <span class="string">"a.ab.abc"</span>.split(<span class="string">"\\."</span>);</span><br><span class="line">System.out.println(Arrays.toString(split2));  <span class="comment">// 结果为["a", "ab", "abc"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// | 需要转译</span></span><br><span class="line">String[] split3 = <span class="string">"a|ab|abc"</span>.split(<span class="string">"\\|"</span>);</span><br><span class="line">System.out.println(Arrays.toString(split3));  <span class="comment">// 结果为["a", "ab", "abc"]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2019/10/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="查看Linux版本"><a href="#查看Linux版本" class="headerlink" title="查看Linux版本"></a>查看Linux版本</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/centos-release</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以查看所有用户的列表</span></span><br><span class="line">cat /etc/passwd</span><br><span class="line"><span class="comment"># 查看用户组</span></span><br><span class="line">cat /etc/group</span><br><span class="line"><span class="comment"># 查看当前登录用户的组内成员</span></span><br><span class="line">groups</span><br><span class="line"><span class="comment"># 查看gliethttp用户所在的组,以及组内成员</span></span><br><span class="line">groups gliethttp</span><br><span class="line"><span class="comment"># 查看当前登录用户名</span></span><br><span class="line">whoami</span><br></pre></td></tr></table></figure>

<h1 id="查看支持的Shell类型"><a href="#查看支持的Shell类型" class="headerlink" title="查看支持的Shell类型"></a>查看支持的Shell类型</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<h1 id="修改IP"><a href="#修改IP" class="headerlink" title="修改IP"></a>修改IP</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过修改配置文件</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"><span class="comment"># 重启网络</span></span><br><span class="line">service network restart</span><br><span class="line"><span class="comment"># 查看改动后的效果</span></span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<ul>
<li><p>指定IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IPADDR=192.168.0.230 #静态IP</span><br><span class="line">GATEWAY=192.168.0.1 #默认网关</span><br><span class="line">NETMASK=255.255.255.0 #子网掩码</span><br><span class="line">DNS1=192.168.0.1 #DNS 配置</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动获取IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=dhcp</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure>
<h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h1></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 更改权限</span><br><span class="line">o 所有者 g 组 o 其他</span><br><span class="line">r--4 w--2 x--1</span><br><span class="line">-R 处理指定目录以及其子目录下的所有文件</span><br><span class="line"></span><br><span class="line">chmod u+x,g+x index.html</span><br><span class="line">chmod 755 index.html</span><br><span class="line">chmod -R o+x fa</span><br></pre></td></tr></table></figure>

<h1 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown 将指定文件的拥有者改为指定的用户或组</span><br><span class="line"></span><br><span class="line">chown [选项]... [所有者][:[组]] 文件...</span><br><span class="line"></span><br><span class="line">-R 处理指定目录以及其子目录下的所有文件</span><br><span class="line"></span><br><span class="line">chown weblogic:bea index.html </span><br><span class="line">chown -R weblogic:bea test1</span><br></pre></td></tr></table></figure>

<h1 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看使用某端口的进程</span></span><br><span class="line">lsof -i:8090</span><br><span class="line">netstat -ap|grep 8090</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看到进程id之后，使用netstat命令查看其占用的端口</span></span><br><span class="line">netstat -nap|grep 7779</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看PID</span></span><br><span class="line">ps -aux|grep chat.js| grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure>

<h1 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup 加 &amp;大家都知道是后台运行并把stdout输出到文件nohup.out中。其实&amp;是后台运行的命令。</span><br><span class="line"></span><br><span class="line">一般都是在linux下nohup格式：</span><br><span class="line"></span><br><span class="line">nohup command_line</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">nohup command_line &amp;</span><br><span class="line"></span><br><span class="line">这之间的差别是带&amp;的命令行，即使terminal关闭，或者电脑死机程序依然运行（前提是你把程序递交到服务器上）；</span><br><span class="line"></span><br><span class="line">它把标准输出（STDOUT）和标准错误（STDERR）结果输出到nohup.txt文件这个看似很方便，但是当输出很大的时候，nohup.txt文件会非常大，或者多个后台命令的时候大家都会输出到nohup.txt文件，不利于查找结果和调试程序。</span><br><span class="line"></span><br><span class="line">所以能够重定向输出会非常方便。下面要介绍标准输出，标准输入 和标准错误了。</span><br><span class="line"></span><br><span class="line">其实我门一直都在用，只是没有注意到，</span><br><span class="line"></span><br><span class="line">比如</span><br><span class="line"></span><br><span class="line">\&gt;.&#x2F;command.sh &gt; output</span><br><span class="line"></span><br><span class="line">\#这其中的&gt;就是标准输出符号，其实是 1&gt;output 的缩写</span><br><span class="line"></span><br><span class="line">\&gt;.&#x2F;command.sh 2&gt; output</span><br><span class="line"></span><br><span class="line">＃这里的2&gt;就是将标准错误输出到output文件里。</span><br><span class="line"></span><br><span class="line">而0&lt; 则是标准输入了。</span><br><span class="line"></span><br><span class="line">下面步入正题，重定向后台命令</span><br><span class="line"></span><br><span class="line">\&gt;nohup .&#x2F;command.sh &gt; output 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">ls xxx &gt;out.txt 2&gt;&amp;1, 实际上可换成 ls xxx 1&gt;out.txt 2&gt;&amp;1；重定向符号&gt;默认是1,错误和输出都传到out.txt了。</span><br><span class="line"></span><br><span class="line">解释：前面的nohup 和后面的&amp;我想大家都能明白了把。</span><br><span class="line"></span><br><span class="line">主要是中间的 2&gt;&amp;1的意思</span><br><span class="line"></span><br><span class="line">这个意思是把标准错误（2）重定向到标准输出中（1），而标准输出又导入文件output里面，</span><br><span class="line"></span><br><span class="line">所以结果是标准错误和标准输出都导入文件output里面了。</span><br><span class="line"></span><br><span class="line">至于为什么需要将标准错误重定向到标准输出的原因，那就归结为标准错误没有缓冲区，而stdout有。</span><br><span class="line"></span><br><span class="line">这就会导致 &gt;output 2&gt;output 文件output被两次打开，而stdout和stderr将会竞争覆盖，这肯定不是我门想要的.</span><br><span class="line"></span><br><span class="line">这就是为什么有人会写成：</span><br><span class="line"></span><br><span class="line">nohup .&#x2F;command.sh &gt;output 2&gt;output出错的原因了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\##########################</span><br><span class="line"></span><br><span class="line">最后谈一下&#x2F;dev&#x2F;null文件的作用</span><br><span class="line"></span><br><span class="line">这是一个无底洞，任何东西都可以定向到这里，但是却无法打开。</span><br><span class="line"></span><br><span class="line">所以一般很大的stdou和stderr当你不关心的时候可以利用stdout和stderr定向到这里&gt;.&#x2F;command.sh &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h1 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h1><ul>
<li><code>ps -aux</code></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">USER: 行程拥有者 </span><br><span class="line">PID: pid </span><br><span class="line">%CPU: 占用的 CPU 使用率 </span><br><span class="line">%MEM: 占用的内存使用率 </span><br><span class="line">VSZ: 占用的虚拟内存大小，申请内存值</span><br><span class="line">RSS: 占用的内存大小 ，实际使用的物理内存</span><br><span class="line">TTY: 终端的次要装置号码 (minor device number <span class="keyword">of</span> tty) </span><br><span class="line">STAT: 该行程的状态: </span><br><span class="line">D: 不可中断的静止 (通悸□□缜b进行 I/O 动作) </span><br><span class="line">R: 正在执行中 </span><br><span class="line">S: 静止状态 </span><br><span class="line">T: 暂停执行 </span><br><span class="line">Z: 不存在但暂时无法消除 </span><br><span class="line">W: 没有足够的内存分页可分配 </span><br><span class="line">&lt;: 高优先序的行程 </span><br><span class="line">N: 低优先序的行程 </span><br><span class="line">L: 有内存分页分配并锁在内存内 (实时系统或捱A I/O) </span><br><span class="line">START: 行程开始时间 </span><br><span class="line">TIME: 执行的时间 </span><br><span class="line">COMMAND:所执行的指令</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>ps aux | sort -k3nr |head -n 10</code> 按照消耗CPU前10排序的进程</p>
</li>
<li><p><code>ps aux | sort -k4nr |head -n 10</code> 按照消耗内存前10排序的进程</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort [-bcdfimMnr][-o&lt;输出文件&gt;][-t&lt;分隔字符&gt;][+&lt;起始栏位&gt;-&lt;结束栏位&gt;][--help][--verison][文件]</span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong>：</p>
<ul>
<li><p>-b 忽略每行前面开始出的空格字符。</p>
</li>
<li><p>-c 检查文件是否已经按照顺序排序。</p>
</li>
<li><p>-d 排序时，处理英文字母、数字及空格字符外，忽略其他的字符。</p>
</li>
<li><p>-f 排序时，将小写字母视为大写字母。</p>
</li>
<li><p>-i 排序时，除了040至176之间的ASCII字符外，忽略其他的字符。</p>
</li>
<li><p>-m 将几个排序好的文件进行合并。</p>
</li>
<li><p>-M 将前面3个字母依照月份的缩写进行排序。</p>
</li>
<li><p>-n 依照数值的大小排序。</p>
</li>
<li><p>-o&lt;输出文件&gt; 将排序后的结果存入指定的文件。</p>
</li>
<li><p>-r 以相反的顺序来排序。</p>
</li>
<li><p>-t&lt;分隔字符&gt; 指定排序时所用的栏位分隔字符。</p>
</li>
<li><p>+&lt;起始栏位&gt;-&lt;结束栏位&gt; 以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。</p>
</li>
<li><p>–help 显示帮助。</p>
</li>
<li><p>–version 显示版本信息。</p>
</li>
</ul>
<h1 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h1><ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 example.rpm 包</span></span><br><span class="line">rpm -i example.rpm </span><br><span class="line"><span class="comment"># 安装 example.rpm 包并在安装过程中显示正在安装的文件信息</span></span><br><span class="line">rpm -iv example.rpm </span><br><span class="line"><span class="comment"># 安装 example.rpm 包并在安装过程中显示正在安装的文件信息及安装进度</span></span><br><span class="line">rpm -ivh example.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li>卸载</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps 要卸载的软件包</span><br></pre></td></tr></table></figure>

<ul>
<li>查询系统已安装的软件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -q 软件名</span><br></pre></td></tr></table></figure>

<ul>
<li>查看系统中所有已经安装的包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa</span><br><span class="line">rpm -qa |more</span><br><span class="line">rpm -qa |grep abc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qpl mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li>查看安装包时间</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qi</span><br></pre></td></tr></table></figure>

<ul>
<li>查看安装包路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ql</span><br></pre></td></tr></table></figure>

<ul>
<li>按时间顺序列出rpm包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -q --all --last</span><br></pre></td></tr></table></figure>

<h1 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar filename.tar Dirname</span><br><span class="line">-c 创建新文件,</span><br><span class="line">-f 通常必选</span><br><span class="line">-v 操作过程显示到显示器</span><br><span class="line">-x 还原备份文件</span><br><span class="line">-r 追加文件到备份文件中</span><br><span class="line">-z 打包压缩---调用gzip</span><br><span class="line"></span><br><span class="line"><span class="comment">#打包当前目录下的所有文件</span></span><br><span class="line">tar -cvf 20161226.tar *</span><br><span class="line"><span class="comment">#还原tar包</span></span><br><span class="line">tar -xvf 20161226.tar</span><br><span class="line"><span class="comment">#把file文件追加到tar中</span></span><br><span class="line">tar -rvf 2016.1226.tar file</span><br><span class="line"><span class="comment">#打包后以gizp压缩</span></span><br><span class="line">tar -zcvf 20161226.tar.gz</span><br><span class="line"><span class="comment">#解压缩</span></span><br><span class="line">tar -zxvf 20161226.tar.gz</span><br></pre></td></tr></table></figure>

<h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><blockquote>
<p>全称为 Yellow dog Updater Modified，它是一个在线的软件安装命令。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum源配置路径</span></span><br><span class="line">/etc/yum.repos.d</span><br><span class="line"><span class="comment"># 重新配置后需要生效</span></span><br><span class="line">yum cleancache</span><br><span class="line">yum makecache</span><br><span class="line">yum list</span><br><span class="line">yum list installed</span><br><span class="line">yum search</span><br><span class="line">yum remove</span><br></pre></td></tr></table></figure>

<h1 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有打开的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="comment">#添加（--permanent永久生效，没有此参数重启后失效）</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent    </span><br><span class="line"><span class="comment">#重新载入</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line"><span class="comment">#批量开放端口</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=100-500/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=100-500/udp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line">service  iptables status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">service  iptables stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">chkconfig iptables off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br><span class="line">service iptables restart  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久关闭后重启</span></span><br><span class="line">chkconfig iptables on</span><br></pre></td></tr></table></figure>

<h1 id="which"><a href="#which" class="headerlink" title="which"></a>which</h1><p>which命令的作用是在PATH变量指定的路径中搜索某个系统命令的位置并且返回第一个搜索结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: /usr/bin/<span class="built_in">which</span> [options] [--] COMMAND [...]</span><br><span class="line">Write the full path of COMMAND(s) to standard output.</span><br><span class="line"></span><br><span class="line">  --version, -[vV] Print version and <span class="built_in">exit</span> successfully.</span><br><span class="line">  --<span class="built_in">help</span>,          Print this <span class="built_in">help</span> and <span class="built_in">exit</span> successfully.</span><br><span class="line">  --skip-dot       Skip directories <span class="keyword">in</span> PATH that start with a dot.</span><br><span class="line">  --skip-tilde     Skip directories <span class="keyword">in</span> PATH that start with a tilde.</span><br><span class="line">  --show-dot       Don<span class="string">'t expand a dot to current directory in output.</span></span><br><span class="line"><span class="string">  --show-tilde     Output a tilde for HOME directory for non-root.</span></span><br><span class="line"><span class="string">  --tty-only       Stop processing options on the right if not on tty.</span></span><br><span class="line"><span class="string">  --all, -a        Print all matches in PATH, not just the first</span></span><br><span class="line"><span class="string">  --read-alias, -i Read list of aliases from stdin.</span></span><br><span class="line"><span class="string">  --skip-alias     Ignore option --read-alias; don'</span>t <span class="built_in">read</span> stdin.</span><br><span class="line">  --<span class="built_in">read</span>-functions Read bash <span class="built_in">functions</span> from stdin.</span><br><span class="line">  --skip-functions Ignore option --<span class="built_in">read</span>-functions; don<span class="string">'t read stdin.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Recommended use is to write the output of (alias; declare -f) to standard</span></span><br><span class="line"><span class="string">input, so that which can show aliases and bash functions. See which(1) for</span></span><br><span class="line"><span class="string">examples.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If the options --read-alias and/or --read-functions are specified then the</span></span><br><span class="line"><span class="string">output can be a full alias or function definition, optionally followed by</span></span><br><span class="line"><span class="string">the full path of each command used inside of those.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Report bugs to &lt;which-bugs@gnu.org&gt;.</span></span><br></pre></td></tr></table></figure>

<h1 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h1><blockquote>
<p>centos7</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl [OPTIONS...] COMMAND ...</span><br><span class="line"></span><br><span class="line">Query or change system hostname.</span><br><span class="line"></span><br><span class="line">  -h --<span class="built_in">help</span>              Show this <span class="built_in">help</span></span><br><span class="line">     --version           Show package version</span><br><span class="line">     --no-ask-password   Do not prompt <span class="keyword">for</span> password</span><br><span class="line">  -H --host=[USER@]HOST  Operate on remote host</span><br><span class="line">  -M --machine=CONTAINER Operate on <span class="built_in">local</span> container</span><br><span class="line">     --transient         Only <span class="built_in">set</span> transient hostname</span><br><span class="line">     --static            Only <span class="built_in">set</span> static hostname</span><br><span class="line">     --pretty            Only <span class="built_in">set</span> pretty hostname</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  status                 Show current hostname settings</span><br><span class="line">  <span class="built_in">set</span>-hostname NAME      Set system hostname</span><br><span class="line">  <span class="built_in">set</span>-icon-name NAME     Set icon name <span class="keyword">for</span> host</span><br><span class="line">  <span class="built_in">set</span>-chassis NAME       Set chassis <span class="built_in">type</span> <span class="keyword">for</span> host</span><br><span class="line">  <span class="built_in">set</span>-deployment NAME    Set deployment environment <span class="keyword">for</span> host</span><br><span class="line">  <span class="built_in">set</span>-location NAME      Set location <span class="keyword">for</span> host</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl <span class="built_in">set</span>-hostname name</span><br><span class="line">hostnamectl status</span><br></pre></td></tr></table></figure>

<h1 id="查看磁盘占用"><a href="#查看磁盘占用" class="headerlink" title="查看磁盘占用"></a>查看磁盘占用</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -sh *</span><br><span class="line">du -sh /var/lib/mysql</span><br></pre></td></tr></table></figure>

<h1 id="某某人的心得"><a href="#某某人的心得" class="headerlink" title="某某人的心得"></a>某某人的心得</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/g'</span> /etc/selinux/config  <span class="comment">#关闭selinux</span></span><br><span class="line">sed -i <span class="string">'s/#GSSAPIAuthentication yes/GSSAPIAuthentication no/g'</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i <span class="string">'s/#UseDNS yes/UseDNS no/g'</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i <span class="string">'s/BOOTPROTO="dhcp"/BOOTPROTO="static"/g'</span> /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"IPADDR='192.168.99.2'"</span>  &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"PREFIX=21"</span> &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"GATEWAY='192.168.100.1'"</span> &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"DNS1='219.141.136.10'"</span> &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">set</span>-default multi-user.target</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown数学公式语法</title>
    <url>/2020/03/21/Markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h2><ol>
<li>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：$xyz$</li>
<li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：$$xyz$$</li>
</ol>
<h2 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h2><ol>
<li>上标符号，符号：<code>^</code>，如：$x^4$</li>
<li>下标符号，符号：<code>_</code>，如：$x_1$</li>
<li>组合符号，符号：<code>{}</code>，如：${16}<em>{8}O{2+}</em>{2}$</li>
</ol>
<h2 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h2><ol>
<li>汉字形式，符号：<code>\mbox{}</code>，如：$V_{\mbox{初始}}$</li>
<li>字体控制，符号：<code>\displaystyle</code>，如：$\displaystyle \frac{x+y}{y+z}$</li>
<li>下划线符号，符号：<code>\underline</code>，如：$\underline{x+y}$</li>
<li>标签，符号<code>\tag{数字}</code>，如：$\tag{11}$</li>
<li>上大括号，符号：<code>\overbrace{算式}</code>，如：$\overbrace{a+b+c+d}^{2.0}$</li>
<li>下大括号，符号：<code>\underbrace{算式}</code>，如：$a+\underbrace{b+c}_{1.0}+d$</li>
<li>上位符号，符号：<code>\stacrel{上位符号}{基位符号}</code>，如：$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</li>
</ol>
<h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><ol>
<li>两个quad空格，符号：<code>\qquad</code>，如：$x \qquad y$</li>
<li>quad空格，符号：<code>\quad</code>，如：$x \quad y$</li>
<li>大空格，符号<code>\</code>，如：$x \ y$</li>
<li>中空格，符号<code>\:</code>，如：$x : y$</li>
<li>小空格，符号<code>\,</code>，如：$x , y$</li>
<li>没有空格，符号``，如：$xy$</li>
<li>紧贴，符号<code>\!</code>，如：$x ! y$</li>
</ol>
<h2 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h2><ol>
<li>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</li>
<li>中括号，符号：<code>[]</code>，如：$[x+y]$</li>
<li>大括号，符号：<code>\{ \}</code>，如：${x+y}$</li>
<li>自适应括号，符号：<code>\left \right</code>，如：$\left(x\right)$，$\left(x{yz}\right)$</li>
<li>组合公式，符号：<code>{上位公式 \choose 下位公式}</code>，如：${n+1 \choose k}={n \choose k}+{n \choose k-1}$</li>
<li>组合公式，符号：<code>{上位公式 \atop 下位公式}</code>，如：$\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots$</li>
</ol>
<h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><ol>
<li>加法运算，符号：<code>+</code>，如：$x+y=z$</li>
<li>减法运算，符号：<code>-</code>，如：$x-y=z$</li>
<li>加减运算，符号：<code>\pm</code>，如：$x \pm y=z$</li>
<li>减甲运算，符号：<code>\mp</code>，如：$x \mp y=z$</li>
<li>乘法运算，符号：<code>\times</code>，如：$x \times y=z$</li>
<li>点乘运算，符号：<code>\cdot</code>，如：$x \cdot y=z$</li>
<li>星乘运算，符号：<code>\ast</code>，如：$x \ast y=z$</li>
<li>除法运算，符号：<code>\div</code>，如：$x \div y=z$</li>
<li>斜法运算，符号：<code>/</code>，如：$x/y=z$</li>
<li>分式表示，符号：<code>\frac{分子}{分母}</code>，如：$\frac{x+y}{y+z}$</li>
<li>分式表示，符号：<code>{分子} \voer {分母}</code>，如：${x+y} \over {y+z}$</li>
<li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li>
</ol>
<h2 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h2><ol>
<li>平均数运算，符号：<code>\overline{算式}</code>，如：$\overline{xyz}$</li>
<li>开二次方运算，符号：<code>\sqrt</code>，如：$\sqrt x$</li>
<li>开方运算，符号：<code>\sqrt[开方数]{被开方数}</code>，如：$\sqrt[3]{x+y}$</li>
<li>对数运算，符号：<code>\log</code>，如：$\log(x)$</li>
<li>极限运算，符号：<code>\lim</code>，如：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>极限运算，符号：<code>\displaystyle \lim</code>，如：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>求和运算，符号：<code>\sum</code>，如：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>求和运算，符号：<code>\displaystyle \sum</code>，如：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>积分运算，符号：<code>\int</code>，如：$\int^{\infty}_{0}{xdx}$</li>
<li>积分运算，符号：<code>\displaystyle \int</code>，如：$\displaystyle \int^{\infty}_{0}{xdx}$</li>
<li>微分运算，符号：<code>\partial</code>，如：$\frac{\partial x}{\partial y}$</li>
<li>矩阵表示，符号：<code>\begin{matrix} \end{matrix}</code>，如：$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</li>
</ol>
<h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ol>
<li>等于运算，符号：<code>=</code>，如：$x+y=z$</li>
<li>大于运算，符号：<code>&gt;</code>，如：$x+y&gt;z$</li>
<li>小于运算，符号：<code>&lt;</code>，如：$x+y&lt;z$</li>
<li>大于等于运算，符号：<code>\geq</code>，如：$x+y \geq z$</li>
<li>小于等于运算，符号：<code>\leq</code>，如：$x+y \leq z$</li>
<li>不等于运算，符号：<code>\neq</code>，如：$x+y \neq z$</li>
<li>不大于等于运算，符号：<code>\ngeq</code>，如：$x+y \ngeq z$</li>
<li>不大于等于运算，符号：<code>\not\geq</code>，如：$x+y \not\geq z$</li>
<li>不小于等于运算，符号：<code>\nleq</code>，如：$x+y \nleq z$</li>
<li>不小于等于运算，符号：<code>\not\leq</code>，如：$x+y \not\leq z$</li>
<li>约等于运算，符号：<code>\approx</code>，如：$x+y \approx z$</li>
<li>恒定等于运算，符号：<code>\equiv</code>，如：$x+y \equiv z$</li>
</ol>
<h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><ol>
<li>属于运算，符号：<code>\in</code>，如：$x \in y$</li>
<li>不属于运算，符号：<code>\notin</code>，如：$x \notin y$</li>
<li>不属于运算，符号：<code>\not\in</code>，如：$x \not\in y$</li>
<li>子集运算，符号：<code>\subset</code>，如：$x \subset y$</li>
<li>子集运算，符号：<code>\supset</code>，如：$x \supset y$</li>
<li>真子集运算，符号：<code>\subseteq</code>，如：$x \subseteq y$</li>
<li>非真子集运算，符号：<code>\subsetneq</code>，如：$x \subsetneq y$</li>
<li>真子集运算，符号：<code>\supseteq</code>，如：$x \supseteq y$</li>
<li>非真子集运算，符号：<code>\supsetneq</code>，如：$x \supsetneq y$</li>
<li>非子集运算，符号：<code>\not\subset</code>，如：$x \not\subset y$</li>
<li>非子集运算，符号：<code>\not\supset</code>，如：$x \not\supset y$</li>
<li>并集运算，符号：<code>\cup</code>，如：$x \cup y$</li>
<li>交集运算，符号：<code>\cap</code>，如：$x \cap y$</li>
<li>差集运算，符号：<code>\setminus</code>，如：$x \setminus y$</li>
<li>同或运算，符号：<code>\bigodot</code>，如：$x \bigodot y$</li>
<li>同与运算，符号：<code>\bigotimes</code>，如：$x \bigotimes y$</li>
<li>实数集合，符号：<code>\mathbb{R}</code>，如：<code>\mathbb{R}</code></li>
<li>自然数集合，符号：<code>\mathbb{Z}</code>，如：<code>\mathbb{Z}</code></li>
<li>空集，符号：<code>\emptyset</code>，如：$\emptyset$</li>
</ol>
<h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><ol>
<li>无穷，符号：<code>\infty</code>，如：$\infty$</li>
<li>虚数，符号：<code>\imath</code>，如：$\imath$</li>
<li>虚数，符号：<code>\jmath</code>，如：$\jmath$</li>
<li>数学符号，符号<code>\hat{a}</code>，如：$\hat{a}$</li>
<li>数学符号，符号<code>\check{a}</code>，如：$\check{a}$</li>
<li>数学符号，符号<code>\breve{a}</code>，如：$\breve{a}$</li>
<li>数学符号，符号<code>\tilde{a}</code>，如：$\tilde{a}$</li>
<li>数学符号，符号<code>\bar{a}</code>，如：$\bar{a}$</li>
<li>矢量符号，符号<code>\vec{a}</code>，如：$\vec{a}$</li>
<li>数学符号，符号<code>\acute{a}</code>，如：$\acute{a}$</li>
<li>数学符号，符号<code>\grave{a}</code>，如：$\grave{a}$</li>
<li>数学符号，符号<code>\mathring{a}</code>，如：$\mathring{a}$</li>
<li>一阶导数符号，符号<code>\dot{a}</code>，如：$\dot{a}$</li>
<li>二阶导数符号，符号<code>\ddot{a}</code>，如：$\ddot{a}$</li>
<li>上箭头，符号：<code>\uparrow</code>，如：$\uparrow$</li>
<li>上箭头，符号：<code>\Uparrow</code>，如：$\Uparrow$</li>
<li>下箭头，符号：<code>\downarrow</code>，如：$\downarrow$</li>
<li>下箭头，符号：<code>\Downarrow</code>，如：$\Downarrow$</li>
<li>左箭头，符号：<code>\leftarrow</code>，如：$\leftarrow$</li>
<li>左箭头，符号：<code>\Leftarrow</code>，如：$\Leftarrow$</li>
<li>右箭头，符号：<code>\rightarrow</code>，如：$\rightarrow$</li>
<li>右箭头，符号：<code>\Rightarrow</code>，如：$\Rightarrow$</li>
<li>底端对齐的省略号，符号：<code>\ldots</code>，如：$1,2,\ldots,n$</li>
<li>中线对齐的省略号，符号：<code>\cdots</code>，如：$x_1^2 + x_2^2 + \cdots + x_n^2$</li>
<li>竖直对齐的省略号，符号：<code>\vdots</code>，如：$\vdots$</li>
<li>斜对齐的省略号，符号：<code>\ddots</code>，如：$\ddots$</li>
</ol>
<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table>
<thead>
<tr>
<th>字母</th>
<th>实现</th>
<th>字母</th>
<th>实现</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td><code>A</code></td>
<td>α</td>
<td><code>\alhpa</code></td>
</tr>
<tr>
<td>B</td>
<td><code>B</code></td>
<td>β</td>
<td><code>\beta</code></td>
</tr>
<tr>
<td>Γ</td>
<td><code>\Gamma</code></td>
<td>γ</td>
<td><code>\gamma</code></td>
</tr>
<tr>
<td>Δ</td>
<td><code>\Delta</code></td>
<td>δ</td>
<td><code>\delta</code></td>
</tr>
<tr>
<td>E</td>
<td><code>E</code></td>
<td>ϵ</td>
<td><code>\epsilon</code></td>
</tr>
<tr>
<td>Z</td>
<td><code>Z</code></td>
<td>ζ</td>
<td><code>\zeta</code></td>
</tr>
<tr>
<td>H</td>
<td><code>H</code></td>
<td>η</td>
<td><code>\eta</code></td>
</tr>
<tr>
<td>Θ</td>
<td><code>\Theta</code></td>
<td>θ</td>
<td><code>\theta</code></td>
</tr>
<tr>
<td>I</td>
<td><code>I</code></td>
<td>ι</td>
<td><code>\iota</code></td>
</tr>
<tr>
<td>K</td>
<td><code>K</code></td>
<td>κ</td>
<td><code>\kappa</code></td>
</tr>
<tr>
<td>Λ</td>
<td><code>\Lambda</code></td>
<td>λ</td>
<td><code>\lambda</code></td>
</tr>
<tr>
<td>M</td>
<td><code>M</code></td>
<td>μ</td>
<td><code>\mu</code></td>
</tr>
<tr>
<td>N</td>
<td><code>N</code></td>
<td>ν</td>
<td><code>\nu</code></td>
</tr>
<tr>
<td>Ξ</td>
<td><code>\Xi</code></td>
<td>ξ</td>
<td><code>\xi</code></td>
</tr>
<tr>
<td>O</td>
<td><code>O</code></td>
<td>ο</td>
<td><code>\omicron</code></td>
</tr>
<tr>
<td>Π</td>
<td><code>\Pi</code></td>
<td>π</td>
<td><code>\pi</code></td>
</tr>
<tr>
<td>P</td>
<td><code>P</code></td>
<td>ρ</td>
<td><code>\rho</code></td>
</tr>
<tr>
<td>Σ</td>
<td><code>\Sigma</code></td>
<td>σ</td>
<td><code>\sigma</code></td>
</tr>
<tr>
<td>T</td>
<td><code>T</code></td>
<td>τ</td>
<td><code>\tau</code></td>
</tr>
<tr>
<td>Υ</td>
<td><code>\Upsilon</code></td>
<td>υ</td>
<td><code>\upsilon</code></td>
</tr>
<tr>
<td>Φ</td>
<td><code>\Phi</code></td>
<td>ϕ</td>
<td><code>\phi</code></td>
</tr>
<tr>
<td>X</td>
<td><code>X</code></td>
<td>χ</td>
<td><code>\chi</code></td>
</tr>
<tr>
<td>Ψ</td>
<td><code>\Psi</code></td>
<td>ψ</td>
<td><code>\psi</code></td>
</tr>
<tr>
<td>Ω</td>
<td><code>\v</code></td>
<td>ω</td>
<td><code>\omega</code></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>Maven常用命令</title>
    <url>/2019/12/09/Maven%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="将jar安装到本地Maven仓库"><a href="#将jar安装到本地Maven仓库" class="headerlink" title="将jar安装到本地Maven仓库"></a>将jar安装到本地Maven仓库</h1><blockquote>
<p>转自：<a href="https://blog.csdn.net/ShuSheng0007/article/details/78547264/" target="_blank" rel="noopener">https://blog.csdn.net/ShuSheng0007/article/details/78547264/</a></p>
</blockquote>
<h2 id="第一种方案"><a href="#第一种方案" class="headerlink" title="第一种方案"></a>第一种方案</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=&lt;path-to-file&gt; -DgroupId=&lt;group-id&gt; -DartifactId=&lt;artifact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=&lt;packaging&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;path-to-file&gt;</code>: 要安装的JAR的本地路径</li>
<li><code>&lt;group-id&gt;</code>：要安装的JAR的Group Id</li>
<li><code>&lt;artifact-id&gt;</code>: 要安装的JAR的 Artificial Id</li>
<li><code>&lt;version&gt;</code>: JAR 版本</li>
<li><code>&lt;packaging&gt;</code>: 打包类型，例如JAR</li>
</ul>
<blockquote>
<p>最好在<code>pom.xml</code>文件所在的目录运行上述命令，个人经验不在根目录运行有时会安装不成功</p>
</blockquote>
<p>执行上述命令后，我们就可以在<code>pom.xml</code>文件中引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baidu.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bdpush<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：这种方法弊端较大，程序的可维护性以及移植性较低。例如当你改变本地<strong>Maven</strong>仓库时需要重新安装。如果引用此<code>JAR</code>的项目是多人协调工作的项目，则每个人都要将其安装在自己的本地仓库。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>可以将此<code>JAR</code>文件放在工程的根目录下，让其随着项目走，然后在<code>pom.xml</code>文件中使用<code>maven-install-plugin</code>在<code>Maven</code>初始化阶段完成安装。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>initialize<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-file<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baidu.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bdpush<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;basedir&#125;/lib/bdpush-3.0.1.ja<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>${basedir}</code>表示<code>pom.xml</code>文件所在的目录</p>
<h2 id="第二种方案"><a href="#第二种方案" class="headerlink" title="第二种方案"></a>第二种方案</h2><p>第二种方法比较粗暴简单，具体为将依赖设置为系统域，通过完全路径引用。例如要引用的<code>JAR</code>文件在 <code>&lt;PROJECT_ROOT_FOLDER&gt;/lib</code>下，那么使用如下方法添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baidu.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bdpush<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/lib/bdpush-3.0.1.ja<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>${basedir}</code>表示<code>pom.xml</code>文件所在的目录，例如你的<code>JAR</code>文件在D盘下的<code>jarLibs</code>里面，就将<code>${basedir}</code>替换为<code>D:/jarLibs</code>即可。</p>
<blockquote>
<p>这种方法我自己在SpringBoot项目中打包成war文件时，没有成功打包到里面</p>
</blockquote>
<h2 id="第三种方案"><a href="#第三种方案" class="headerlink" title="第三种方案"></a>第三种方案</h2><p>第三种方案与第一种差不多，不同的是<code>JAR</code>文件被安装在一个单独的仓库里。这个本地仓库建在你项目的根目录下，随着项目走。例如</p>
<p>1：我们在<code>${basedir}</code>（<code>pom.xml</code>文件所在路径）目录下建立一个叫<code>maven-repository</code>的本地仓库。</p>
<p>2：使用如下命令安装我们要引用的<code>JAR</code>到此仓库中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -Dfile=&lt;path-to-file&gt; -DgroupId=&lt;group-id&gt; -DartifactId=&lt;artifact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=jar -Durl=file:./maven-repository/ -DrepositoryId=maven-repository -DupdateReleaseInfo=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>3：在<code>pom.xml</code>中如下使用</p>
<ul>
<li>申明仓库</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>file:///$&#123;project.basedir&#125;/maven-repository<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>然后添加引用</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baidu.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bdpush<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zhang ~]<span class="comment"># mvn --help</span></span><br><span class="line"></span><br><span class="line">usage: mvn [options] [&lt;goal(s)&gt;] [&lt;phase(s)&gt;]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -am,--also-make                        If project list is specified, also</span><br><span class="line">                                        build projects required by the</span><br><span class="line">                                        list</span><br><span class="line"> -amd,--also-make-dependents            If project list is specified, also</span><br><span class="line">                                        build projects that depend on</span><br><span class="line">                                        projects on the list</span><br><span class="line"> -B,--batch-mode                        Run <span class="keyword">in</span> non-interactive (batch)</span><br><span class="line">                                        mode (disables output color)</span><br><span class="line"> -b,--builder &lt;arg&gt;                     The id of the build strategy to</span><br><span class="line">                                        use</span><br><span class="line"> -C,--strict-checksums                  Fail the build <span class="keyword">if</span> checksums don<span class="string">'t</span></span><br><span class="line"><span class="string">                                        match</span></span><br><span class="line"><span class="string"> -c,--lax-checksums                     Warn if checksums don'</span>t match</span><br><span class="line"> -cpu,--check-plugin-updates            Ineffective, only kept <span class="keyword">for</span></span><br><span class="line">                                        backward compatibility</span><br><span class="line"> -D,--define &lt;arg&gt;                      Define a system property</span><br><span class="line"> -e,--errors                            Produce execution error messages</span><br><span class="line"> -emp,--encrypt-master-password &lt;arg&gt;   Encrypt master security password</span><br><span class="line"> -ep,--encrypt-password &lt;arg&gt;           Encrypt server password</span><br><span class="line"> -f,--file &lt;arg&gt;                        Force the use of an alternate POM</span><br><span class="line">                                        file (or directory with pom.xml)</span><br><span class="line"> -fae,--fail-at-end                     Only fail the build afterwards;</span><br><span class="line">                                        allow all non-impacted builds to</span><br><span class="line">                                        <span class="built_in">continue</span></span><br><span class="line"> -ff,--fail-fast                        Stop at first failure <span class="keyword">in</span></span><br><span class="line">                                        reactorized builds</span><br><span class="line"> -fn,--fail-never                       NEVER fail the build, regardless</span><br><span class="line">                                        of project result</span><br><span class="line"> -gs,--global-settings &lt;arg&gt;            Alternate path <span class="keyword">for</span> the global</span><br><span class="line">                                        settings file</span><br><span class="line"> -gt,--global-toolchains &lt;arg&gt;          Alternate path <span class="keyword">for</span> the global</span><br><span class="line">                                        toolchains file</span><br><span class="line"> -h,--<span class="built_in">help</span>                              Display <span class="built_in">help</span> information</span><br><span class="line"> -l,--<span class="built_in">log</span>-file &lt;arg&gt;                    Log file <span class="built_in">where</span> all build output</span><br><span class="line">                                        will go (disables output color)</span><br><span class="line"> -llr,--legacy-local-repository         Use Maven 2 Legacy Local</span><br><span class="line">                                        Repository behaviour, ie no use of</span><br><span class="line">                                        _remote.repositories. Can also be</span><br><span class="line">                                        activated by using</span><br><span class="line">                                        -Dmaven.legacyLocalRepo=<span class="literal">true</span></span><br><span class="line"> -N,--non-recursive                     Do not recurse into sub-projects</span><br><span class="line"> -npr,--no-plugin-registry              Ineffective, only kept <span class="keyword">for</span></span><br><span class="line">                                        backward compatibility</span><br><span class="line"> -npu,--no-plugin-updates               Ineffective, only kept <span class="keyword">for</span></span><br><span class="line">                                        backward compatibility</span><br><span class="line"> -nsu,--no-snapshot-updates             Suppress SNAPSHOT updates</span><br><span class="line"> -ntp,--no-transfer-progress            Do not display transfer progress</span><br><span class="line">                                        when downloading or uploading</span><br><span class="line"> -o,--offline                           Work offline</span><br><span class="line"> -P,--activate-profiles &lt;arg&gt;           Comma-delimited list of profiles</span><br><span class="line">                                        to activate</span><br><span class="line"> -pl,--projects &lt;arg&gt;                   Comma-delimited list of specified</span><br><span class="line">                                        reactor projects to build instead</span><br><span class="line">                                        of all projects. A project can be</span><br><span class="line">                                        specified by [groupId]:artifactId</span><br><span class="line">                                        or by its relative path</span><br><span class="line"> -q,--quiet                             Quiet output - only show errors</span><br><span class="line"> -rf,--resume-from &lt;arg&gt;                Resume reactor from specified</span><br><span class="line">                                        project</span><br><span class="line"> -s,--settings &lt;arg&gt;                    Alternate path <span class="keyword">for</span> the user</span><br><span class="line">                                        settings file</span><br><span class="line"> -t,--toolchains &lt;arg&gt;                  Alternate path <span class="keyword">for</span> the user</span><br><span class="line">                                        toolchains file</span><br><span class="line"> -T,--threads &lt;arg&gt;                     Thread count, <span class="keyword">for</span> instance 2.0C</span><br><span class="line">                                        <span class="built_in">where</span> C is core multiplied</span><br><span class="line"> -U,--update-snapshots                  Forces a check <span class="keyword">for</span> missing</span><br><span class="line">                                        releases and updated snapshots on</span><br><span class="line">                                        remote repositories</span><br><span class="line"> -up,--update-plugins                   Ineffective, only kept <span class="keyword">for</span></span><br><span class="line">                                        backward compatibility</span><br><span class="line"> -v,--version                           Display version information</span><br><span class="line"> -V,--show-version                      Display version information</span><br><span class="line">                                        WITHOUT stopping build</span><br><span class="line"> -X,--debug                             Produce execution debug output</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn package \</span><br><span class="line">	-Dmaven.repo.local&#x3D;C:\Users\lenovo\.m2\Repository4 \</span><br><span class="line">	-Dmaven.test.skip&#x3D;true \</span><br><span class="line">	-f pom.xml</span><br></pre></td></tr></table></figure>

<ul>
<li>-Dmaven.repo.local 强制使用本地源</li>
<li>-Dmaven.test.skip 跳过单测</li>
<li>-f 指定配置文件</li>
</ul>
]]></content>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL5.7基于GTID及多线程主从复制</title>
    <url>/2020/04/17/MySQL57%E5%9F%BA%E4%BA%8EGTID%E5%8F%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p>转自：<a href="https://www.sundayle.com/mysql-gtid-relication/" target="_blank" rel="noopener">https://www.sundayle.com/mysql-gtid-relication/</a></p>
</blockquote>
<h1 id="MySQL主从同步原理"><a href="#MySQL主从同步原理" class="headerlink" title="MySQL主从同步原理"></a>MySQL主从同步原理</h1><blockquote>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/replication-gtids.html" target="_blank" rel="noopener">参考文档</a></p>
</blockquote>
<p>MySQL主从同步是在MySQL主从复制(Master-Slave Replication)基础上实现的，通过设置在Master MySQL上的binlog(使其处于打开状态)，Slave MySQL上通过一个I/O线程从Master MySQL上读取binlog，然后传输到Slave MySQL的中继日志中，然后Slave MySQL的SQL线程从中继日志中读取中继日志，然后应用到Slave MySQL的数据库中。这样实现了主从数据同步功能。</p>
<h1 id="MySQL中主从复制的优点"><a href="#MySQL中主从复制的优点" class="headerlink" title="MySQL中主从复制的优点"></a>MySQL中主从复制的优点</h1><ul>
<li>横向扩展解决方案<br>在多个从库之间扩展负载以提高性能。在这种环境中，所有写入和更新在主库上进行。但是，读取可能发生在一个或多个从库上。该模型可以提高写入的性能（由于主库专用于更新），同时在多个从库上读取，可以大大提高读取速度。</li>
<li>数据安全性<br>由于主库数据被复制到从库，从库可以暂停复制过程，可以在从库上运行备份服务，而不会破坏对应的主库数据。</li>
<li>分析<br>可以在主库上创建实时数据，而信息分析可以在从库上进行，而不会影响主服务器的性能。</li>
</ul>
<h1 id="GTID概念"><a href="#GTID概念" class="headerlink" title="GTID概念"></a>GTID概念</h1><p>从 MySQL 5.6.5 开始新增了一种基于 GTID 的复制方式。通过 GTID保证了每个在主库上提交的事务在集群中有一个唯一的ID。这种方式强化了数据库的主备一致性，故障恢复以及容错能力。<br>在原来基于二进制日志的复制中，从库需要告知主库要从哪个偏移量进行增量同步，如果指定错误会造成数据的遗漏，从而造成数据的不一致。借助GTID，在发生主备切换的情况下，MySQL的其它从库可以自动在新主库上找到正确的复制位置，这大大简化了复杂复制拓扑下集群的维护，也减少了人为设置复制位置发生误操作的风险。另外，基于GTID的复制可以忽略已经执行过的事务，减少了数据发生不一致的风险。</p>
<h2 id="什么是GTID"><a href="#什么是GTID" class="headerlink" title="什么是GTID"></a>什么是GTID</h2><p>GTID (Global Transaction ID) 是对于一个已提交事务的编号，并且是一个全局唯一的编号。 GTID 实际上是由UUID+TID 组成的。其中 UUID 是一个 MySQL 实例的唯一标识。TID代表了该实例上已经提交的事务数量，并且随着事务提交单调递增。<br>下面是一个GTID的具体形式：</p>
<p>3E11FA47-71CA-11E1-9E33-C80AA9429562:23，冒号分割前边为uuid，后边为TID。</p>
<p>GTID 集合可以包含来自多个 MySQL 实例的事务，它们之间用逗号分隔。如果来自同一MySQL实例的事务序号有多个范围区间，各组范围之间用冒号分隔。</p>
<p>例如：</p>
<p>e6954592-8dba-11e6-af0e-fa163e1cf111:1-5:11-18,</p>
<p>e6954592-8dba-11e6-af0e-fa163e1cf3f2:1-27</p>
<p>可以使用show master status实时查看当前事务执行数。</p>
<h2 id="GTID的作用"><a href="#GTID的作用" class="headerlink" title="GTID的作用"></a>GTID的作用</h2><p>GTID采用了新的复制协议，旧协议是，首先从服务器上在一个特定的偏移量位置连接到主服务器上一个给定的二进制日志文件，然后主服务器再从给定的连接点开始发送所有的事件。<br>新协议有所不同，支持以全局统一事务ID (GTID)为基础的复制。当在主库上提交事务或者被从库应用时，可以定位和追踪每一个事务。GTID复制是全部以事务为基础，使得检查主从一致性变得非常简单。如果所有主库上提交的事务也同样提交到从库上，一致性就得到了保证。</p>
<h2 id="GTID的工作原理"><a href="#GTID的工作原理" class="headerlink" title="GTID的工作原理"></a>GTID的工作原理</h2><p>①当一个事务在主库端执行并提交时，产生GTID，一同记录到binlog日志中。<br>②binlog传输到slave,并存储到slave的relaylog后，读取这个GTID的这个值设置gtid_next变量，即告诉Slave，下一个要执行的GTID值。<br>③sql线程从relay log中获取GTID，然后对比slave端的binlog是否有该GTID。<br>④如果有记录，说明该GTID的事务已经执行，slave会忽略。<br>⑤如果没有记录，slave就会执行该GTID事务，并记录该GTID到自身的binlog，<br>在读取执行事务前会先检查其他session持有该GTID，确保不被重复执行。<br>⑥在解析过程中会判断是否有主键，如果没有就用二级索引，如果没有就用全部扫描。</p>
<h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><p>系统：CentOS 7<br>数据库：MySQL 5.7<br>主库：192.168.11.31<br>从库：192.168.11.32</p>
<h1 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;3306</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line"></span><br><span class="line">#服务器ID</span><br><span class="line">server-id&#x3D;169</span><br><span class="line">#二进制日志文件名</span><br><span class="line">log-bin&#x3D;master-bin</span><br><span class="line">#强烈建议，其他格式可能造成数据不一致</span><br><span class="line">binlog_format &#x3D; row</span><br><span class="line">#是否记录从服务器同步数据动作</span><br><span class="line">log-slave-updates &#x3D; 1</span><br><span class="line">#启用gitd功能</span><br><span class="line">gtid-mode &#x3D; on</span><br><span class="line">#开启强制GTID一致性</span><br><span class="line">enforce-gtid-consistency &#x3D; 1</span><br><span class="line">#记录IO线程读取已经读取到的master binlog位置，用于slave宕机后IO线程根据文件中的POS点重新拉取binlog日志</span><br><span class="line">master-info-repository &#x3D; TABLE</span><br><span class="line">#记录SQL线程读取Master binlog的位置，用于slave宕机后根据文件中记录的pos点恢复Sql线程</span><br><span class="line">relay-log-info-repository &#x3D; TABLE</span><br><span class="line">#启用确保无信息丢失；任何一个事务提交后, 将二进制日志的文件名及事件位置记录到文件中</span><br><span class="line">sync-master-info &#x3D; 1</span><br><span class="line">#设定从服务器的复制线程数；0表示关闭多线程复制功能</span><br><span class="line">slave-parallel-workers &#x3D; 2</span><br><span class="line">#设置binlog校验算法（循环冗余校验码）</span><br><span class="line">binlog-checksum &#x3D; CRC32</span><br><span class="line">#设置主服务器是否校验</span><br><span class="line">master-verify-checksum &#x3D; 1</span><br><span class="line">#设置从服务器是否校验</span><br><span class="line">slave-sql-verify-checksum &#x3D; 1</span><br><span class="line">#用于在二进制日志记录事件相关的信息，可降低故障排除的复杂度</span><br><span class="line">binlog-rows-query-log_events &#x3D; 1</span><br><span class="line">#保证master crash safe，该参数必须设置为1</span><br><span class="line">sync_binlog &#x3D; 1</span><br><span class="line">#保证master crash safe，该参数必须设置为1</span><br><span class="line">innodb_flush_log_at_trx_commit &#x3D; 1</span><br></pre></td></tr></table></figure>

<h1 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server_id &#x3D; 32</span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line">binlog_format &#x3D; row</span><br><span class="line">gtid-mode &#x3D; on</span><br><span class="line">enforce-gtid-consistency &#x3D; 1</span><br><span class="line">master-info-repository &#x3D; TABLE</span><br><span class="line">relay-log-info-repository &#x3D; TABLE</span><br><span class="line">sync-master-info &#x3D; 1</span><br><span class="line">slave-parallel-workers &#x3D; 4</span><br><span class="line">binlog-checksum &#x3D; CRC32</span><br><span class="line">master-verify-checksum &#x3D; 1</span><br><span class="line">slave-sql-verify-checksum &#x3D; 1</span><br><span class="line">binlog-rows-query-log_events &#x3D; 1</span><br><span class="line">#sync_binlog &#x3D; 1</span><br><span class="line">#innodb_flush_log_at_trx_commit &#x3D; 1</span><br><span class="line">log-slave-updates &#x3D; 0 				# crash safe slave 5.6版本需要开启</span><br><span class="line">relay_log_recovery &#x3D; 1  			# crash safe slave</span><br><span class="line">read_only&#x3D;on        				#设置一般用户为只读模式</span><br><span class="line">super_read_only&#x3D;on      			#设置super（root）用户为只读模式</span><br><span class="line">#tx_read_only&#x3D;on     				#设置事务为只读模式</span><br></pre></td></tr></table></figure>

<h1 id="主库权限设置"><a href="#主库权限设置" class="headerlink" title="主库权限设置"></a>主库权限设置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql &gt; grant replication slave on *.* to slave@&#39;192.168.11.32&#39; identified by &#39;slave123&#39;;</span><br><span class="line">mysql &gt; flush privileges;</span><br></pre></td></tr></table></figure>

<h1 id="自动同步连接主库-方法一"><a href="#自动同步连接主库-方法一" class="headerlink" title="自动同步连接主库(方法一)"></a>自动同步连接主库(方法一)</h1><p>适用于master也是新建不久的情况。</p>
<ol>
<li>如果你的master所有的binlog还在。可以安装slave，slave直接change master to到master端。</li>
<li>原理是直接获取master所有的GTID并执行。</li>
<li>优点：简单方便。</li>
<li>缺点：如果binlog太多，数据完全同步需要时间较长，并且master一开始就启用了GTUD。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to </span><br><span class="line">master_host&#x3D;&#39;192.168.11.31&#39;,</span><br><span class="line">master_user&#x3D;&#39;slave&#39;,</span><br><span class="line">master_password&#x3D;&#39;slave123&#39;,</span><br><span class="line">master_port&#x3D;3306,</span><br><span class="line">master_auto_position&#x3D;1</span><br><span class="line">#master_auto_position&#x3D;1 从库自动找同步点</span><br></pre></td></tr></table></figure>

<h1 id="备份导入连接主库-方法二"><a href="#备份导入连接主库-方法二" class="headerlink" title="备份导入连接主库(方法二)"></a>备份导入连接主库(方法二)</h1><ol>
<li>Xtrabackup_binlog_info文件中，包含<code>global.gtid_purged=&#39;XXXXXX:XXXX&#39;</code>的信息。</li>
<li>然后到slave去手工的 <code>SET @@GLOBAL.GTID_PURGED=&#39;XXXXXX:XXXX&#39;</code>。</li>
<li>恢复备份，开启change master to 命令。</li>
</ol>
<h1 id="备份导入连接主库-方法三"><a href="#备份导入连接主库-方法三" class="headerlink" title="备份导入连接主库(方法三)"></a>备份导入连接主库(方法三)</h1><p>适用于拥有较大数据的情况。（推荐）</p>
<ol>
<li>通过master或者其他slave的备份搭建新的slave。</li>
<li>原理：获取master的数据和这些数据对应的GTID范围，然后通过slave设置master_auto_position=1,自动同步，跳过备份包含的gtid。</li>
<li>缺点：相对来说有点复杂。</li>
</ol>
<h2 id="将主库设为只读模式"><a href="#将主库设为只读模式" class="headerlink" title="将主库设为只读模式"></a>将主库设为只读模式</h2><p>注：生产环境会影响不能写入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush tables with read lock;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global read_only&#x3D;on;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="主库使用mysqldump导出"><a href="#主库使用mysqldump导出" class="headerlink" title="主库使用mysqldump导出"></a>主库使用mysqldump导出</h2><p>可以同时导出多个数据库，如music、record</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump --databases &lt;数据库名&gt;  --single-transaction --order-by-primary -r &lt;备份文件名&gt; --routines -h&lt;服务器地址&gt;  -P&lt;端口号&gt; -u&lt;用户名&gt; -p&lt;密码&gt;</span><br><span class="line">mysqldump --default-character-set&#x3D;utf8mb4 --single-transaction --triggers --routines --events --hex-blob --databases muisc record &gt; music_record.sql</span><br></pre></td></tr></table></figure>

<p>记录GTID_PURGED</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -r &quot;GLOBAL.GTID_PURGED&quot; music_record.sql</span><br><span class="line">SET @@GLOBAL.GTID_PURGED&#x3D;&#39;3cdb9ce6-0d7e-11e8-abe4-001517b5a5f0:1-698887&#39;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：mysql服务器内置的库包括mysql库和test库不需要导出。</p>
</blockquote>
<h2 id="将主库设为可读写模式"><a href="#将主库设为可读写模式" class="headerlink" title="将主库设为可读写模式"></a>将主库设为可读写模式</h2><p>数据库导出完成后将主库重新设为可读写模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global read_only&#x3D;off;</span><br><span class="line">mysql&gt; unlock tables;</span><br></pre></td></tr></table></figure>

<h2 id="从库数据导入"><a href="#从库数据导入" class="headerlink" title="从库数据导入"></a>从库数据导入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#mysql&gt; create database &#96;music&#96;;</span><br><span class="line">#mysql -u root -p muisc &lt; &#x2F;root&#x2F;music.sql</span><br><span class="line">mysql -u root -p &lt; &#x2F;root&#x2F;music_record.sql </span><br><span class="line">mysql&gt; reset slave all;</span><br><span class="line">mysql&gt; reset master;</span><br><span class="line">mysql&gt; SET @@GLOBAL.GTID_PURGED&#x3D;&#39;3cdb9ce6-0d7e-11e8-abe4-001517b5a5f0:1-698887&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="从库连接主库"><a href="#从库连接主库" class="headerlink" title="从库连接主库"></a>从库连接主库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to </span><br><span class="line">master_host&#x3D;&#39;192.168.11.31&#39;,</span><br><span class="line">master_user&#x3D;&#39;slave&#39;,</span><br><span class="line">master_password&#x3D;&#39;slave123&#39;,</span><br><span class="line">master_port&#x3D;3306,</span><br><span class="line">master_auto_position&#x3D;1;</span><br></pre></td></tr></table></figure>

<h1 id="从库启动复制线程"><a href="#从库启动复制线程" class="headerlink" title="从库启动复制线程"></a>从库启动复制线程</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure>

<h1 id="从库查看复制状态"><a href="#从库查看复制状态" class="headerlink" title="从库查看复制状态"></a>从库查看复制状态</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.11.31</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: master-bin.000002</span><br><span class="line">          Read_Master_Log_Pos: 149375983</span><br><span class="line">               Relay_Log_File: db2-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 321</span><br><span class="line">        Relay_Master_Log_File: master-bin.000002</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 149375983</span><br><span class="line">              Relay_Log_Space: 526</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 31</span><br><span class="line">                  Master_UUID: 834449ff-4487-11e8-8b27-000c294b06ca</span><br><span class="line">             Master_Info_File: mysql.slave_master_info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<p>检查主从复制通信状态</p>
<p>Slave_IO_State #从站的当前状态<br>Slave_IO_Running： Yes #读取主程序二进制日志的I/O线程是否正在运行<br>Slave_SQL_Running： Yes #执行读取主服务器中二进制日志事件的SQL线程是否正在运行。与I/O线程一样<br>Seconds_Behind_Master #是否为0，0就是已经同步了</p>
<p>如果再次查询状态仍然 发现Slave_IO_Running 或者Slave_SQL_Running 不同时为YES,尝试执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br><span class="line">mysql&gt; reset slave;</span><br><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure>

<h1 id="主库查看状态"><a href="#主库查看状态" class="headerlink" title="主库查看状态"></a>主库查看状态</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+-------------------+-----------+--------------+------------------+--------------------------------------------+</span><br><span class="line">| File              | Position  | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                          |</span><br><span class="line">+-------------------+-----------+--------------+------------------+--------------------------------------------+</span><br><span class="line">| master-bin.000002 | 149375983 |              |                  | 834449ff-4487-11e8-8b27-000c294b06ca:1-254 |</span><br><span class="line">+-------------------+-----------+--------------+------------------+--------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave hosts;</span><br><span class="line">+-----------+------+------+-----------+--------------------------------------+</span><br><span class="line">| Server_id | Host | Port | Master_id | Slave_UUID                           |</span><br><span class="line">+-----------+------+------+-----------+--------------------------------------+</span><br><span class="line">|        32 |      | 3306 |        31 | 68303133-4489-11e8-84e9-000c293eaee6 |</span><br><span class="line">+-----------+------+------+-----------+--------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show global variables like &#39;%gtid%&#39;;</span><br><span class="line">+----------------------------------+--------------------------------------------+</span><br><span class="line">| Variable_name                    | Value                                      |</span><br><span class="line">+----------------------------------+--------------------------------------------+</span><br><span class="line">| binlog_gtid_simple_recovery      | ON                                         |</span><br><span class="line">| enforce_gtid_consistency         | ON                                         |</span><br><span class="line">| gtid_executed                    | 834449ff-4487-11e8-8b27-000c294b06ca:1-255 |</span><br><span class="line">| gtid_executed_compression_period | 1000                                       |</span><br><span class="line">| gtid_mode                        | ON                                         |</span><br><span class="line">| gtid_owned                       |                                            |</span><br><span class="line">| gtid_purged                      |                                            |</span><br><span class="line">| session_track_gtids              | OFF                                        |</span><br><span class="line">+----------------------------------+--------------------------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show binlog events;</span><br><span class="line">mysql&gt; show binlog events in &#39;master-bin.000001&#39;;</span><br><span class="line">mysql&gt; show master logs;mysql&gt; show processlist</span><br><span class="line">mysql&gt; show full processlist;</span><br></pre></td></tr></table></figure>

<h1 id="GTID与crash-safe-slave"><a href="#GTID与crash-safe-slave" class="headerlink" title="GTID与crash safe slave"></a>GTID与crash safe slave</h1><p>查看错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from performance_schema.replication_applier_status_by_worker where LAST_ERROR_NUMBER&#x3D;1007\G;</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.azure.cn/zh-cn/mysql/mysql-database-data-replication" target="_blank" rel="noopener">https://docs.azure.cn/zh-cn/mysql/mysql-database-data-replication</a><br><a href="https://segmentfault.com/a/1190000010362745#articleHeader1" target="_blank" rel="noopener">GTID原理和一些问题解答</a><br><a href="http://www.cnblogs.com/zhoujinyi/p/5704567.html" target="_blank" rel="noopener">MySQL 5.7 Replication 相关新功能说明</a></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL安装部署</title>
    <url>/2019/10/22/MySQL%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h1><blockquote>
<p><a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">下载地址</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/windows-install-archive.html" target="_blank" rel="noopener">官方部署文档</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\Develop\mysql-8.0.18-winx64&gt;bin\mysqld.exe --defaults-file=D:\Develop\mysql-8.0.18-winx64\my.ini --initialize --console</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2019-10-24T08:47:21.549556Z 0 [System] [MY-013169] [Server] D:\Develop\mysql-8.0</span><br><span class="line">.18-winx64\bin\mysqld.exe (mysqld 8.0.18) initializing of server <span class="keyword">in</span> progress as</span><br><span class="line">process 7612</span><br><span class="line">2019-10-24T08:47:34.895556Z 5 [Note] [MY-010454] [Server] A temporary password i</span><br><span class="line">s generated <span class="keyword">for</span> root@localhost: 6<span class="comment">#gL3pJ#qyh.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装服务</span></span><br><span class="line">D:\Develop\mysql-8.0.18-winx64&gt;bin\mysqld.exe install</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<h1 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h1><h2 id="Yum安装"><a href="#Yum安装" class="headerlink" title="Yum安装"></a>Yum安装</h2><blockquote>
<p> <a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">下载链接</a>  <a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html" target="_blank" rel="noopener">参考文档</a></p>
</blockquote>
<p>下载mysql80-community-release-el7-3.noarch.rpm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装rpm源</span></span><br><span class="line">sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑，找到Enable to use MySQL 5.7，改为enabled=1，其他版本设置成enabled=0，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同理这个方法可以按照别的版本</span></span><br><span class="line">vim /etc/yum.repos.d/mysql-community.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查只有MySQL 5.7启动</span></span><br><span class="line">yum repolist enabled | grep mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装MySQL</span></span><br><span class="line">sudo yum install mysql-community-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动MySQL服务器</span></span><br><span class="line">sudo service mysqld start</span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL服务器的状态</span></span><br><span class="line">sudo service mysqld status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看超级用户的密码</span></span><br><span class="line">sudo grep 'temporary password' /var/log/mysqld.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认mysql的root用户不支持远程访问，开启访问权限</span></span><br><span class="line">GRANT ALL ON *.* TO root@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码设置级别</span></span><br><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_length=1;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启3306端口</span></span><br><span class="line">firewall-cmd --add-port=3306/tcp</span><br><span class="line"><span class="meta">#</span><span class="bash"> (a)数据库目录</span></span><br><span class="line">/var/lib/mysql/</span><br><span class="line"><span class="meta">#</span><span class="bash"> (b)配置文件</span></span><br><span class="line">/usr/share /mysql（mysql.server命令及配置文件） </span><br><span class="line">/etc/my.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash"> (c)相关命令</span></span><br><span class="line">/usr/bin（mysqladmin mysqldump等命令）</span><br><span class="line"><span class="meta">#</span><span class="bash"> (d)启动脚本</span></span><br><span class="line">/etc/rc.d/init.d/（启动脚本文件mysql的目录）</span><br></pre></td></tr></table></figure>

<h2 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h2><blockquote>
<p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">下载地址</a> <a href="https://dev.mysql.com/doc/refman/5.7/en/binary-installation.html" target="_blank" rel="noopener">参考文档</a></p>
</blockquote>
<p>下载文件： mysql-5.7.28-linux-glibc2.12-x86_64.tar</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看包中内容</span></span><br><span class="line">tar -tvf mysql-5.7.28-linux-glibc2.12-x86_64.tar</span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql-test-5.7.28-linux-glibc2.12-x86_64.tar.gz</span></span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>Directory</th>
<th>Contents of Directory</th>
</tr>
</thead>
<tbody><tr>
<td><code>bin</code></td>
<td><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqld.html" target="_blank" rel="noopener"><strong>mysqld</strong></a> server, client and utility programs</td>
</tr>
<tr>
<td><code>docs</code></td>
<td>MySQL manual in Info format</td>
</tr>
<tr>
<td><code>man</code></td>
<td>Unix manual pages</td>
</tr>
<tr>
<td><code>include</code></td>
<td>Include (header) files</td>
</tr>
<tr>
<td><code>lib</code></td>
<td>Libraries</td>
</tr>
<tr>
<td><code>share</code></td>
<td>Error messages, dictionary, and SQL for database installation</td>
</tr>
<tr>
<td><code>support-files</code></td>
<td>Miscellaneous support files</td>
</tr>
</tbody></table>
<h3 id="创建用户、用户组"><a href="#创建用户、用户组" class="headerlink" title="创建用户、用户组"></a>创建用户、用户组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql -s /bin/false mysql</span><br></pre></td></tr></table></figure>

<h3 id="解压发行版文件"><a href="#解压发行版文件" class="headerlink" title="解压发行版文件"></a>解压发行版文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line"><span class="meta">#</span><span class="bash">tar zxvf /path/to/mysql-VERSION-OS.tar.gz 如果是.gz结尾</span></span><br><span class="line">tar xvf /path/to/mysql-VERSION-OS.tar</span><br></pre></td></tr></table></figure>

<h3 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 链接，这里建议使用全路径</span></span><br><span class="line">ln -s full-path-to-mysql-VERSION-OS mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压创建软链接，并且修改所属用户和组</span></span><br><span class="line">chown -R mysql:mysql mysql</span><br></pre></td></tr></table></figure>

<h3 id="创建并授权"><a href="#创建并授权" class="headerlink" title="创建并授权"></a>创建并授权</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd mysql</span><br><span class="line">mkdir mysql-files</span><br><span class="line">chown mysql:mysql mysql-files</span><br><span class="line">chmod 750 mysql-files</span><br></pre></td></tr></table></figure>

<h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc</span><br><span class="line">touch my.cnf</span><br><span class="line">chown root:root my.cnf</span><br><span class="line">chmod 644 my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">port=3306</span><br><span class="line">log-error=/usr/local/mysql/data/localhost.localdomain.err</span><br><span class="line">user=mysql</span><br><span class="line">secure_file_priv=/usr/local/mysql/mysql-files</span><br><span class="line">local_infile=OFF</span><br></pre></td></tr></table></figure>

<h3 id="初始化数据目录"><a href="#初始化数据目录" class="headerlink" title="初始化数据目录"></a>初始化数据目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line">mkdir data</span><br><span class="line">chmod 750 data</span><br><span class="line">chown mysql:mysql data</span><br></pre></td></tr></table></figure>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>  参数： –initialize 会生成一个随机密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/mysqld --initialize --user=mysql</span><br></pre></td></tr></table></figure>

<p>显示下面则初始化成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon mysql]# bin/mysqld --initialize --user=mysql</span><br><span class="line">2019-10-23T07:41:12.611481Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).</span><br><span class="line">2019-10-23T07:43:00.499738Z 0 [Warning] InnoDB: New log files created, LSN=45790</span><br><span class="line">2019-10-23T07:43:00.819667Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</span><br><span class="line">2019-10-23T07:43:00.919776Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: bd1531fb-f568-11e9-bc4b-46afd4d32e02.</span><br><span class="line">2019-10-23T07:43:00.958124Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.</span><br><span class="line">2019-10-23T07:43:02.482380Z 0 [Warning] CA certificate ca.pem is self signed.</span><br><span class="line">2019-10-23T07:43:02.643686Z 1 [Note] A temporary password is generated for root@localhost: Wsi!(otie8de</span><br></pre></td></tr></table></figure>

<h3 id="命令添加到环境变量中"><a href="#命令添加到环境变量中" class="headerlink" title="命令添加到环境变量中"></a>命令添加到环境变量中</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加 </span></span><br><span class="line">PATH=$PATH:/usr/local/mysql/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /var/log/mysql/</span><br><span class="line">touch /var/log/mysql/mysql.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果日志没内容，授权</span></span><br><span class="line">chown -R mysql:mysql /var/log/mysql/mysql.log</span><br></pre></td></tr></table></figure>

<h3 id="配置systemd"><a href="#配置systemd" class="headerlink" title="配置systemd"></a>配置systemd</h3><blockquote>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/using-systemd.html" target="_blank" rel="noopener">参考文档</a> <a href="https://dev.mysql.com/doc/mysql-secure-deployment-guide/8.0/en/secure-deployment-post-install.html" target="_blank" rel="noopener">通用二进制包安装指南</a></p>
</blockquote>
<ul>
<li>创建文件</li>
</ul>
<p>这两个路径任意一个都可以</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch /etc/systemd/system/mysqld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 建议创建到这个路径下面</span></span><br><span class="line">touch /usr/lib/systemd/system/mysqld.service</span><br></pre></td></tr></table></figure>

<p>这里注意pid的路径，写入下面内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=MySQL Server</span><br><span class="line"><span class="attr">Documentation</span>=man:mysqld(<span class="number">8</span>)</span><br><span class="line"><span class="attr">Documentation</span>=http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="attr">After</span>=syslog.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=mysql</span><br><span class="line"><span class="attr">Group</span>=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># Have mysqld write its state to the systemd notify socket</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"></span><br><span class="line"><span class="attr">PIDFile</span>=/var/run/mysql/mysqld.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable service start and stop timeout logic of systemd for mysqld service.</span></span><br><span class="line"><span class="attr">TimeoutSec</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start main service</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/mysql/bin/mysqld --daemonize --pid-file=/var/run/mysql/mysqld.pid <span class="variable">$MYSQLD_OPTS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use this to switch malloc implementation</span></span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/sysconfig/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets open_files_limit</span></span><br><span class="line"><span class="attr">LimitNOFILE</span> = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"></span><br><span class="line"><span class="attr">RestartPreventExitStatus</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set environment variable MYSQLD_PARENT_PID. This is required for restart.</span></span><br><span class="line"><span class="attr">Environment</span>=MYSQLD_PARENT_PID=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>重启</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<ul>
<li>操作</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl &#123;start|stop|restart|status&#125; mysqld</span><br></pre></td></tr></table></figure>

<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><blockquote>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-server.html" target="_blank" rel="noopener">参考文档</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">chmod +x /etc/init.d/mysql</span><br><span class="line">chkconfig --add mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 某些系统可能用下面命令 </span></span><br><span class="line">chkconfig --level 345 mysql on</span><br></pre></td></tr></table></figure>

<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;&#x2F;tmp&#x2F;mysql.sock&#39; (2)</span><br></pre></td></tr></table></figure>

<p>解决办法： <code>ln -s /var/lib/mysql/mysql.sock mysql.sock</code></p>
<hr>
<p>重启无法创建PID</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /var/run/mysql</span><br><span class="line">chown mysql:mysql -R /var/run/mysql</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 永久关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>

<h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h1><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/resetting-permissions.html" target="_blank" rel="noopener">忘记初始密码怎么办</a></li>
</ul>
<p>创建文件mysql-init.txt，写入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyNewPass&#39;;</span><br></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --init-file&#x3D;C:\\mysql-init.txt</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html" target="_blank" rel="noopener">MySQL同步</a></li>
</ul>
]]></content>
      <categories>
        <category>部署文档</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树详细介绍</title>
    <url>/2020/02/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>二叉树是一种树形结构，它的特点是每个结点至多只有两棵子树（即二叉树中不存在度大于2的结点），并且二叉树的子树有左右之分，其次序不能任意颠倒。</p>
<p><strong>度</strong>：结点拥有的子树数称为结点的度。</p>
<p><strong>终端结点</strong>：度为0的结点称为叶子或者终端结点。</p>
<p><strong>深度</strong>：树中结点的最大层次称为树的深度或高度。</p>
<p><strong>完全二叉树</strong>：可以对满二叉树的结点进行连续编号，约定编号从根结点起，自上而下，从左到右。深度为$k$的，有$n$个结点的二叉树，当且仅当其每一个结点都与深度为$k$的满二叉树编号从$1$至$n$一一对应时，称之为完全二叉树。</p>
<h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><ul>
<li>在二叉树的第$i$层上至多有$2^{i-1}$个结点($i \geq 1$)。</li>
<li>深度为$k$的二叉树至多有$2^k-1$个结点($k \geq 1$)。如果是$2^k-1$则为<strong>满二叉树</strong>。</li>
<li>对于任何一颗二叉树$T$，如果其终端结点树为$n_0$，度为2的结点树为$n_2$，则$n_0 = n_2 +1$</li>
<li>具有$n$个结点的完全二叉树，其深度k满足$ \log_{2}n&lt; k \leq \log_2n+1$，$k$的值其实就是$\log_2n+1$向下取整</li>
<li>如果对一颗有$n$个结点的完全二叉树的结点按层序编号，则对任一结点$i$($1\leq i \leq n$)，有<ul>
<li>如果$i = 1$，则结点是二叉树的根，无双亲；如果$i &gt; 1$，则其双亲结点$i/2$取整。</li>
<li>如果$2i &gt; n$，则结点$i$无左孩子（结点$i$为叶子结点）；否则其左孩子是结点$2i$。</li>
<li>如果$2i+1 &gt; n$，则结点无右孩子；否则其右孩子结点$2i+1$</li>
</ul>
</li>
</ul>
<h1 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h1><ol>
<li>顺序存储结构</li>
<li>链式存储结构</li>
</ol>
<h1 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h1><blockquote>
<p>学习网站： <a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p>
</blockquote>
<p>假如以L、D、R分别表示遍历左子树、访问根结点、遍历右子树，则可有DLR、LDR、LRD、DRL、RDL、RLD这6种遍历方式。若限定先左后右，则只有三种情况，分别称之为先（根）序遍历、中（根）序遍历、后（根）序遍历。基于二叉树的递归定义，可得下述遍历二叉树的递归算法定义。</p>
<ul>
<li><p><strong>先序遍历</strong>二叉树的操作定义为：</p>
<p>若二叉树为空，则空操作；否则</p>
</li>
</ul>
<ol>
<li>访问根结点；</li>
<li>先序遍历左子树；</li>
<li>先序遍历右子树。</li>
</ol>
<ul>
<li><p><strong>中序遍历</strong>二叉树的操作定义为：</p>
<p>若二叉树为空，则空操作；否则</p>
</li>
</ul>
<ol>
<li>中序遍历左子树；</li>
<li>访问根结点；</li>
<li>中序遍历右子树。</li>
</ol>
<ul>
<li><p><strong>后序遍历</strong>二叉树的操作定义为：</p>
<p>若二叉树为空，则空操作；否则</p>
</li>
</ul>
<ol>
<li>后序遍历左子树；</li>
<li>后序遍历右子树；</li>
<li>访问根结点。</li>
</ol>
<h2 id="定义二叉树"><a href="#定义二叉树" class="headerlink" title="定义二叉树"></a>定义二叉树</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">create</span><span class="params">(Integer[] nums, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        TreeNode top = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; nums.length) &#123;</span><br><span class="line">            Integer value = nums[index];</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            top = <span class="keyword">new</span> TreeNode(value);</span><br><span class="line">            top.left = create(nums, index * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">            top.right = create(nums, index * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> top;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 前序遍历 中--左--右(DLR)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(root.getData() + <span class="string">"-&gt;"</span>);</span><br><span class="line">        preorderTraversal(root.getLeftNode());</span><br><span class="line">        preorderTraversal(root.getRightNode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 中序遍历 左--中--右(LDR)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        inorderTraversal(root.getLeftNode());</span><br><span class="line">        System.out.println(root.getData() + <span class="string">"-&gt;"</span>);</span><br><span class="line">        inorderTraversal(root.getRightNode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 后序遍历 左--右--中(LRD)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        postorderTraversal(root.getLeftNode());</span><br><span class="line">        postorderTraversal(root.getRightNode());</span><br><span class="line">        System.out.println(root.getData() + <span class="string">"-&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="宽度优先搜索（BFS）"><a href="#宽度优先搜索（BFS）" class="headerlink" title="宽度优先搜索（BFS）"></a>宽度优先搜索（BFS）</h2><blockquote>
<p>相关：<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/er-cha-shu-de-ceng-ci-bian-li-by-leetcode/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/er-cha-shu-de-ceng-ci-bian-li-by-leetcode/</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; levels = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode node, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// start the current level</span></span><br><span class="line">        <span class="keyword">if</span> (levels.size() == level)</span><br><span class="line">            levels.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fulfil the current level</span></span><br><span class="line">        levels.get(level).add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// process child nodes for the next level</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)</span><br><span class="line">            helper(node.left, level + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)</span><br><span class="line">            helper(node.right, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> levels;</span><br><span class="line">        helper(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> levels;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; levels = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> levels;</span><br><span class="line"></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( !queue.isEmpty() ) &#123;</span><br><span class="line">            <span class="comment">// start the current level</span></span><br><span class="line">            levels.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// number of elements in the current level</span></span><br><span class="line">            <span class="keyword">int</span> level_length = queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level_length; ++i) &#123;</span><br><span class="line">                TreeNode node = queue.remove();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// fulfill the current level</span></span><br><span class="line">                levels.get(level).add(node.val);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// add child nodes of the current level</span></span><br><span class="line">                <span class="comment">// in the queue for the next level</span></span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// go to next level</span></span><br><span class="line">            level++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> levels;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="遍历图解"><a href="#遍历图解" class="headerlink" title="遍历图解"></a>遍历图解</h2><img src="/images/二叉树详细介绍/dfs.png" style="zoom:50%;" />

<h1 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h1><h2 id="什么是旋转"><a href="#什么是旋转" class="headerlink" title="什么是旋转"></a>什么是旋转</h2><img src="/images/二叉树详细介绍/rotate.png" style="zoom:50%;" />

<ul>
<li>左旋：是以节点的”右分支”为轴，进行逆时针旋转。我们将左旋操作定义为 left_rotate.</li>
<li>右旋：是以节点的“左分支”为轴，进行顺时针旋转。我们将右旋操作定义为 right_rotate.</li>
</ul>
<h2 id="为什么要旋转"><a href="#为什么要旋转" class="headerlink" title="为什么要旋转"></a>为什么要旋转</h2><p>在解释这个道理之前，我们先看看执行旋转后，二叉树中节点的深度有什么变化。在上图中，二叉树执行左旋后，a 分支所有节点的深度比以前多 1，b 分支保持不变，c 分支所有节点比以前少 1.</p>
<p>这就意味着，通过合适的左旋和右旋操作，我们可以调整二叉树的深度。另一方面，通过合适的左旋和右旋，我们可以把二叉树变换成任意的形状！</p>
<img src="/images/tree.png" style="zoom:35%;" />

<p>如上图，如何把二叉树通过若干次左旋和右旋操作变换成链，答案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">left_rotate(4);</span><br><span class="line">right_rotate(10);</span><br><span class="line">right_rotate(8);</span><br><span class="line">right_rotate(5);</span><br><span class="line">right_rotate(4);</span><br><span class="line">right_rotate(2);</span><br></pre></td></tr></table></figure>

<h2 id="旋转算法"><a href="#旋转算法" class="headerlink" title="旋转算法"></a>旋转算法</h2><ul>
<li>定义二叉树结构</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>旋转</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">leftRotate</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        TreeNode root = node.parent;</span><br><span class="line">        TreeNode x = node;</span><br><span class="line">        TreeNode y = node.right;</span><br><span class="line">        TreeNode b = node.right.left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.left == node) &#123;</span><br><span class="line">            root.left = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.right = y;</span><br><span class="line">        &#125;</span><br><span class="line">        y.parent = root;</span><br><span class="line"></span><br><span class="line">        x.right = b;</span><br><span class="line">        b.parent = x;</span><br><span class="line"></span><br><span class="line">        y.left = x;</span><br><span class="line">        x.parent = y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">rightRotate</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        TreeNode root = node.parent;</span><br><span class="line">        TreeNode y = node;</span><br><span class="line">        TreeNode x = node.left;</span><br><span class="line">        TreeNode b = node.left.right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.left == node) &#123;</span><br><span class="line">            root.left = x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.right = x;</span><br><span class="line">        &#125;</span><br><span class="line">        x.parent = root;</span><br><span class="line"></span><br><span class="line">        y.left = b;</span><br><span class="line">        b.parent = y;</span><br><span class="line"></span><br><span class="line">        x.right = y;</span><br><span class="line">        y.parent = x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TreeNode xx = <span class="keyword">new</span> TreeNode(<span class="string">"xx"</span>);</span><br><span class="line"></span><br><span class="line">        TreeNode x = <span class="keyword">new</span> TreeNode(<span class="string">"x"</span>);</span><br><span class="line">        TreeNode y = <span class="keyword">new</span> TreeNode(<span class="string">"y"</span>);</span><br><span class="line">        TreeNode a = <span class="keyword">new</span> TreeNode(<span class="string">"a"</span>);</span><br><span class="line">        TreeNode b = <span class="keyword">new</span> TreeNode(<span class="string">"b"</span>);</span><br><span class="line">        TreeNode c = <span class="keyword">new</span> TreeNode(<span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line">        xx.left = x;</span><br><span class="line">        x.parent = xx;</span><br><span class="line"></span><br><span class="line">        x.left = a;</span><br><span class="line">        a.parent = x;</span><br><span class="line"></span><br><span class="line">        x.right = y;</span><br><span class="line">        y.parent = x;</span><br><span class="line"></span><br><span class="line">        y.left = b;</span><br><span class="line">        b.parent = y;</span><br><span class="line"></span><br><span class="line">        y.right = c;</span><br><span class="line">        c.parent = y;</span><br><span class="line"></span><br><span class="line">        x = TreeUtil.leftRotate(x);</span><br><span class="line">        x = TreeUtil.rightRotate(x);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法相关</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制基础</title>
    <url>/2019/11/14/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="一-机器数和真值"><a href="#一-机器数和真值" class="headerlink" title="一. 机器数和真值"></a>一. 机器数和真值</h1><p>在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念.</p>
<h2 id="1、机器数"><a href="#1、机器数" class="headerlink" title="1、机器数"></a>1、机器数</h2><p>一个数在计算机中的二进制表示形式,  叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.</p>
<p>比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011 。</p>
<p>那么，这里的 00000011 和 10000011 就是机器数。</p>
<h2 id="2、真值"><a href="#2、真值" class="headerlink" title="2、真值"></a>2、真值</h2><blockquote>
<p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p>
</blockquote>
<p>例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1</p>
<h1 id="二-原码-反码-补码的基础概念和计算方法"><a href="#二-原码-反码-补码的基础概念和计算方法" class="headerlink" title="二. 原码, 反码, 补码的基础概念和计算方法"></a>二. 原码, 反码, 补码的基础概念和计算方法</h1><p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.</p>
<h2 id="1-原码"><a href="#1-原码" class="headerlink" title="1. 原码"></a>1. 原码</h2><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:</p>
<blockquote>
<p>[+1]原 = 0000 0001</p>
<p>[-1]原 = 1000 0001</p>
</blockquote>
<p>第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:</p>
<blockquote>
<p>[1111 1111 , 0111 1111]</p>
</blockquote>
<p>即</p>
<blockquote>
<p>[-127 , 127]</p>
</blockquote>
<p>原码是人脑最容易理解和计算的表示方式.</p>
<h2 id="2-反码"><a href="#2-反码" class="headerlink" title="2. 反码"></a>2. 反码</h2><p>反码的表示方法是:</p>
<p>正数的反码是其本身</p>
<p>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.</p>
<blockquote>
<p>[+1] = [00000001]原 = [00000001]反</p>
<p>[-1] = [10000001]原 = [11111110]反</p>
</blockquote>
<p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.</p>
<h2 id="3-补码"><a href="#3-补码" class="headerlink" title="3. 补码"></a>3. 补码</h2><p>补码的表示方法是:</p>
<p>正数的补码就是其本身</p>
<p>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</p>
<blockquote>
<p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p>
<p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p>
</blockquote>
<p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p>
<h2 id="4-理解"><a href="#4-理解" class="headerlink" title="4. 理解"></a>4. 理解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个字节8位</span><br><span class="line"></span><br><span class="line">* 譬如一个10进制数 27</span><br><span class="line">* 转成二进制 00011011</span><br><span class="line"></span><br><span class="line">-27 的二进制</span><br><span class="line">* 先计算原码： 00011011</span><br><span class="line">* 反码：      11100100</span><br><span class="line">* 补码：      11100101</span><br></pre></td></tr></table></figure>



<h1 id="三-为何要使用原码-反码和补码"><a href="#三-为何要使用原码-反码和补码" class="headerlink" title="三. 为何要使用原码, 反码和补码"></a>三. 为何要使用原码, 反码和补码</h1><p>在开始深入学习前, 我的学习建议是先”死记硬背”上面的原码, 反码和补码的表示方式以及计算方法.</p>
<p>现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数因为三种编码方式的结果都相同:</p>
<blockquote>
<p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p>
</blockquote>
<p>所以不需要过多解释. 但是对于负数:</p>
<blockquote>
<p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p>
</blockquote>
<p>可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</p>
<p>首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了.</p>
<p>于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p>
<p>计算十进制的表达式: 1-1=0</p>
<blockquote>
<p>1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2</p>
</blockquote>
<p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.</p>
<p>为了解决原码做减法的问题, 出现了反码:</p>
<p>计算十进制的表达式: 1-1=0</p>
<blockquote>
<p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0</p>
</blockquote>
<p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]原和[1000 0000]原两个编码表示0.</p>
<p>于是补码的出现, 解决了0的符号以及两个编码的问题:</p>
<blockquote>
<p>1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</p>
</blockquote>
<p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:</p>
<blockquote>
<p>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补</p>
</blockquote>
<p>-1-127的结果应该是-128, 在用补码运算的结果中, [1000 0000]补 就是-128. 但是注意因为实际上是使用以前的-0的补码来表示-128, 所以-128并没有原码和反码表示.(对-128的补码表示[1000 0000]补算出来的原码是[0000 0000]原, 这是不正确的)</p>
<p>使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127].</p>
<p>因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值.</p>
<h1 id="四-原码-反码-补码-再深入"><a href="#四-原码-反码-补码-再深入" class="headerlink" title="四. 原码, 反码, 补码 再深入"></a>四. 原码, 反码, 补码 再深入</h1><p>计算机巧妙地把符号位参与运算, 并且将减法变成了加法, 背后蕴含了怎样的数学原理呢?</p>
<p>将钟表想象成是一个1位的12进制数. 如果当前时间是6点, 我希望将时间设置成4点, 需要怎么做呢?我们可以:</p>
<blockquote>
<ol>
<li><p>往回拨2个小时: 6 - 2 = 4</p>
</li>
<li><p>往前拨10个小时: (6 + 10) mod 12 = 4</p>
</li>
<li><p>往前拨10+12=22个小时: (6+22) mod 12 =4</p>
</li>
</ol>
</blockquote>
<p>2,3方法中的mod是指取模操作, 16 mod 12 =4 即用16除以12后的余数是4.</p>
<p>所以钟表往回拨(减法)的结果可以用往前拨(加法)替代!</p>
<p>现在的焦点就落在了如何用一个正数, 来替代一个负数. 上面的例子我们能感觉出来一些端倪, 发现一些规律. 但是数学是严谨的. 不能靠感觉.</p>
<p>首先介绍一个数学中相关的概念: 同余</p>
<h2 id="同余的概念"><a href="#同余的概念" class="headerlink" title="同余的概念"></a>同余的概念</h2><p>两个整数a，b，若它们除以整数m所得的余数相等，则称a，b对于模m同余</p>
<p>记作 a ≡ b (mod m)</p>
<p>读作 a 与 b 关于模 m 同余。</p>
<p>举例说明:</p>
<blockquote>
<p>4 mod 12 = 4</p>
<p>16 mod 12 = 4</p>
<p>28 mod 12 = 4</p>
</blockquote>
<p>所以4, 16, 28关于模 12 同余.</p>
<h2 id="负数取模"><a href="#负数取模" class="headerlink" title="负数取模"></a>负数取模</h2><p>正数进行mod运算是很简单的. 但是负数呢?</p>
<p>下面是关于mod运算的数学定义:</p>
<p><img src="/images/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E7%A1%80/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9F%BA%E7%A1%80.jpg" alt=""></p>
<p>上面是截图, “取下界”符号找不到如何输入(word中粘贴过来后乱码). 下面是使用”L”和”J”替换上图的”取下界”符号:</p>
<blockquote>
<p>x mod y = x - y L x / y J</p>
</blockquote>
<p>上面公式的意思是:</p>
<p>x mod y等于 x 减去 y 乘上 x与y的商的下界.</p>
<p>以 -3 mod 2 举例:</p>
<blockquote>
<p>-3 mod 2</p>
<p>= -3 - 2xL -3/2 J</p>
<p>= -3 - 2xL-1.5J</p>
<p>= -3 - 2x(-2)</p>
<p>= -3 + 4 = 1</p>
</blockquote>
<p>所以:</p>
<blockquote>
<p>(-2) mod 12 = 12-2=10</p>
<p>(-4) mod 12 = 12-4 = 8</p>
<p>(-5) mod 12 = 12 - 5 = 7</p>
</blockquote>
<h2 id="开始证明"><a href="#开始证明" class="headerlink" title="开始证明"></a>开始证明</h2><p>再回到时钟的问题上:</p>
<blockquote>
<p>回拨2小时 = 前拨10小时</p>
<p>回拨4小时 = 前拨8小时</p>
<p>回拨5小时= 前拨7小时</p>
</blockquote>
<p>注意, 这里发现的规律!</p>
<p>结合上面学到的同余的概念.实际上:</p>
<blockquote>
<p>(-2) mod 12 = 10</p>
<p>10 mod 12 = 10</p>
</blockquote>
<p>-2与10是同余的.</p>
<blockquote>
<p>(-4) mod 12 = 8</p>
<p>8 mod 12 = 8</p>
</blockquote>
<p>-4与8是同余的.</p>
<p>距离成功越来越近了. 要实现用正数替代负数, 只需要运用同余数的两个定理:</p>
<p>反身性:</p>
<blockquote>
<p>a ≡ a (mod m)</p>
</blockquote>
<p>这个定理是很显而易见的.</p>
<p>线性运算定理:</p>
<blockquote>
<p>如果a ≡ b (mod m)，c ≡ d (mod m) 那么:</p>
<p>(1)a ± c ≡ b ± d (mod m)</p>
<p>(2)a * c ≡ b * d (mod m)</p>
</blockquote>
<p>如果想看这个定理的证明, 请看:<a href="http://baike.baidu.com/view/79282.htm" target="_blank" rel="noopener">http://baike.baidu.com/view/79282.htm</a></p>
<p>所以:</p>
<blockquote>
<p>7 ≡ 7 (mod 12)</p>
<p>(-2) ≡ 10 (mod 12)</p>
<p>7 -2 ≡ 7 + 10 (mod 12)</p>
</blockquote>
<p>现在我们为一个负数, 找到了它的正数同余数. 但是并不是7-2 = 7+10, 而是 7 -2 ≡ 7 + 10 (mod 12) , 即计算结果的余数相等.</p>
<p>接下来回到二进制的问题上, 看一下: 2-1=1的问题.</p>
<blockquote>
<p>2-1=2+(-1) = [0000 0010]原 + [1000 0001]原= [0000 0010]反 + [1111 1110]反</p>
</blockquote>
<p>先到这一步, -1的反码表示是1111 1110. 如果这里将[1111 1110]认为是原码, 则[1111 1110]原 = -126, 这里将符号位除去, 即认为是126.</p>
<p>发现有如下规律:</p>
<blockquote>
<p>(-1) mod 127 = 126</p>
<p>126 mod 127 = 126</p>
</blockquote>
<p>即:</p>
<blockquote>
<p>(-1) ≡ 126 (mod 127)</p>
<p>2-1 ≡ 2+126 (mod 127)</p>
</blockquote>
<p>2-1 与 2+126的余数结果是相同的! 而这个余数, 正式我们的期望的计算结果: 2-1=1</p>
<p>所以说一个数的反码, 实际上是这个数对于一个膜的同余数. 而这个膜并不是我们的二进制, 而是所能表示的最大值! 这就和钟表一样, 转了一圈后总能找到在可表示范围内的一个正确的数值!</p>
<p>而2+126很显然相当于钟表转过了一轮, 而因为符号位是参与计算的, 正好和溢出的最高位形成正确的运算结果.</p>
<p>既然反码可以将减法变成加法, 那么现在计算机使用的补码呢? 为什么在反码的基础上加1, 还能得到正确的结果?</p>
<blockquote>
<p>2-1=2+(-1) = [0000 0010]原 + [1000 0001]原 = [0000 0010]补 + [1111 1111]补</p>
</blockquote>
<p>如果把[1111 1111]当成原码, 去除符号位, 则:</p>
<blockquote>
<p>[0111 1111]原 = 127</p>
</blockquote>
<p>其实, 在反码的基础上+1, 只是相当于增加了膜的值:</p>
<blockquote>
<p>(-1) mod 128 = 127</p>
<p>127 mod 128 = 127</p>
<p>2-1 ≡ 2+127 (mod 128)</p>
</blockquote>
<p>此时, 表盘相当于每128个刻度转一轮. 所以用补码表示的运算结果最小值和最大值应该是[-128, 128].</p>
<p>但是由于0的特殊情况, 没有办法表示128, 所以补码的取值范围是[-128, 127]</p>
]]></content>
      <categories>
        <category>算法相关</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>零拷贝</title>
    <url>/2020/05/19/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>传统的Linux操作系统的标准I/O接口是基于数据拷贝操作的，即I/O操作会导致数据在操作系统内核地址空间的缓冲区和应用程序地址空间定义的缓冲区之间进行传输。这样做最大的好处是可以减少磁盘I/O的操作，因为如果所请求的数据已经存放在操作系统的高速缓冲存储器中，那么就不需要再进行实际的物理磁盘I/O操作。但是数据传输过程中的数据拷贝操作却导致了极大的CPU开销，限制了操作系统有效进行数据传输操作的能力。</p>
<p>零拷贝（zero-copy）这种技术可以有效地改善数据传输的性能，在内核驱动程序（比如网络堆栈或者磁盘存储驱动程序）处理I/O数据的时候，零拷贝技术可以在某种程度上减少甚至完全避免不必要CPU数据拷贝操作。现代的CPU和存储体系结构提供了很多特征可以有效地实现零拷贝技术，但是因为存储体系结构非常复杂，而且网络协议栈有时需要对数据进行必要的处理，所以零拷贝技术有可能会产生很多负面的影响，甚至会导致零拷贝技术自身的优点完全丧失。</p>
<h1 id="为什么需要零拷贝技术"><a href="#为什么需要零拷贝技术" class="headerlink" title="为什么需要零拷贝技术"></a>为什么需要零拷贝技术</h1><p>如今，很多网络服务器都是基于客户端-服务器这一模型的。在这种模型中，客户端向服务器端请求数据或者服务；服务器端则需要响应客户端发出的请求，并为客户端提供它所需要的数据。随着网络服务的逐渐普及，video这类应用程序发展迅速。当今的计算机系统已经具备足够的能力去处理video这类应用程序对客户端所造成的重负荷，但是对于服务器端来说，它应付由video这类应用程序引起的网络通信量就显得捉襟见肘了。而且，客户端的数量增长迅速，那么服务器端就更容易成为性能瓶颈。而对于负荷很重的服务器来说，操作系统通常都是引起性能瓶颈的罪魁祸首。举个例子来说，当数据“写”操作或者数据“发送”操作的系统调用发出时，操作系统通常都会将数据从应用程序地址空间的缓冲区拷贝到操作系统内核的缓冲区中去。操作系统这样做的好处是接口简单，但是却在很大程度上损失了系统性能，因为这种数据拷贝操作不单需要占用CPU时间片，同时也需要占用额外的内存带宽。</p>
<p>一般来说，客户端通过网络接口卡向服务器端发送请求，操作系统将这些客户端的请求传递给服务器端应用程序，服务器端应用程序会处理这些请求，请求处理完成以后，操作系统还需要将处理得到的结果通过网络适配器传递回去。</p>
<p>下边这一小节会跟读者简单介绍一下传统的服务器是如何进行数据传输的，以及这种数据传输的处理过程存在哪些问题有可能会造成服务器的性能损失。</p>
<h1 id="Linux中传统服务器进行数据传输的流程"><a href="#Linux中传统服务器进行数据传输的流程" class="headerlink" title="Linux中传统服务器进行数据传输的流程"></a>Linux中传统服务器进行数据传输的流程</h1><p>Linux中传统的I/O操作是一种缓冲I/O，I/O过程中产生的数据传输通常需要在缓冲区中进行多次的拷贝操作。一般来说，在传输数据的时候，用户应用程序需要分配一块大小合适的缓冲区用来存放需要传输的数据。应用程序从文件中读取一块数据，然后把这块数据通过网络发送到接收端去。用户应用程序只是需要调用两个系统调用read()和write()就可以完成这个数据传输操作，应用程序并不知晓在这个数据传输的过程中操作系统所做的数据拷贝操作。对于Linux操作系统来说，基于数据排序或者校验等各方面因素的考虑，操作系统内核会在处理数据传输的过程中进行多次拷贝操作。在某些情况下，这些数据拷贝操作会极大地降低数据传输的性能。</p>
<p>当应用程序需要访问某块数据的时候，操作系统内核会先检查这块数据是不是因为前一次对相同文件的访问而已经被存放在操作系统内核地址空间的缓冲区内，如果在内核缓冲区中找不到这块数据，Linux操作系统内核会先将这块数据从磁盘读出来放到操作系统内核的缓冲区里去。如果这个数据读取操作是由DMA完成的，那么在DMA进行数据读取的这一过程中，CPU只是需要进行缓冲区管理，以及创建和处理DMA，除此之外，CPU不需要再做更多的事情，DMA执行完数据读取操作之后，会通知操作系统做进一步的处理。Linux操作系统会根据read()系统调用指定的应用程序地址空间的地址，把这块数据存放到请求这块数据的应用程序的地址空间中去，在接下来的处理过程中，操作系统需要将数据再一次从用户应用程序地址空间的缓冲区拷贝到与网络堆栈相关的内核缓冲区中去，这个过程也是需要占用CPU的。数据拷贝操作结束以后，数据会被打包，然后发送到网络接口卡上去。在数据传输的过程中，应用程序可以先返回进而执行其他的操作。之后，在调用write()系统调用的时候，用户应用程序缓冲区中的数据内容可以被安全的丢弃或者更改，因为操作系统已经在内核缓冲区中保留了一份数据拷贝，当数据被成功传送到硬件上之后，这份数据拷贝就可以被丢弃。</p>
<p>从上面的描述可以看出，在这种传统的数据传输过程中，数据至少发生了四次拷贝操作，即便是使用了DMA来进行与硬件的通讯，CPU仍然需要访问数据两次。在read()读数据的过程中，数据并不是直接来自于硬盘，而是必须先经过操作系统的文件系统层。在write()写数据的过程中，为了和要传输的数据包的大小相吻合，数据必须要先被分割成块，而且还要预先考虑包头，并且要进行数据校验和操作。</p>
<ul>
<li>图1.传统使用read和write系统调用的数据传输</li>
</ul>
<p><img src="/images/%E9%9B%B6%E6%8B%B7%E8%B4%9D/image001.jpg" alt="图1.传统使用read和write系统调用的数据传输"></p>
<h1 id="零拷贝（zero-copy）技术概述"><a href="#零拷贝（zero-copy）技术概述" class="headerlink" title="零拷贝（zero-copy）技术概述"></a>零拷贝（zero-copy）技术概述</h1><h2 id="什么是零拷贝？"><a href="#什么是零拷贝？" class="headerlink" title="什么是零拷贝？"></a>什么是零拷贝？</h2><p>简单一点来说，零拷贝就是一种避免CPU将数据从一块存储拷贝到另外一块存储的技术。针对操作系统中的设备驱动程序、文件系统以及网络协议堆栈而出现的各种零拷贝技术极大地提升了特定应用程序的性能，并且使得这些应用程序可以更加有效地利用系统资源。这种性能的提升就是通过在数据拷贝进行的同时，允许CPU执行其他的任务来实现的。零拷贝技术可以减少数据拷贝和共享总线操作的次数，消除传输数据在存储器之间不必要的中间拷贝次数，从而有效地提高数据传输效率。而且，零拷贝技术减少了用户应用程序地址空间和操作系统内核地址空间之间因为上下文切换而带来的开销。进行大量的数据拷贝操作其实是一件简单的任务，从操作系统的角度来说，如果CPU一直被占用着去执行这项简单的任务，那么这将会是很浪费资源的；如果有其他比较简单的系统部件可以代劳这件事情，从而使得CPU解脱出来可以做别的事情，那么系统资源的利用则会更加有效。综上所述，零拷贝技术的目标可以概括如下：</p>
<p><strong>避免数据拷贝</strong></p>
<ul>
<li>避免操作系统内核缓冲区之间进行数据拷贝操作。</li>
<li>避免操作系统内核和用户应用程序地址空间这两者之间进行数据拷贝操作。</li>
<li>用户应用程序可以避开操作系统直接访问硬件存储。</li>
<li>数据传输尽量让DMA来做。</li>
</ul>
<p><strong>将多种操作结合在一起</strong></p>
<ul>
<li>避免不必要的系统调用和上下文切换。</li>
<li>需要拷贝的数据可以先被缓存起来。</li>
<li>对数据进行处理尽量让硬件来做。</li>
</ul>
<p>前文提到过，对于高速网络来说，零拷贝技术是非常重要的。这是因为高速网络的网络链接能力与CPU的处理能力接近，甚至会超过CPU的处理能力。如果是这样的话，那么CPU就有可能需要花费几乎所有的时间去拷贝要传输的数据，而没有能力再去做别的事情，这就产生了性能瓶颈，限制了通讯速率，从而降低了网络链接的能力。一般来说，一个CPU时钟周期可以处理一位的数据。举例来说，一个1GHz的处理器可以对1Gbit/s的网络链接进行传统的数据拷贝操作，但是如果是10Gbit/s的网络，那么对于相同的处理器来说，零拷贝技术就变得非常重要了。对于超过1Gbit/s的网络链接来说，零拷贝技术在超级计算机集群以及大型的商业数据中心中都有所应用。然而，随着信息技术的发展，1Gbit/s，10Gbit/s以及100Gbit/s的网络会越来越普及，那么零拷贝技术也会变得越来越普及，这是因为网络链接的处理能力比CPU的处理能力的增长要快得多。传统的数据拷贝受限于传统的操作系统或者通信协议，这就限制了数据传输性能。零拷贝技术通过减少数据拷贝次数，简化协议处理的层次，在应用程序和网络之间提供更快的数据传输方法，从而可以有效地降低通信延迟，提高网络吞吐率。零拷贝技术是实现主机或者路由器等设备高速网络接口的主要技术之一。</p>
<p>现代的CPU和存储体系结构提供了很多相关的功能来减少或避免I/O操作过程中产生的不必要的CPU数据拷贝操作，但是，CPU和存储体系结构的这种优势经常被过高估计。存储体系结构的复杂性以及网络协议中必需的数据传输可能会产生问题，有时甚至会导致零拷贝这种技术的优点完全丧失。在下一章中，我们会介绍几种Linux操作系统中出现的零拷贝技术，简单描述一下它们的实现方法，并对它们的弱点进行分析。</p>
<h2 id="零拷贝技术分类"><a href="#零拷贝技术分类" class="headerlink" title="零拷贝技术分类"></a>零拷贝技术分类</h2><p>零拷贝技术的发展很多样化，现有的零拷贝技术种类也非常多，而当前并没有一个适合于所有场景的零拷贝技术的出现。对于Linux来说，现存的零拷贝技术也比较多，这些零拷贝技术大部分存在于不同的Linux内核版本，有些旧的技术在不同的Linux内核版本间得到了很大的发展或者已经渐渐被新的技术所代替。本文针对这些零拷贝技术所适用的不同场景对它们进行了划分。概括起来，Linux中的零拷贝技术主要有下面这几种：</p>
<ul>
<li>直接I/O：对于这种数据传输方式来说，应用程序可以直接访问硬件存储，操作系统内核只是辅助数据传输：这类零拷贝技术针对的是操作系统内核并不需要对数据进行直接处理的情况，数据可以在应用程序地址空间的缓冲区和磁盘之间直接进行传输，完全不需要Linux操作系统内核提供的页缓存的支持。</li>
<li>在数据传输的过程中，避免数据在操作系统内核地址空间的缓冲区和用户应用程序地址空间的缓冲区之间进行拷贝。有的时候，应用程序在数据进行传输的过程中不需要对数据进行访问，那么，将数据从Linux的页缓存拷贝到用户进程的缓冲区中就可以完全避免，传输的数据在页缓存中就可以得到处理。在某些特殊的情况下，这种零拷贝技术可以获得较好的性能。Linux中提供类似的系统调用主要有mmap()，sendfile()以及splice()。</li>
<li>对数据在Linux的页缓存和用户进程的缓冲区之间的传输过程进行优化。该零拷贝技术侧重于灵活地处理数据在用户进程的缓冲区和操作系统的页缓存之间的拷贝操作。这种方法延续了传统的通信方式，但是更加灵活。在Linux中，该方法主要利用了写时复制技术。</li>
</ul>
<p>前两类方法的目的主要是为了避免应用程序地址空间和操作系统内核地址空间这两者之间的缓冲区拷贝操作。这两类零拷贝技术通常适用在某些特殊的情况下，比如要传送的数据不需要经过操作系统内核的处理或者不需要经过应用程序的处理。第三类方法则继承了传统的应用程序地址空间和操作系统内核地址空间之间数据传输的概念，进而针对数据传输本身进行优化。我们知道，硬件和软件之间的数据传输可以通过使用DMA来进行，DMA进行数据传输的过程中几乎不需要CPU参与，这样就可以把CPU解放出来去做更多其他的事情，但是当数据需要在用户地址空间的缓冲区和Linux操作系统内核的页缓存之间进行传输的时候，并没有类似DMA这种工具可以使用，CPU需要全程参与到这种数据拷贝操作中，所以这第三类方法的目的是可以有效地改善数据在用户地址空间和操作系统内核地址空间之间传递的效率。</p>
<h1 id="Java通过零拷贝实现高效的数据传输"><a href="#Java通过零拷贝实现高效的数据传输" class="headerlink" title="Java通过零拷贝实现高效的数据传输"></a>Java通过零拷贝实现高效的数据传输</h1><p>在 Linux 和 Unix 系统中 Java 类库通过<code>java.nio.channels.FileChannel</code> 的<code>transgerTo</code>方法支持零拷贝。</p>
]]></content>
  </entry>
  <entry>
    <title>Java命名规范参考</title>
    <url>/2020/03/23/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<blockquote>
<p>转自：<a href="https://mp.weixin.qq.com/s/O7U4XU-4QysmvL6cRfVfvw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/O7U4XU-4QysmvL6cRfVfvw</a></p>
</blockquote>
<h2 id="一，Java中的命名规范"><a href="#一，Java中的命名规范" class="headerlink" title="一，Java中的命名规范"></a>一，Java中的命名规范</h2><p>好的命名能体现出代码的特征，含义或者是用途，让阅读者可以根据名称的含义快速厘清程序的脉络。不同语言中采用的命名形式大相径庭，Java中常用到的命名形式共有三种，既首字母大写的UpperCamelCase，首字母小写的lowerCamelCase以及全部大写的并用下划线分割单词的UPPERCAMELUNSER_SCORE。通常约定，<strong>类一般采用大驼峰命名，方法和局部变量使用小驼峰命名，而大写下划线命名通常是常量和枚举中使用。</strong></p>
<table>
<thead>
<tr>
<th align="center">类型(名)</th>
<th align="center">约束</th>
<th align="center">例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">项目</td>
<td align="center">全部小写 多个单词用中划线分隔‘-’</td>
<td align="center">spring-cloud</td>
</tr>
<tr>
<td align="center">包</td>
<td align="center">全部小写</td>
<td align="center">com.alibaba.fastjson</td>
</tr>
<tr>
<td align="center">类</td>
<td align="center">单词首字母大写</td>
<td align="center">Feature, FieldDeserializer</td>
</tr>
<tr>
<td align="center">变量</td>
<td align="center">首字母小写 多个单词组成时， 除首个单词 其他单词首字母都要大写</td>
<td align="center">password,  userName</td>
</tr>
<tr>
<td align="center">常量</td>
<td align="center">全部大写，多个单词，用’_’分隔</td>
<td align="center">CACHEEXPIREDTIME</td>
</tr>
<tr>
<td align="center">方法</td>
<td align="center">同变量</td>
<td align="center">read(),  getById(Long id)</td>
</tr>
</tbody></table>
<h2 id="二，包命名"><a href="#二，包命名" class="headerlink" title="二，包命名"></a>二，包命名</h2><p><strong>包名</strong>统一使用<strong>小写</strong>，<strong>点分隔符</strong>之间有且仅有一个自然语义的英文单词或者多个单词自然连接到一块（如 springframework，deepspace不需要使用任何分割）。包名统一使用单数形式，如果类命有复数含义，则可以使用复数形式。</p>
<p>包名的构成可以分为以下几四部分【前缀】 【发起者名】【项目名】【模块名】。常见的前缀可以分为以下几种：</p>
<table>
<thead>
<tr>
<th align="center">前缀</th>
<th align="center">例</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">indi 或 onem</td>
<td align="center">indi.发起者名.项目名.模块名.……</td>
<td align="center">个体项目 个人发起，但非自己独自完成 可公开或私有项目， copyright主要属于发起者。</td>
</tr>
<tr>
<td align="center">pers</td>
<td align="center">pers.个人名.项目名.模块名.……</td>
<td align="center">个人项目 指个人发起，独自完成， 可分享的项目 copyright主要属于个人</td>
</tr>
<tr>
<td align="center">priv</td>
<td align="center">priv.个人名.项目名.模块名.……</td>
<td align="center">私有项目，指个人发起，独自完成 非公开的私人使用的项目， copyright属于个人。</td>
</tr>
<tr>
<td align="center">team</td>
<td align="center">team.团队名.项目名.模块名.……</td>
<td align="center">团队项目，指由团队发起 并由该团队开发的项目 copyright属于该团队所有</td>
</tr>
<tr>
<td align="center">顶级域名</td>
<td align="center">com.公司名.项目名.模块名.……</td>
<td align="center">公司项目 copyright由项目发起的公司所有</td>
</tr>
</tbody></table>
<h2 id="三，类命名"><a href="#三，类命名" class="headerlink" title="三，类命名"></a>三，类命名</h2><p><strong>类名使用大驼峰命名形式</strong>，类命通常时<strong>名词或名词短语</strong>，接口名除了用名词和名词短语以外，还可以使用形容词或形容词短语，如Cloneable，Callable等，表示实现该接口的类有某种功能或能力。对于测试类则以它要测试的类开头，以Test结尾，如HashMapTest。</p>
<p>对于一些特殊特有名词缩写也可以使用全大写命名，比如XMLHttpRequest，不过笔者认为缩写三个字母以内都大写，超过三个字母则按照要给单词算。这个没有标准如阿里巴巴中fastjson用JSONObject作为类命，而google则使用JsonObjectRequest命名，对于这种特殊的缩写，原则是统一就好。</p>
<table>
<thead>
<tr>
<th align="left">属性(类)</th>
<th align="left">约束</th>
<th align="left">例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">抽象</td>
<td align="left">Abstract  或 Base 开头</td>
<td align="left">BaseUserService</td>
</tr>
<tr>
<td align="left">枚举</td>
<td align="left">Enum 作为后缀</td>
<td align="left">OSType</td>
</tr>
<tr>
<td align="left">工具</td>
<td align="left">Utils作为后缀</td>
<td align="left">StringUtils</td>
</tr>
<tr>
<td align="left">异常</td>
<td align="left">Exception结尾</td>
<td align="left">RuntimeException</td>
</tr>
<tr>
<td align="left">接口实现</td>
<td align="left">接口名+ Impl</td>
<td align="left">UserServiceImpl</td>
</tr>
<tr>
<td align="left">领域模型相</td>
<td align="left">/DO/DTO/VO/DAO</td>
<td align="left">正例：UserDAO 反例：UserDao</td>
</tr>
<tr>
<td align="left">设计模式相关</td>
<td align="left">Builder，Factory等</td>
<td align="left">当使用到设计模式时 要使用对应的设计模式作为后缀 如ThreadFactory</td>
</tr>
<tr>
<td align="left">处理特定功能</td>
<td align="left">Handler，Predicate Validator</td>
<td align="left">表示处理器，校验器，断言 这些类工厂还有配套的方法名 如handle，predicate，validate</td>
</tr>
<tr>
<td align="left">测试</td>
<td align="left">Test后缀</td>
<td align="left">UserServiceTest 表示用来测试UserService类的</td>
</tr>
<tr>
<td align="left">MVC分层</td>
<td align="left">Controller，Service ServiceImpl，DAO 后缀</td>
<td align="left">UserManageController UserManageDAO</td>
</tr>
</tbody></table>
<h2 id="四，方法"><a href="#四，方法" class="headerlink" title="四，方法"></a>四，方法</h2><p><strong>方法命名采用小驼峰的形式</strong>，首字小写，往后的每个单词首字母都要大写。和类名不同的是，方法命名一般为<strong>动词或动词短语</strong>，与参数或参数名共同组成动宾短语，即动词 + 名词。一个好的函数名一般能通过名字直接获知该函数实现什么样的功能。</p>
<h3 id="4-1-返回真伪值的方法"><a href="#4-1-返回真伪值的方法" class="headerlink" title="4.1 返回真伪值的方法"></a>4.1 返回真伪值的方法</h3><p>注：pre- prefix前缀，suf- suffix后缀，alo-alone 单独使用</p>
<table>
<thead>
<tr>
<th align="left">位置</th>
<th align="left">单词</th>
<th align="left">意义</th>
<th align="left">例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pre</td>
<td align="left">is</td>
<td align="left">对象是否符合期待的状态</td>
<td align="left">isValid</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">can</td>
<td align="left">对象<strong>能否执行</strong>所期待的动作</td>
<td align="left">canRemove</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">should</td>
<td align="left">调用方执行某个命令 或方法是<strong>好还是不好</strong> <strong>应不应该</strong>， 或者说<strong>推荐还是不推荐</strong></td>
<td align="left">shouldMigrate</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">has</td>
<td align="left">对象<strong>是否持有</strong> 所期待的数据和属性</td>
<td align="left">hasObservers</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">needs</td>
<td align="left">调用方<strong>是否需要</strong> 执行某个命令或方法</td>
<td align="left">needsMigrate</td>
</tr>
</tbody></table>
<h3 id="4-2-用来检查的方法"><a href="#4-2-用来检查的方法" class="headerlink" title="4.2 用来检查的方法"></a>4.2 用来检查的方法</h3><table>
<thead>
<tr>
<th align="left">单词</th>
<th align="left">意义</th>
<th align="left">例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ensure</td>
<td align="left">检查是否为期待的状态 不是则抛出异常或返回error code</td>
<td align="left">ensureCapacity</td>
</tr>
<tr>
<td align="left">validate</td>
<td align="left">检查是否为正确的状态 不是则抛出异常或返回error code</td>
<td align="left">validateInputs</td>
</tr>
</tbody></table>
<h3 id="4-3-按需求才执行的方法"><a href="#4-3-按需求才执行的方法" class="headerlink" title="4.3 按需求才执行的方法"></a>4.3 按需求才执行的方法</h3><table>
<thead>
<tr>
<th align="left">位置</th>
<th align="left">单词</th>
<th align="left">意义</th>
<th align="left">例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">suf</td>
<td align="left">IfNeeded</td>
<td align="left">需要的时候执行 不需要则什么都不做</td>
<td align="left">drawIfNeeded</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">might</td>
<td align="left">同上</td>
<td align="left">mightCreate</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">try</td>
<td align="left">尝试执行 失败时抛出异常 或是返回errorcode</td>
<td align="left">tryCreate</td>
</tr>
<tr>
<td align="left">suf</td>
<td align="left">OrDefault</td>
<td align="left">尝试执行 失败时返回默认值</td>
<td align="left">getOrDefault</td>
</tr>
<tr>
<td align="left">suf</td>
<td align="left">OrElse</td>
<td align="left">尝试执行 失败时返回 实际参数中指定的值</td>
<td align="left">getOrElse</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">force</td>
<td align="left">强制尝试执行 error抛出异常或是返回值</td>
<td align="left">forceCreate,  forceStop</td>
</tr>
</tbody></table>
<h3 id="4-4-异步相关方法"><a href="#4-4-异步相关方法" class="headerlink" title="4.4 异步相关方法"></a>4.4 异步相关方法</h3><table>
<thead>
<tr>
<th align="left">位置</th>
<th align="left">单词</th>
<th align="left">意义</th>
<th align="left">例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pre</td>
<td align="left">blocking</td>
<td align="left">线程阻塞方法</td>
<td align="left">blockingGetUser</td>
</tr>
<tr>
<td align="left">suf</td>
<td align="left">InBackground</td>
<td align="left">执行在后台线程</td>
<td align="left">doInBackground</td>
</tr>
<tr>
<td align="left">suf</td>
<td align="left">Async</td>
<td align="left">异步方法</td>
<td align="left">sendAsync</td>
</tr>
<tr>
<td align="left">suf</td>
<td align="left">Sync</td>
<td align="left">同步方法</td>
<td align="left">sendSync</td>
</tr>
<tr>
<td align="left">pre / alo</td>
<td align="left">schedule</td>
<td align="left">Job和Tas k放入队列</td>
<td align="left">schedule,  scheduleJob</td>
</tr>
<tr>
<td align="left">pre / alo</td>
<td align="left">post</td>
<td align="left">同上</td>
<td align="left">postJob</td>
</tr>
<tr>
<td align="left">pre / alo</td>
<td align="left">execute</td>
<td align="left">执行异步 或同步方法</td>
<td align="left">execute, executeTask</td>
</tr>
<tr>
<td align="left">pre / alo</td>
<td align="left">start</td>
<td align="left">同上</td>
<td align="left">star, tstartJob</td>
</tr>
<tr>
<td align="left">pre / alo</td>
<td align="left">cancel</td>
<td align="left">停止异步方法</td>
<td align="left">cance, cancelJob</td>
</tr>
<tr>
<td align="left">pre / alo</td>
<td align="left">stop</td>
<td align="left">同上</td>
<td align="left">stop,stopJob</td>
</tr>
</tbody></table>
<h3 id="4-5-回调方法"><a href="#4-5-回调方法" class="headerlink" title="4.5 回调方法"></a>4.5 回调方法</h3><table>
<thead>
<tr>
<th align="left">位置</th>
<th align="left">单词</th>
<th align="left">意义</th>
<th align="left">例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pre</td>
<td align="left">on</td>
<td align="left">事件发生时执行</td>
<td align="left">onCompleted</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">before</td>
<td align="left">事件发生前执行</td>
<td align="left">beforeUpdate</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">pre</td>
<td align="left">同上</td>
<td align="left">preUpdate</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">will</td>
<td align="left">同上</td>
<td align="left">willUpdate</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">after</td>
<td align="left">事件发生后执行</td>
<td align="left">afterUpdate</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">post</td>
<td align="left">同上</td>
<td align="left">postUpdate</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">did</td>
<td align="left">同上</td>
<td align="left">didUpdate</td>
</tr>
<tr>
<td align="left">pre</td>
<td align="left">should</td>
<td align="left">确认事件 是否可以执行</td>
<td align="left">shouldUpdate</td>
</tr>
</tbody></table>
<h3 id="4-6-操作对象生命周期的方法"><a href="#4-6-操作对象生命周期的方法" class="headerlink" title="4.6 操作对象生命周期的方法"></a>4.6 操作对象生命周期的方法</h3><table>
<thead>
<tr>
<th align="left">单词</th>
<th align="left">意义</th>
<th align="left">例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">initialize</td>
<td align="left">初始化或延迟初始化使用</td>
<td align="left">initialize</td>
</tr>
<tr>
<td align="left">pause</td>
<td align="left">暂停</td>
<td align="left">onPause , pause</td>
</tr>
<tr>
<td align="left">stop</td>
<td align="left">停止</td>
<td align="left">onStop, stop</td>
</tr>
<tr>
<td align="left">abandon</td>
<td align="left">销毁的替代</td>
<td align="left">abandon</td>
</tr>
<tr>
<td align="left">destroy</td>
<td align="left">同上</td>
<td align="left">destroy</td>
</tr>
<tr>
<td align="left">dispose</td>
<td align="left">同上</td>
<td align="left">dispose</td>
</tr>
</tbody></table>
<h3 id="4-7-与集合操作相关的方法"><a href="#4-7-与集合操作相关的方法" class="headerlink" title="4.7 与集合操作相关的方法"></a>4.7 与集合操作相关的方法</h3><table>
<thead>
<tr>
<th align="left">单词</th>
<th align="left">意义</th>
<th align="left">例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">contains</td>
<td align="left">是包含指定对象相同的对象</td>
<td align="left">contains</td>
</tr>
<tr>
<td align="left">add</td>
<td align="left">添加</td>
<td align="left">addJob</td>
</tr>
<tr>
<td align="left">append</td>
<td align="left">添加</td>
<td align="left">appendJob</td>
</tr>
<tr>
<td align="left">insert</td>
<td align="left">插入到下标n</td>
<td align="left">insertJob</td>
</tr>
<tr>
<td align="left">put</td>
<td align="left">添加与key对应的元素</td>
<td align="left">putJob</td>
</tr>
<tr>
<td align="left">remove</td>
<td align="left">移除元素</td>
<td align="left">removeJob</td>
</tr>
<tr>
<td align="left">enqueue</td>
<td align="left">添加到队列的最末位</td>
<td align="left">enqueueJob</td>
</tr>
<tr>
<td align="left">dequeue</td>
<td align="left">从队列中头部取出并移除</td>
<td align="left">dequeueJob</td>
</tr>
<tr>
<td align="left">push</td>
<td align="left">添加到栈头</td>
<td align="left">pushJob</td>
</tr>
<tr>
<td align="left">pop</td>
<td align="left">从栈头取出并移除</td>
<td align="left">popJob</td>
</tr>
<tr>
<td align="left">peek</td>
<td align="left">从栈头取出但不移除</td>
<td align="left">peekJob</td>
</tr>
<tr>
<td align="left">find</td>
<td align="left">寻找符合条件的某物</td>
<td align="left">findById</td>
</tr>
</tbody></table>
<h3 id="4-8-与数据相关的方法"><a href="#4-8-与数据相关的方法" class="headerlink" title="4.8 与数据相关的方法"></a>4.8 与数据相关的方法</h3><table>
<thead>
<tr>
<th align="left">单词</th>
<th align="left">意义</th>
<th align="left">例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">create</td>
<td align="left">新创建</td>
<td align="left">createAccount</td>
</tr>
<tr>
<td align="left">new</td>
<td align="left">新创建</td>
<td align="left">newAccount</td>
</tr>
<tr>
<td align="left">from</td>
<td align="left">从既有的某物新建 或是从其他的数据新建</td>
<td align="left">fromConfig</td>
</tr>
<tr>
<td align="left">to</td>
<td align="left">转换</td>
<td align="left">toString</td>
</tr>
<tr>
<td align="left">update</td>
<td align="left">更新既有某物</td>
<td align="left">updateAccount</td>
</tr>
<tr>
<td align="left">load</td>
<td align="left">读取</td>
<td align="left">loadAccount</td>
</tr>
<tr>
<td align="left">fetch</td>
<td align="left">远程读取</td>
<td align="left">fetchAccount</td>
</tr>
<tr>
<td align="left">delete</td>
<td align="left">删除</td>
<td align="left">deleteAccount</td>
</tr>
<tr>
<td align="left">remove</td>
<td align="left">删除</td>
<td align="left">removeAccount</td>
</tr>
<tr>
<td align="left">save</td>
<td align="left">保存</td>
<td align="left">saveAccount</td>
</tr>
<tr>
<td align="left">store</td>
<td align="left">保存</td>
<td align="left">storeAccount</td>
</tr>
<tr>
<td align="left">commit</td>
<td align="left">保存</td>
<td align="left">commitChange</td>
</tr>
<tr>
<td align="left">apply</td>
<td align="left">保存或应用</td>
<td align="left">applyChange</td>
</tr>
<tr>
<td align="left">clear</td>
<td align="left">清除或是恢复到初始状态</td>
<td align="left">clearAll</td>
</tr>
<tr>
<td align="left">reset</td>
<td align="left">清除或是恢复到初始状态</td>
<td align="left">resetAll</td>
</tr>
</tbody></table>
<h3 id="4-9-成对出现的动词"><a href="#4-9-成对出现的动词" class="headerlink" title="4.9 成对出现的动词"></a>4.9 成对出现的动词</h3><table>
<thead>
<tr>
<th align="left">单词</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">get获取</td>
<td align="left">set 设置</td>
</tr>
<tr>
<td align="left">add 增加</td>
<td align="left">remove 删除</td>
</tr>
<tr>
<td align="left">create 创建</td>
<td align="left">destory 移除</td>
</tr>
<tr>
<td align="left">start 启动</td>
<td align="left">stop 停止</td>
</tr>
<tr>
<td align="left">open 打开</td>
<td align="left">close 关闭</td>
</tr>
<tr>
<td align="left">read 读取</td>
<td align="left">write 写入</td>
</tr>
<tr>
<td align="left">load 载入</td>
<td align="left">save 保存</td>
</tr>
<tr>
<td align="left">create 创建</td>
<td align="left">destroy 销毁</td>
</tr>
<tr>
<td align="left">begin 开始</td>
<td align="left">end 结束</td>
</tr>
<tr>
<td align="left">backup 备份</td>
<td align="left">restore 恢复</td>
</tr>
<tr>
<td align="left">import 导入</td>
<td align="left">export 导出</td>
</tr>
<tr>
<td align="left">split 分割</td>
<td align="left">merge 合并</td>
</tr>
<tr>
<td align="left">inject 注入</td>
<td align="left">extract 提取</td>
</tr>
<tr>
<td align="left">attach 附着</td>
<td align="left">detach 脱离</td>
</tr>
<tr>
<td align="left">bind 绑定</td>
<td align="left">separate 分离</td>
</tr>
<tr>
<td align="left">view 查看</td>
<td align="left">browse 浏览</td>
</tr>
<tr>
<td align="left">edit 编辑</td>
<td align="left">modify 修改</td>
</tr>
<tr>
<td align="left">select 选取</td>
<td align="left">mark 标记</td>
</tr>
<tr>
<td align="left">copy 复制</td>
<td align="left">paste 粘贴</td>
</tr>
<tr>
<td align="left">undo 撤销</td>
<td align="left">redo 重做</td>
</tr>
<tr>
<td align="left">insert 插入</td>
<td align="left">delete 移除</td>
</tr>
<tr>
<td align="left">add 加入</td>
<td align="left">append 添加</td>
</tr>
<tr>
<td align="left">clean 清理</td>
<td align="left">clear 清除</td>
</tr>
<tr>
<td align="left">index 索引</td>
<td align="left">sort 排序</td>
</tr>
<tr>
<td align="left">find 查找</td>
<td align="left">search 搜索</td>
</tr>
<tr>
<td align="left">increase 增加</td>
<td align="left">decrease 减少</td>
</tr>
<tr>
<td align="left">play 播放</td>
<td align="left">pause 暂停</td>
</tr>
<tr>
<td align="left">launch 启动</td>
<td align="left">run 运行</td>
</tr>
<tr>
<td align="left">compile 编译</td>
<td align="left">execute 执行</td>
</tr>
<tr>
<td align="left">debug 调试</td>
<td align="left">trace 跟踪</td>
</tr>
<tr>
<td align="left">observe 观察</td>
<td align="left">listen 监听</td>
</tr>
<tr>
<td align="left">build 构建</td>
<td align="left">publish 发布</td>
</tr>
<tr>
<td align="left">input 输入</td>
<td align="left">output 输出</td>
</tr>
<tr>
<td align="left">encode 编码</td>
<td align="left">decode 解码</td>
</tr>
<tr>
<td align="left">encrypt 加密</td>
<td align="left">decrypt 解密</td>
</tr>
<tr>
<td align="left">compress 压缩</td>
<td align="left">decompress 解压缩</td>
</tr>
<tr>
<td align="left">pack 打包</td>
<td align="left">unpack 解包</td>
</tr>
<tr>
<td align="left">parse 解析</td>
<td align="left">emit 生成</td>
</tr>
<tr>
<td align="left">connect 连接</td>
<td align="left">disconnect 断开</td>
</tr>
<tr>
<td align="left">send 发送</td>
<td align="left">receive 接收</td>
</tr>
<tr>
<td align="left">download 下载</td>
<td align="left">upload 上传</td>
</tr>
<tr>
<td align="left">refresh 刷新</td>
<td align="left">synchronize 同步</td>
</tr>
<tr>
<td align="left">update 更新</td>
<td align="left">revert 复原</td>
</tr>
<tr>
<td align="left">lock 锁定</td>
<td align="left">unlock 解锁</td>
</tr>
<tr>
<td align="left">check out 签出</td>
<td align="left">check in 签入</td>
</tr>
<tr>
<td align="left">submit 提交</td>
<td align="left">commit 交付</td>
</tr>
<tr>
<td align="left">push 推</td>
<td align="left">pull 拉</td>
</tr>
<tr>
<td align="left">expand 展开</td>
<td align="left">collapse 折叠</td>
</tr>
<tr>
<td align="left">begin 起始</td>
<td align="left">end 结束</td>
</tr>
<tr>
<td align="left">start 开始</td>
<td align="left">finish 完成</td>
</tr>
<tr>
<td align="left">enter 进入</td>
<td align="left">exit 退出</td>
</tr>
<tr>
<td align="left">abort 放弃</td>
<td align="left">quit 离开</td>
</tr>
<tr>
<td align="left">obsolete 废弃</td>
<td align="left">depreciate 废旧</td>
</tr>
<tr>
<td align="left">collect 收集</td>
<td align="left">aggregate 聚集</td>
</tr>
</tbody></table>
<h2 id="五，变量-amp-常量命名"><a href="#五，变量-amp-常量命名" class="headerlink" title="五，变量&amp;常量命名"></a>五，变量&amp;常量命名</h2><h3 id="5-1-变量命名"><a href="#5-1-变量命名" class="headerlink" title="5.1 变量命名"></a>5.1 变量命名</h3><p>变量是指在程序运行中可以改变其值的量，包括成员变量和局部变量。变量名由多单词组成时，第一个单词的首字母小写，其后单词的首字母大写，俗称骆驼式命名法（也称驼峰命名法），如 computedValues，index、变量命名时，尽量简短且能清楚的表达变量的作用，命名体现具体的业务含义即可。</p>
<p>变量名不应以下划线或美元符号开头，尽管这在语法上是允许的。变量名应简短且富于描述。变量名的选用应该易于记忆，即，能够指出其用途。尽量避免单个字符的变量名，除非是一次性的临时变量。pojo中的布尔变量，都不要加is(数据库中的布尔字段全都要加 is_ 前缀)。</p>
<h3 id="5-2-常量命名"><a href="#5-2-常量命名" class="headerlink" title="5.2 常量命名"></a>5.2 常量命名</h3><p>常量命名CONSTANT_CASE，一般采用全部大写（作为方法参数时除外），单词间用下划线分割。那么什么是常量呢？</p>
<p>常量是在作用域内保持不变的值，一般使用final进行修饰。一般分为三种，全局常量（public static final修饰），类内常量（private static final 修饰）以及局部常量（方法内，或者参数中的常量），局部常量比较特殊，通常采用小驼峰命名即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jann Lee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-07 00:25</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 局部常量(正例)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> USER_MESSAGE_CACHE_EXPIRE_TIME = <span class="number">3600</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 局部常量(反例，命名不清晰）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MESSAGE_CACHE_TIME = <span class="number">3600</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ERROR_MESSAGE = <span class="string">" error message"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentUserId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制台打印 &#123;<span class="doctag">@code</span> message&#125; 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息体，局部常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常量一般都有自己的业务含义,<strong>不要害怕长度过长而进行省略或者缩写</strong>。如，用户消息缓存过期时间的表示，那种方式更佳清晰，交给你来评判。更多BAT经验文章，可以在订阅号“码匠笔记”后台回复“经验”，N+1篇热文免费获取。</p>
<h2 id="通用命名规则"><a href="#通用命名规则" class="headerlink" title="通用命名规则"></a>通用命名规则</h2><ol>
<li>尽量不要使用拼音；<strong>杜绝拼音和英文混用</strong>。对于一些通用的表示或者难以用英文描述的可以采用拼音，一旦采用拼音就坚决不能和英文混用。正例：BeiJing， HangZhou 反例：validateCanShu</li>
<li>命名过程中尽量不要出现特殊的字符，常量除外。</li>
<li>尽量不要和jdk或者框架中已存在的类重名，也不能使用java中的关键字命名。</li>
<li>妙用介词，如for(可以用同音的4代替), to(可用同音的2代替), from, with，of等。如类名采用User4RedisDO，方法名getUserInfoFromRedis，convertJson2Map等。</li>
</ol>
<h2 id="六，代码注解"><a href="#六，代码注解" class="headerlink" title="六，代码注解"></a>六，代码注解</h2><h3 id="6-1-注解的原则"><a href="#6-1-注解的原则" class="headerlink" title="6.1 注解的原则"></a>6.1 注解的原则</h3><p>好的命名增加代码阅读性，代码的命名往往有严格的限制。而注解不同，程序员往往可以自由发挥，单并不意味着可以为所欲为之胡作非为。优雅的注解通常要满足三要素。</p>
<ol>
<li>Nothing is strange 没有注解的代码对于阅读者非常不友好，哪怕代码写的在清除，阅读者至少从心理上会有抵触，更何况代码中往往有许多复杂的逻辑，所以一定要写注解，不仅要记录代码的逻辑，还有说清楚修改的逻辑。</li>
<li>Less is more 从代码维护角度来讲，代码中的注解一定是精华中的精华。合理清晰的命名能让代码易于理解，对于逻辑简单且命名规范，能够清楚表达代码功能的代码不需要注解。滥用注解会增加额外的负担，更何况大部分都是废话。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据id获取信息【废话注解】</span></span><br><span class="line">getMessageById(id)</span><br></pre></td></tr></table></figure>

<ol>
<li>Advance with the time 注解应该随着代码的变动而改变，注解表达的信息要与代码中完全一致。通常情况下修改代码后一定要修改注解。</li>
</ol>
<h3 id="6-2-注解格式"><a href="#6-2-注解格式" class="headerlink" title="6.2 注解格式"></a>6.2 注解格式</h3><p>注解大体上可以分为两种，一种是javadoc注解，另一种是简单注解。javadoc注解可以生成JavaAPI为外部用户提供有效的支持javadoc注解通常在使用IDEA，或者Eclipse等开发工具时都可以自动生成，也支持自定义的注解模板，仅需要对对应的字段进行解释。参与同一项目开发的同学，尽量设置成相同的注解模板。</p>
<h4 id="a-包注解"><a href="#a-包注解" class="headerlink" title="a. 包注解"></a>a. 包注解</h4><p>包注解在工作中往往比较特殊，通过包注解可以快速知悉当前包下代码是用来实现哪些功能，强烈建议工作中加上，尤其是对于一些比较复杂的包，包注解一般在包的根目录下，名称统一为package-info.java。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 落地也质量检测</span></span><br><span class="line"><span class="comment"> * 1. 用来解决什么问题对广告主投放的广告落地页进行性能检测，模拟不同的系统，如Android，IOS等; 模拟不同的网络：2G，3G，4G，wifi等</span></span><br><span class="line"><span class="comment"> * 2. 如何实现基于chrome浏览器，用chromedriver驱动浏览器，设置对应的网络，OS参数，获取到浏览器返回结果。</span></span><br><span class="line"><span class="comment"> * 注意：网络环境配置信息&#123;<span class="doctag">@link</span> cn.mycookies.landingpagecheck.meta.NetWorkSpeedEnum&#125;目前使用是常规速度，可以根据实际情况进行调整</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cruder</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2019/12/7 20:3 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> cn.mycookies.landingpagecheck;</span><br></pre></td></tr></table></figure>

<h4 id="b-类注接"><a href="#b-类注接" class="headerlink" title="b. 类注接"></a>b. 类注接</h4><p>javadoc注解中，每个类都必须有注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Copyright (C), 2019-2020, Jann  balabala...</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 类的介绍：这是一个用来做什么事情的类，有哪些功能，用到的技术.....</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>   类创建者姓名 保持对齐</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span>     创建日期 保持对齐</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span>  版本号 保持对齐</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="c-属性注解"><a href="#c-属性注解" class="headerlink" title="c. 属性注解"></a>c. 属性注解</h4><p>在每个属性前面必须加上属性注释，通常有一下两种形式，至于怎么选择，你高兴就好，不过一个项目中要保持统一。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 提示信息 */</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure>

<h4 id="d-方法注释"><a href="#d-方法注释" class="headerlink" title="d. 方法注释"></a>d. 方法注释</h4><p>在每个方法前面必须加上方法注释，对于方法中的每个参数，以及返回值都要有说明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 方法的详细说明，能干嘛，怎么实现的，注意事项...</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> xxx      参数1的使用说明， 能否为null</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 返回结果的说明， 不同情况下会返回怎样的结果</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> 异常类型   注明从此类方法中抛出异常的说明</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure>

<h4 id="e-构造方法注释"><a href="#e-构造方法注释" class="headerlink" title="e. 构造方法注释"></a>e. 构造方法注释</h4><p>在每个构造方法前面必须加上注释，注释模板如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 构造方法的详细说明</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> xxx      参数1的使用说明， 能否为null</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> 异常类型   注明从此类方法中抛出异常的说明</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure>

<p>而简单注解往往是需要工程师字节定义，在使用注解时应该注意一下几点：</p>
<ol>
<li>枚举类的各个属性值都要使用注解，枚举可以理解为是常量，通常不会发生改变，通常会被在多个地方引用，对枚举的修改和添加属性通常会带来很大的影响。</li>
<li>保持排版整洁，不要使用行尾注释；双斜杠和星号之后要用1个空格分隔。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> id = <span class="number">1</span>; <span class="comment">// 反例：不要使用行尾注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//反例：换行符与注释之间没有缩进</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正例：姓名</span></span><br><span class="line">String name;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 1. 多行注释</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * 2. 对于不同的逻辑说明，可以用空行分隔</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>无论是命名和注解，他们的目的都是为了让代码和工程师进行对话，增强代码的可读性，可维护性。优秀的代码往往能够见名知意，注解往往是对命名的补充和完善。命名太难了！</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript组件化开发</title>
    <url>/2020/03/21/JavaScript%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>文章出自：<a href="https://blog.csdn.net/Prince_fmx/article/details/77926189" target="_blank" rel="noopener">https://blog.csdn.net/Prince_fmx/article/details/77926189</a></p>
<p>下面我们来谈谈，在现有的知识体系下，如何很好的写组件。</p>
<p>比如我们要实现这样一个组件，就是一个输入框里面字数的计数。这个应该是个很简单的需求。</p>
<p><img src="/images/JavaScript%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/js%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91.png" alt="图片"></p>
<p>我们来看看，下面的各种写法。</p>
<blockquote>
<p>为了更清楚的演示，下面全部使用jQuery作为基础语言库。</p>
</blockquote>
<h2 id="最简陋的写法"><a href="#最简陋的写法" class="headerlink" title="最简陋的写法"></a>最简陋的写法</h2><p>嗯 所谓的入门级写法呢，就是完完全全的全局函数全局变量的写法。（就我所知，现在好多外包还是这种写法）</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/jquery-1.9.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> input = $(<span class="string">'#J_input'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//用来获取字数</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">getNum</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> input.val().length;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//渲染元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> num = getNum();</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//没有字数的容器就新建一个</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> ($(<span class="string">'#J_input_count'</span>).length == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            input.after('<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"J_input_count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>');</span></span></span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          $(<span class="string">'#J_input_count'</span>).html(num+<span class="string">'个字'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//监听事件</span></span></span><br><span class="line"><span class="actionscript">        input.on(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">          render();</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">//初始化，第一次渲染</span></span></span><br><span class="line">        render();</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"J_input"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码跑也是可以跑的，但是呢，各种变量混乱，没有很好的隔离作用域,当页面变的复杂的时候,会很难去维护。目前这种代码基本是用不了的。当然少数的活动页面可以简单用用。</p>
<h2 id="作用域隔离"><a href="#作用域隔离" class="headerlink" title="作用域隔离"></a>作用域隔离</h2><p>让我们对上面的代码作些改动，使用单个变量模拟命名空间。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> textCount = &#123;</span><br><span class="line">  input:<span class="literal">null</span>,</span><br><span class="line">  init:<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.input = $(config.id);</span><br><span class="line">    <span class="keyword">this</span>.bind();</span><br><span class="line">    <span class="comment">//这边范围对应的对象，可以实现链式调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.input.on(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      self.render();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  getNum:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.input.val().length;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//渲染元素</span></span><br><span class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="keyword">this</span>.getNum();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">'#J_input_count'</span>).length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.input.after(<span class="string">'&lt;span id="J_input_count"&gt;&lt;/span&gt;'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#J_input_count'</span>).html(num+<span class="string">'个字'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//在domready后调用</span></span><br><span class="line">  textCount.init(&#123;<span class="attr">id</span>:<span class="string">'#J_input'</span>&#125;).render();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这样一改造，立马变的清晰了很多，所有的功能都在一个变量下面。代码更清晰，并且有统一的入口调用方法。</p>
<p>但是还是有些瑕疵，这种写法没有私有的概念，比如上面的getNum,bind应该都是私有的方法。但是其他代码可以很随意的改动这些。当代码量特别特别多的时候，很容易出现变量重复，或被修改的问题。</p>
<p>于是又出现了一种函数闭包的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> TextCount = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//私有方法，外面将访问不到</span></span><br><span class="line">  <span class="keyword">var</span> _bind = <span class="function"><span class="keyword">function</span>(<span class="params">that</span>)</span>&#123;</span><br><span class="line">    that.input.on(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      that.render();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> _getNum = <span class="function"><span class="keyword">function</span>(<span class="params">that</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> that.input.val().length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> TextCountFun = <span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TextCountFun.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.input = $(config.id);</span><br><span class="line">    _bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  TextCountFun.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = _getNum(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">'#J_input_count'</span>).length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.input.after(<span class="string">'&lt;span id="J_input_count"&gt;&lt;/span&gt;'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    $(<span class="string">'#J_input_count'</span>).html(num+<span class="string">'个字'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//返回构造函数</span></span><br><span class="line">  <span class="keyword">return</span> TextCountFun;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> TextCount().init(&#123;<span class="attr">id</span>:<span class="string">'#J_input'</span>&#125;).render();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这种写法，把所有的东西都包在了一个自动执行的闭包里面，所以不会受到外面的影响，并且只对外公开了TextCountFun构造函数，生成的对象只能访问到init,render方法。这种写法已经满足绝大多数的需求了。事实上大部分的jQuery插件都是这种写法。</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>上面的写法已经可以满足绝大多数需求了。</p>
<p>但是呢，当一个页面特别复杂，当我们需要的组件越来越多，当我们需要做一套组件。仅仅用这个就不行了。首先的问题就是，这种写法太灵活了，写单个组件还可以。如果我们需要做一套风格相近的组件，而且是多个人同时在写。那真的是噩梦。</p>
<p>在编程的圈子里，面向对象一直是被认为最佳的编写代码方式。比如java，就是因为把面向对象发挥到了极致，所以多个人写出来的代码都很接近，维护也很方便。但是很不幸的是，javascript不支持class类的定义。但是我们可以模拟。</p>
<p>下面我们先实现个简单的javascript类：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Class = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _mix = <span class="function"><span class="keyword">function</span>(<span class="params">r, s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> s) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s.hasOwnProperty(p)) &#123;</span><br><span class="line">        r[p] = s[p]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> _extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开关 用来使生成原型时,不调用真正的构成流程init</span></span><br><span class="line">    <span class="keyword">this</span>.initPrototype = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> prototype = <span class="keyword">new</span> <span class="keyword">this</span>()</span><br><span class="line">    <span class="keyword">this</span>.initPrototype = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> items = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>) || []</span><br><span class="line">    <span class="keyword">var</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment">//支持混入多个属性，并且支持&#123;&#125;也支持 Function</span></span><br><span class="line">    <span class="keyword">while</span> (item = items.shift()) &#123;</span><br><span class="line">      _mix(prototype, item.prototype || item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这边是返回的类，其实就是我们返回的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!SubClass.initPrototype &amp;&amp; <span class="keyword">this</span>.init)</span><br><span class="line">        <span class="keyword">this</span>.init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)<span class="comment">//调用init真正的构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值原型链，完成继承</span></span><br><span class="line">    SubClass.prototype = prototype</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变constructor引用</span></span><br><span class="line">    SubClass.prototype.constructor = SubClass</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为子类也添加extend方法</span></span><br><span class="line">    SubClass.extend = _extend</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SubClass</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//超级父类</span></span><br><span class="line">  <span class="keyword">var</span> Class = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="comment">//为超级父类添加extend方法</span></span><br><span class="line">  Class.extend = _extend</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Class</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>这是拿John Resig的class简单修改了下。</p>
<blockquote>
<p>这边只是很简陋的实现了类的继承机制。如果对类的实现有兴趣可以参考我另一篇文章<a href="http://purplebamboo.github.io/2014/07/13/javascript-oo-class/" target="_blank" rel="noopener">javascript oo实现</a></p>
</blockquote>
<p>我们看下使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承超级父类，生成个子类Animal，并且混入一些方法。这些方法会到Animal的原型上。</span></span><br><span class="line"><span class="comment">//另外这边不仅支持混入&#123;&#125;，还支持混入Function</span></span><br><span class="line"><span class="keyword">var</span> Animal = Class.extend(&#123;</span><br><span class="line">  init:<span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.msg = opts.msg</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">"animal"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.msg+<span class="string">":i am a "</span>+<span class="keyword">this</span>.type)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承Animal，并且混入一些方法</span></span><br><span class="line"><span class="keyword">var</span> Dog = Animal.extend(&#123;</span><br><span class="line">  init:<span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//并未实现super方法，直接简单使用父类原型调用即可</span></span><br><span class="line">    Animal.prototype.init.call(<span class="keyword">this</span>,opts)</span><br><span class="line">    <span class="comment">//修改了type类型</span></span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">"dog"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//new Animal(&#123;msg:'hello'&#125;).say()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Dog(&#123;<span class="attr">msg</span>:<span class="string">'hi'</span>&#125;).say()</span><br></pre></td></tr></table></figure>

<p>使用很简单，超级父类具有extend方法，可以继承出一个子类。子类也具有extend方法。</p>
<p>这边要强调的是，继承的父类都是一个也就是单继承。但是可以通过extend实现多重混入。详见下面用法。</p>
<p>有了这个类的扩展，我们可以这么编写代码了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> TextCount = Class.extend(&#123;</span><br><span class="line">  init:<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.input = $(config.id);</span><br><span class="line">    <span class="keyword">this</span>._bind();</span><br><span class="line">    <span class="keyword">this</span>.render();</span><br><span class="line">  &#125;,</span><br><span class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="keyword">this</span>._getNum();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">'#J_input_count'</span>).length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.input.after(<span class="string">'&lt;span id="J_input_count"&gt;&lt;/span&gt;'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#J_input_count'</span>).html(num+<span class="string">'个字'</span>);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  _getNum:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.input.val().length;</span><br><span class="line">  &#125;,</span><br><span class="line">  _bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.input.on(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      self.render();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> TextCount(&#123;</span><br><span class="line">    id:<span class="string">"#J_input"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这边可能还没看见class的真正好处，不急我们继续往下。</p>
<h2 id="抽象出base"><a href="#抽象出base" class="headerlink" title="抽象出base"></a>抽象出base</h2><p>可以看到，我们的组件有些方法，是大部分组件都会有的。</p>
<ul>
<li>比如init用来初始化属性。</li>
<li>比如render用来处理渲染的逻辑。</li>
<li>比如bind用来处理事件的绑定。</li>
</ul>
<p>当然这也是一种约定俗成的规范了。如果大家全部按照这种风格来写代码，开发大规模组件库就变得更加规范，相互之间配合也更容易。</p>
<p>这个时候面向对象的好处就来了，我们抽象出一个Base类。其他组件编写时都继承它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Base = Class.extend(&#123;</span><br><span class="line">  init:<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//自动保存配置项</span></span><br><span class="line">    <span class="keyword">this</span>.__config = config</span><br><span class="line">    <span class="keyword">this</span>.bind()</span><br><span class="line">    <span class="keyword">this</span>.render()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//可以使用get来获取配置项</span></span><br><span class="line">  <span class="keyword">get</span>:function(key)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.__config[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//可以使用set来设置配置项</span></span><br><span class="line">  <span class="keyword">set</span>:function(key,value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.__config[key] = value</span><br><span class="line">  &#125;,</span><br><span class="line">  bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//定义销毁的方法，一些收尾工作都应该在这里</span></span><br><span class="line">  destroy:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>base类主要把组件的一般性内容都提取了出来，这样我们编写组件时可以直接继承base类，覆盖里面的bind和render方法。</p>
<p>于是我们可以这么写代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> TextCount = Base.extend(&#123;</span><br><span class="line">  _getNum:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.get(<span class="string">'input'</span>).val().length;</span><br><span class="line">  &#125;,</span><br><span class="line">  bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.get(<span class="string">'input'</span>).on(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      self.render();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="keyword">this</span>._getNum();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">'#J_input_count'</span>).length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.get(<span class="string">'input'</span>).after(<span class="string">'&lt;span id="J_input_count"&gt;&lt;/span&gt;'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#J_input_count'</span>).html(num+<span class="string">'个字'</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> TextCount(&#123;</span><br><span class="line">    <span class="comment">//这边直接传input的节点了，因为属性的赋值都是自动的。</span></span><br><span class="line">    input:$(<span class="string">"#J_input"</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>可以看到我们直接实现一些固定的方法，bind，render就行了。其他的base会自动处理（这里只是简单处理了配置属性的赋值）。</p>
<p>事实上，这边的init，bind，render就已经有了点生命周期的影子，但凡是组件都会具有这几个阶段，初始化，绑定事件，以及渲染。当然这边还可以加一个destroy销毁的方法，用来清理现场。</p>
<p>此外为了方便，这边直接变成了传递input的节点。因为属性赋值自动化了，一般来说这种情况下都是使用getter，setter来处理。这边就不详细展开了。</p>
<h2 id="引入事件机制（观察者模式）"><a href="#引入事件机制（观察者模式）" class="headerlink" title="引入事件机制（观察者模式）"></a>引入事件机制（观察者模式）</h2><p>有了base应该说我们编写组件更加的规范化，体系化了。下面我们继续深挖。</p>
<p>还是上面的那个例子，如果我们希望输入字的时候超过5个字就弹出警告。该怎么办呢。</p>
<p>小白可能会说，那简单啊直接改下bind方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> TextCount = Base.extend(&#123;</span><br><span class="line">  ...</span><br><span class="line">  bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.get(<span class="string">'input'</span>).on(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(self._getNum() &gt; <span class="number">5</span>)&#123;</span><br><span class="line">        alert(<span class="string">'超过了5个字了。。。'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      self.render();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>的确也是一种方法，但是太low了，代码严重耦合。当这种需求特别特别多，代码会越来越乱。</p>
<p>这个时候就要引入事件机制，也就是经常说的观察者模式。</p>
<blockquote>
<p>注意这边的事件机制跟平时的浏览器那些事件不是一回事，要分开来看。</p>
</blockquote>
<p>什么是观察者模式呢，官方的解释就不说了，直接拿这个例子来说。</p>
<p>想象一下base是个机器人会说话，他会一直监听输入的字数并且汇报出去（通知）。而你可以把耳朵凑上去，听着他的汇报（监听）。发现字数超过5个字了，你就做些操作。</p>
<p>所以这分为两个部分，一个是通知，一个是监听。</p>
<p>假设通知是 fire方法，监听是on。于是我们可以这么写代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> TextCount = Base.extend(&#123;</span><br><span class="line">  ...</span><br><span class="line">  bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    self.get(<span class="string">'input'</span>).on(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//通知,每当有输入的时候，就报告出去。</span></span><br><span class="line">      self.fire(<span class="string">'Text.input'</span>,self._getNum())</span><br><span class="line">      self.render();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">new</span> TextCount(&#123;</span><br><span class="line">    input:$(<span class="string">"#J_input"</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//监听这个输入事件</span></span><br><span class="line">  t.on(<span class="string">'Text.input'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//可以获取到传递过来的值</span></span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">      alert(<span class="string">'超过了5个字了。。。'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>fire用来触发一个事件，可以传递数据。而on用来添加一个监听。这样组件里面只负责把一些关键的事件抛出来，至于具体的业务逻辑都可以添加监听来实现。没有事件的组件是不完整的。</p>
<p>下面我们看看怎么实现这套事件机制。</p>
<p>我们首先抛开base，想想怎么实现一个具有这套机制的类。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//辅组函数，获取数组里某个元素的索引 index</span></span><br><span class="line"><span class="keyword">var</span> _indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">array,key</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>, length = array.length</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; length; i++) <span class="keyword">if</span> (array[i] === item) <span class="keyword">return</span> i</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Event = Class.extend(&#123;</span><br><span class="line">  <span class="comment">//添加监听</span></span><br><span class="line">  on:<span class="function"><span class="keyword">function</span>(<span class="params">key,listener</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//this.__events存储所有的处理函数</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.__events) &#123;</span><br><span class="line">      <span class="keyword">this</span>.__events = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.__events[key]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.__events[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_indexOf(<span class="keyword">this</span>.__events,listener) === <span class="number">-1</span> &amp;&amp; <span class="keyword">typeof</span> listener === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.__events[key].push(listener)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//触发一个事件，也就是通知</span></span><br><span class="line">  fire:<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.__events || !<span class="keyword">this</span>.__events[key]) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>) || []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> listeners = <span class="keyword">this</span>.__events[key]</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> l = listeners.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i; i &lt; l; i++) &#123;</span><br><span class="line">      listeners[i].apply(<span class="keyword">this</span>,args)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//取消监听</span></span><br><span class="line">  off:<span class="function"><span class="keyword">function</span>(<span class="params">key,listener</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!key &amp;&amp; !listener) &#123;</span><br><span class="line">      <span class="keyword">this</span>.__events = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不传监听函数，就去掉当前key下面的所有的监听函数</span></span><br><span class="line">    <span class="keyword">if</span> (key &amp;&amp; !listener) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.__events[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &amp;&amp; listener) &#123;</span><br><span class="line">      <span class="keyword">var</span> listeners = <span class="keyword">this</span>.__events[key]</span><br><span class="line">      <span class="keyword">var</span> index = _indexOf(listeners, listener)</span><br><span class="line">      (index &gt; <span class="number">-1</span>) &amp;&amp; listeners.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Event()</span><br><span class="line"><span class="comment">//添加监听 test事件</span></span><br><span class="line">a.on(<span class="string">'test'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  alert(msg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发 test事件</span></span><br><span class="line">a.fire(<span class="string">'test'</span>,<span class="string">'我是第一次触发'</span>)</span><br><span class="line">a.fire(<span class="string">'test'</span>,<span class="string">'我又触发了'</span>)</span><br><span class="line">a.off(<span class="string">'test'</span>)</span><br><span class="line">a.fire(<span class="string">'test'</span>,<span class="string">'你应该看不到我了'</span>)</span><br></pre></td></tr></table></figure>

<p>实现起来并不复杂，只要使用this.__events存下所有的监听函数。在fire的时候去找到并且执行就行了。</p>
<p>这个时候面向对象的好处就来了，如果我们希望base拥有事件机制。只需要这么写:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Base = Class.extend(Event,&#123;</span><br><span class="line">  ...</span><br><span class="line">  destroy:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//去掉所有的事件监听</span></span><br><span class="line">    <span class="keyword">this</span>.off()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//于是可以</span></span><br><span class="line"><span class="comment">//var a  = new Base()</span></span><br><span class="line"><span class="comment">// a.on(xxx,fn)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// a.fire()</span></span><br></pre></td></tr></table></figure>

<p>是的只要extend的时候多混入一个Event，这样Base或者它的子类生成的对象都会自动具有事件机制。</p>
<p>有了事件机制我们可以把组件内部很多状态暴露出来，比如我们可以在set方法中抛出一个事件，这样每次属性变更的时候我们都可以监听到。</p>
<p>到这里为止，我们的base类已经像模像样了，具有了init，bind，render，destroy方法来表示组件的各个关键过程，并且具有了事件机制。基本上已经可以很好的来开发组件了。</p>
<h2 id="更进一步，richbase"><a href="#更进一步，richbase" class="headerlink" title="更进一步，richbase"></a>更进一步，richbase</h2><p>我们还可以继续深挖。看看我们的base，还差些什么。首先浏览器的事件监听还很落后，需要用户自己在bind里面绑定，再然后现在的TextCount里面还存在dom操作，也没有自己的模板机制。这都是需要扩展的，于是我们在base的基础上再继承出一个richbase用来实现更完备的组件基类。</p>
<p>主要实现这些功能：</p>
<ul>
<li>事件代理：不需要用户自己去找dom元素绑定监听，也不需要用户去关心什么时候销毁。</li>
<li>模板渲染：用户不需要覆盖render方法，而是覆盖实现setUp方法。可以通过在setUp里面调用render来达到渲染对应html的目的。</li>
<li>单向绑定：通过setChuckdata方法，更新数据，同时会更新html内容，不再需要dom操作。</li>
</ul>
<p>我们看下我们实现richbase后怎么写组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> TextCount = RichBase.extend(&#123;</span><br><span class="line">  <span class="comment">//事件直接在这里注册，会代理到parentNode节点，parentNode节点在下面指定</span></span><br><span class="line">  EVENTS:&#123;</span><br><span class="line">    <span class="comment">//选择器字符串，支持所有jQuery风格的选择器</span></span><br><span class="line">    <span class="string">'input'</span>:&#123;</span><br><span class="line">      <span class="comment">//注册keyup事件</span></span><br><span class="line">      keyup:<span class="function"><span class="keyword">function</span>(<span class="params">self,e</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//单向绑定，修改数据直接更新对应模板</span></span><br><span class="line">        self.setChuckdata(<span class="string">'count'</span>,self._getNum())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//指定当前组件的模板</span></span><br><span class="line">  template:<span class="string">'&lt;span id="J_input_count"&gt;&lt;%= count %&gt;个字&lt;/span&gt;'</span>,</span><br><span class="line">  <span class="comment">//私有方法</span></span><br><span class="line">  _getNum:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.get(<span class="string">'input'</span>).val().length || <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//覆盖实现setUp方法，所有逻辑写在这里。最后可以使用render来决定需不需要渲染模板</span></span><br><span class="line">  <span class="comment">//模板渲染后会append到parentNode节点下面，如果未指定，会append到document.body</span></span><br><span class="line">  setUp:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> input = <span class="keyword">this</span>.get(<span class="string">'parentNode'</span>).find(<span class="string">'#J_input'</span>)</span><br><span class="line">    self.set(<span class="string">'input'</span>,input)</span><br><span class="line">    <span class="keyword">var</span> num = <span class="keyword">this</span>._getNum()</span><br><span class="line">    <span class="comment">//赋值数据，渲染模板，选用。有的组件没有对应的模板就可以不调用这步。</span></span><br><span class="line">    self.render(&#123;</span><br><span class="line">      count:num</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//传入parentNode节点，组件会挂载到这个节点上。所有事件都会代理到这个上面。</span></span><br><span class="line">  <span class="keyword">new</span> TextCount(&#123;</span><br><span class="line">    parentNode:$(<span class="string">"#J_test_container"</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**对应的html,做了些修改，主要为了加上parentNode，这边就是J_test_container</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;div id="J_test_container"&gt;</span></span><br><span class="line"><span class="comment">  &lt;input type="text" id="J_input"/&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>看下上面的用法，可以看到变得更简单清晰了：</p>
<ul>
<li>事件不需要自己绑定，直接注册在EVENTS属性上。程序会自动将事件代理到parentNode上。</li>
<li>引入了模板机制，使用template规定组件的模板，然后在setUp里面使用render(data)的方式渲染模板，程序会自动帮你append到parentNode下面。</li>
<li>单向绑定，无需操作dom，后面要改动内容，不需要操作dom，只需要调用setChuckdata(key,新的值)，选择性的更新某个数据，相应的html会自动重新渲染。</li>
</ul>
<p>下面我们看下richebase的实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> RichBase = Base.extend(&#123;</span><br><span class="line">  EVENTS:&#123;&#125;,</span><br><span class="line">  template:<span class="string">''</span>,</span><br><span class="line">  init:<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//存储配置项</span></span><br><span class="line">    <span class="keyword">this</span>.__config = config</span><br><span class="line">    <span class="comment">//解析代理事件</span></span><br><span class="line">    <span class="keyword">this</span>._delegateEvent()</span><br><span class="line">    <span class="keyword">this</span>.setUp()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//循环遍历EVENTS，使用jQuery的delegate代理到parentNode</span></span><br><span class="line">  _delegateEvent:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> events = <span class="keyword">this</span>.EVENTS || &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> eventObjs,fn,select,type</span><br><span class="line">    <span class="keyword">var</span> parentNode = <span class="keyword">this</span>.get(<span class="string">'parentNode'</span>) || $(<span class="built_in">document</span>.body)</span><br><span class="line">    <span class="keyword">for</span> (select <span class="keyword">in</span> events) &#123;</span><br><span class="line">      eventObjs = events[select]</span><br><span class="line">      <span class="keyword">for</span> (type <span class="keyword">in</span> eventObjs) &#123;</span><br><span class="line">        fn = eventObjs[type]</span><br><span class="line">        parentNode.delegate(select,type,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">          fn.call(<span class="literal">null</span>,self,e)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//支持underscore的极简模板语法</span></span><br><span class="line">  <span class="comment">//用来渲染模板，这边是抄的underscore的。非常简单的模板引擎，支持原生的js语法</span></span><br><span class="line">  _parseTemplate:<span class="function"><span class="keyword">function</span>(<span class="params">str,data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * http://ejohn.org/blog/javascript-micro-templating/</span></span><br><span class="line"><span class="comment">       * https://github.com/jashkenas/underscore/blob/0.1.0/underscore.js#L399</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">    <span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>,</span><br><span class="line">                          <span class="string">'var p=[],print=function()&#123;p.push.apply(p,arguments);&#125;;'</span> +</span><br><span class="line">                          <span class="string">'with(obj)&#123;p.push(\''</span> + str</span><br><span class="line">                          .replace(<span class="regexp">/[\r\t\n]/g</span>, <span class="string">" "</span>)</span><br><span class="line">                          .split(<span class="string">"&lt;%"</span>).join(<span class="string">"\t"</span>)</span><br><span class="line">                          .replace(<span class="regexp">/((^|%&gt;)[^\t]*)'/g</span>, <span class="string">"$1\r"</span>)</span><br><span class="line">                          .replace(<span class="regexp">/\t=(.*?)%&gt;/g</span>, <span class="string">"',$1,'"</span>)</span><br><span class="line">                          .split(<span class="string">"\t"</span>).join(<span class="string">"');"</span>)</span><br><span class="line">                          .split(<span class="string">"%&gt;"</span>).join(<span class="string">"p.push('"</span>)</span><br><span class="line">                          .split(<span class="string">"\r"</span>).join(<span class="string">"\\'"</span>) +</span><br><span class="line">                          <span class="string">"');&#125;return p.join('');"</span>)</span><br><span class="line">    <span class="keyword">return</span> data ? fn(data) : fn</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//提供给子类覆盖实现</span></span><br><span class="line">  setUp:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.render()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//用来实现刷新，只需要传入之前render时的数据里的key还有更新值，就可以自动刷新模板</span></span><br><span class="line">  setChuckdata:<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> data = self.get(<span class="string">'__renderData'</span>)</span><br><span class="line">    <span class="comment">//更新对应的值</span></span><br><span class="line">    data[key] = value</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.template) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//重新渲染</span></span><br><span class="line">    <span class="keyword">var</span> newHtmlNode = $(self._parseTemplate(<span class="keyword">this</span>.template,data))</span><br><span class="line">    <span class="comment">//拿到存储的渲染后的节点</span></span><br><span class="line">    <span class="keyword">var</span> currentNode = self.get(<span class="string">'__currentNode'</span>)</span><br><span class="line">    <span class="keyword">if</span> (!currentNode) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//替换内容</span></span><br><span class="line">    currentNode.replaceWith(newHtmlNode)</span><br><span class="line">    self.set(<span class="string">'__currentNode'</span>,newHtmlNode)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//使用data来渲染模板并且append到parentNode下面</span></span><br><span class="line">  render:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">//先存储起来渲染的data,方便后面setChuckdata获取使用</span></span><br><span class="line">    self.set(<span class="string">'__renderData'</span>,data)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.template) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//使用_parseTemplate解析渲染模板生成html</span></span><br><span class="line">    <span class="comment">//子类可以覆盖这个方法使用其他的模板引擎解析</span></span><br><span class="line">    <span class="keyword">var</span> html = self._parseTemplate(<span class="keyword">this</span>.template,data)</span><br><span class="line">    <span class="keyword">var</span> parentNode = <span class="keyword">this</span>.get(<span class="string">'parentNode'</span>) || $(<span class="built_in">document</span>.body)</span><br><span class="line">    <span class="keyword">var</span> currentNode = $(html)</span><br><span class="line">    <span class="comment">//保存下来留待后面的区域刷新</span></span><br><span class="line">    <span class="comment">//存储起来，方便后面setChuckdata获取使用</span></span><br><span class="line">    self.set(<span class="string">'__currentNode'</span>,currentNode)</span><br><span class="line">    parentNode.append(currentNode)</span><br><span class="line">  &#125;,</span><br><span class="line">  destroy:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">//去掉自身的事件监听</span></span><br><span class="line">    self.off()</span><br><span class="line">    <span class="comment">//删除渲染好的dom节点</span></span><br><span class="line">    self.get(<span class="string">'__currentNode'</span>).remove()</span><br><span class="line">    <span class="comment">//去掉绑定的代理事件</span></span><br><span class="line">    <span class="keyword">var</span> events = self.EVENTS || &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> eventObjs,fn,select,type</span><br><span class="line">    <span class="keyword">var</span> parentNode = self.get(<span class="string">'parentNode'</span>)</span><br><span class="line">    <span class="keyword">for</span> (select <span class="keyword">in</span> events) &#123;</span><br><span class="line">      eventObjs = events[select]</span><br><span class="line">      <span class="keyword">for</span> (type <span class="keyword">in</span> eventObjs) &#123;</span><br><span class="line">        fn = eventObjs[type]</span><br><span class="line"></span><br><span class="line">        parentNode.undelegate(select,type,fn)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>主要做了两件事，一个就是事件的解析跟代理，全部代理到parentNode上面。另外就是把render抽出来，用户只需要实现setUp方法。如果需要模板支持就在setUp里面调用render来渲染模板，并且可以通过setChuckdata来刷新模板，实现单向绑定。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>有了richbase，基本上组件开发就没啥问题了。但是我们还是可以继续深挖下去。</p>
<p>比如组件自动化加载渲染，局部刷新，比如父子组件的嵌套，再比如双向绑定，再比如实现ng-click这种风格的事件机制。</p>
<p>当然这些东西已经不属于组件里面的内容了。再进一步其实已经是一个框架了。实际上最近比较流行的react，ploymer还有我们的brix等等都是实现了这套东西。受限于篇幅，这个以后有空再写篇文章详细分析下。</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统中bash的四种模式</title>
    <url>/2019/12/09/Linux%E7%B3%BB%E7%BB%9F%E4%B8%ADbash%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a><strong>一、前言</strong></h1><p>​    今天在配置jenkins的执行节点，但是执行节点shell的PATH变量始终不对，无法找到git命令。我先前已经在/etc/profile中配置了git的PATH,通过putty连接的shell中也检查PATH变量是正确的，且git命令也能正常执行。后来查阅资料才知道这个问题是由于我没有很好的理解bash的四种模式而造成的。</p>
<p>解决办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash -ilex</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">对于e参数表示一旦出错,就退出当前的shell，x参数表示可以显示所执行的每一条命令</span><br></pre></td></tr></table></figure>

<p>Linux的bash的其实分为四种模式，bash会依据这四种模式而选择加载不同的配置文件，而且加载的顺序也有所不同.</p>
<p>这四种bash模式分别是：</p>
<p>1、interactive + login</p>
<p>2、non-interactive + login</p>
<p>3、interactive + non-login</p>
<p>4、non-interactive + non-login</p>
<p>本文在整理前人资料的基础上，着重介绍这四种bash模式在初始化时如何进行配置文件加载的。</p>
<h1 id="二、bash四种模式的shell"><a href="#二、bash四种模式的shell" class="headerlink" title="二、bash四种模式的shell"></a>二、bash四种模式的shell</h1><h2 id="（一）、interactive-login模式的shell"><a href="#（一）、interactive-login模式的shell" class="headerlink" title="（一）、interactive + login模式的shell"></a>（一）、interactive + login模式的shell</h2><p>第一种模式是交互式的登陆shell，这里面有两个概念需要解释：interactive和login：</p>
<p>login故名思义，即登陆，login shell是指用户以非图形化界面或者以ssh登陆到机器上时获得的第一个shell，简单些说就是需要输入用户名和密码的shell。因此通常不管以何种方式登陆机器后用户获得的第一个shell就是login shell。</p>
<p>interactive意为交互式，这也很好理解，interactive  shell会有一个输入提示符，并且它的标准输入、输出和错误输出都会显示在控制台上。所以一般来说只要是需要用户交互的，即一个命令一个命令的输入的shell都是interactive  shell。而如果无需用户交互，它便是non-interactive shell。通常来说如<code>bash script.sh</code>此类执行脚本的命令就会启动一个non-interactive shell，它不需要与用户进行交互，执行完后它便会退出创建的shell。</p>
<p>那么此模式最简单的两个例子为：</p>
<ul>
<li>用户直接登陆到机器获得的第一个shell</li>
<li>用户使用<code>ssh user@remote</code>获得的shell</li>
</ul>
<p>加载配置文件</p>
<p>这种模式下，shell首先加载<code>/etc/profile</code>，然后再尝试依次去加载下列三个配置文件之一，一旦找到其中一个便不再接着寻找：</p>
<ul>
<li>~/.bash_profile</li>
<li>~/.bash_login</li>
<li>~/.profile</li>
</ul>
<p>下面给出这个加载过程的伪代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">execute /etc/profile</span><br><span class="line">IF ~/.bash_profile exists THEN</span><br><span class="line">    execute ~/.bash_profile</span><br><span class="line">ELSE</span><br><span class="line">    IF ~/.bash_login exist THEN</span><br><span class="line">        execute ~/.bash_login</span><br><span class="line">    ELSE</span><br><span class="line">        IF ~/.profile exist THEN</span><br><span class="line">            execute ~/.profile</span><br><span class="line">        END IF</span><br><span class="line">    END IF</span><br><span class="line">END IF</span><br></pre></td></tr></table></figure>

<p>为了验证这个过程，我们来做一些测试。首先设计每个配置文件的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@remote &gt; cat &#x2F;etc&#x2F;profile</span><br><span class="line">echo @ &#x2F;etc&#x2F;profile</span><br><span class="line">user@remote &gt; cat ~&#x2F;.bash_profile</span><br><span class="line">echo @ ~&#x2F;.bash_profile</span><br><span class="line">user@remote &gt; cat ~&#x2F;.bash_login</span><br><span class="line">echo @ ~&#x2F;.bash_login</span><br><span class="line">user@remote &gt; cat ~&#x2F;.profile</span><br><span class="line">echo @ ~&#x2F;.profile</span><br></pre></td></tr></table></figure>

<p>然后打开一个login shell，注意，为方便起见，这里使用<code>bash -l</code>命令，它会打开一个login shell，在<code>man bash</code>中可以看到此参数的解释：</p>
<blockquote>
<p>-l Make bash act as if it had been invoked as a login shell</p>
</blockquote>
<p>进入这个新的login shell，便会得到以下输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ &#x2F;etc&#x2F;profile@ &#x2F;home&#x2F;user&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>

<p>因为没有了<code>~/.bash_profile</code>的屏蔽，所以<code>~/.bash_login</code>被加载，但最后一个<code>~/.profile</code>仍被忽略。</p>
<p>再次移除<code>~/.bash_login</code>，启动login shell的输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ &#x2F;etc&#x2F;profile@ &#x2F;home&#x2F;user&#x2F;.profile</span><br></pre></td></tr></table></figure>

<p><code>~/.profile</code>终于熬出头，得见天日。通过以上三个实验，配置文件的加载过程得到了验证，除去<code>/etc/profile</code>首先被加载外，其余三个文件的加载顺序为：<code>~/.bash_profile</code>&gt; <code>~/.bash_login</code> &gt; <code>~/.profile</code>，只要找到一个便终止查找。</p>
<p>前面说过，使用ssh也会得到一个login shell，所以如果在另外一台机器上运行<code>ssh user@remote</code>时，也会得到上面一样的结论。</p>
<p>配置文件的意义</p>
<p>那么，为什么bash要弄得这么复杂？每个配置文件存在的意义是什么？</p>
<p><code>/etc/profile</code>很好理解，它是一个全局的配置文件。后面三个位于用户主目录中的配置文件都针对用户个人，也许你会问为什么要有这么多，只用一个<code>~/.profile</code>不好么？究竟每个文件有什么意义呢？这是个好问题。</p>
<p>Cameron Newham和Bill Rosenblatt在他们的著作《<a href="http://book.douban.com/subject/3296982/" target="_blank" rel="noopener">Learning the bash Shell, 2nd Edition</a>》的59页解释了原因：</p>
<blockquote>
<p>bash allows two synonyms for .bash_profile: .bash_login, derived from  the C shell’s file named .login, and .profile, derived from the Bourne  shell and Korn shell files named .profile. Only one of these three is  read when you log in. If .bash_profile doesn’t exist in your home  directory, then bash will look for .bash_login. If that doesn’t exist it  will look for .profile.</p>
<p>One advantage of bash’s ability to look for either synonym is that  you can retain your .profile if you have been using the Bourne shell. If  you need to add bash-specific commands, you can put them in  .bash_profile followed by the command source .profile. When you log in,  all the bash-specific commands will be executed and bash will source  .profile, executing the remaining commands. If you decide to switch to  using the Bourne shell you don’t have to modify your existing files. A  similar approach was intended for .bash_login and the C shell .login,  but due to differences in the basic syntax of the shells, this is not a  good idea.</p>
</blockquote>
<p>原来一切都是为了兼容，这么设计是为了更好的应付在不同shell之间切换的场景。因为bash完全兼容Bourne shell，所以<code>.bash_profile</code>和<code>.profile</code>可以很好的处理bash和Bourne shell之间的切换。但是由于C shell和bash之间的基本语法存在着差异，作者认为引入<code>.bash_login</code>并不是个好主意。所以由此我们可以得出这样的最佳实践：</p>
<ul>
<li>应该尽量杜绝使用<code>.bash_login</code>，如果已经创建，那么需要创建<code>.bash_profile</code>来屏蔽它被调用</li>
<li><code>.bash_profile</code>适合放置bash的专属命令，可以在其最后读取<code>.profile</code>，如此一来，便可以很好的在Bourne shell和bash之间切换了</li>
</ul>
<h2 id="（二）、non-interactive-login模式的shell"><a href="#（二）、non-interactive-login模式的shell" class="headerlink" title="（二）、non-interactive + login模式的shell"></a>（二）、non-interactive + login模式的shell</h2><p>第二种模式的shell为non-interactive login shell，即非交互式的登陆shell，这种是不太常见的情况。一种创建此shell的方法为：<code>bash -l script.sh</code>，前面提到过-l参数是将shell作为一个login shell启动，而执行脚本又使它为non-interactive shell。</p>
<p>对于这种类型的shell，配置文件的加载与第一种完全一样，在此不再赘述。</p>
<h2 id="（三）、interactive-non-login模式的shell"><a href="#（三）、interactive-non-login模式的shell" class="headerlink" title="（三）、interactive + non-login模式的shell"></a>（三）、interactive + non-login模式的shell</h2><p>第三种模式为交互式的非登陆shell，这种模式最常见的情况为在一个已有shell中运行<code>bash</code>，此时会打开一个交互式的shell，而因为不再需要登陆，因此不是login shell。</p>
<p>加载配置文件</p>
<p>对于此种情况，启动shell时会去查找并加载<code>/etc/bash.bashrc</code>和<code>~/.bashrc</code>文件。</p>
<p>为了进行验证，与第一种模式一样，设计各配置文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@remote &gt; cat &#x2F;etc&#x2F;bash.bashrcecho @ &#x2F;etc&#x2F;bash.bashrcuser@remote &gt; cat ~&#x2F;.bashrcecho @ ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>

<p>然后我们启动一个交互式的非登陆shell，直接运行<code>bash</code>即可，可以得到以下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ &#x2F;etc&#x2F;bash.bashrc@ &#x2F;home&#x2F;user&#x2F;.bashrc</span><br></pre></td></tr></table></figure>

<p>bashrc VS profile</p>
<p>从刚引入的两个配置文件的存放路径可以很容易的判断，第一个文件是全局性的，第二个文件属于当前用户。在前面的模式当中，已经出现了几种配置文件，多数是以profile命名的，那么为什么这里又增加两个文件呢？这样不会增加复杂度么？我们来看看此处的文件和前面模式中的文件的区别。</p>
<p>首先看第一种模式中的profile类型文件，它是某个用户唯一的用来设置全局环境变量的地方, 因为用户可以有多个shell比如bash,  sh, zsh等, 但像环境变量这种其实只需要在统一的一个地方初始化就可以, 而这个地方就是profile，所以启动一个login  shell会加载此文件，后面由此shell中启动的新shell进程如bash，sh，zsh等都可以由login shell中继承环境变量等配置。</p>
<p>接下来看bashrc，其后缀<code>rc</code>的意思为<a href="http://en.wikipedia.org/wiki/Run_commands" target="_blank" rel="noopener">Run Commands</a>，由名字可以推断出，此处存放bash需要运行的命令，但注意，这些命令一般只用于交互式的shell，通常在这里会设置交互所需要的所有信息，比如bash的补全、alias、颜色、提示符等等。</p>
<p>所以可以看出，引入多种配置文件完全是为了更好的管理配置，每个文件各司其职，只做好自己的事情。</p>
<p>下面给出这个加载过程的伪代码：</p>
<h2 id="（四）、non-interactive-non-login模式的shell"><a href="#（四）、non-interactive-non-login模式的shell" class="headerlink" title="（四）、non-interactive + non-login模式的shell"></a>（四）、non-interactive + non-login模式的shell</h2><p>最后一种模式为非交互非登陆的shell，创建这种shell典型有两种方式：</p>
<ul>
<li>bash script.sh</li>
<li>ssh user@remote command</li>
</ul>
<p>这两种都是创建一个shell，执行完脚本之后便退出，不再需要与用户交互。</p>
<p>加载配置文件</p>
<p>对于这种模式而言，它会去寻找环境变量<code>BASH_ENV</code>，将变量的值作为文件名进行查找，如果找到便加载它。</p>
<p>同样，我们对其进行验证。首先，测试该环境变量未定义时配置文件的加载情况，这里需要一个测试脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@remote &gt; cat ~&#x2F;script.shecho Hello World</span><br></pre></td></tr></table></figure>

<p>再次执行<code>bash script.sh</code>，结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ &#x2F;home&#x2F;user&#x2F;.bashrcHello World</span><br></pre></td></tr></table></figure>

<p>果然，<code>~/.bashrc</code>被加载，而它是由环境变量<code>BASH_ENV</code>设定的。</p>
<h1 id="三、关于bash四种模式的直观示图"><a href="#三、关于bash四种模式的直观示图" class="headerlink" title="三、关于bash四种模式的直观示图"></a>三、关于bash四种模式的直观示图</h1><p>至此，四种模式下配置文件如何加载已经讲完，因为涉及的配置文件有些多，我们再以两个图来更为直观的进行描述：</p>
<p>第一张图来自这篇<a href="http://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/" target="_blank" rel="noopener">文章</a>，bash的每种模式会读取其所在列的内容，首先执行A，然后是B，C。而B1，B2和B3表示只会执行第一个存在的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+----------------+--------+-----------+---------------+</span><br><span class="line">|                | login  |interactive|non-interactive|</span><br><span class="line">|                |        |non-login  |non-login      |</span><br><span class="line">+----------------+--------+-----------+---------------+</span><br><span class="line">|/etc/profile    |   A    |           |               |</span><br><span class="line">+----------------+--------+-----------+---------------+</span><br><span class="line">|/etc/bash.bashrc|        |    A      |               |</span><br><span class="line">+----------------+--------+-----------+---------------+</span><br><span class="line">|~/.bashrc       |        |    B      |               |</span><br><span class="line">+----------------+--------+-----------+---------------+</span><br><span class="line">|~/.bash_profile |   B1   |           |               |</span><br><span class="line">+----------------+--------+-----------+---------------+</span><br><span class="line">|~/.bash_login   |   B2   |           |               |</span><br><span class="line">+----------------+--------+-----------+---------------+</span><br><span class="line">|~/.profile      |   B3   |           |               |</span><br><span class="line">+----------------+--------+-----------+---------------+</span><br><span class="line">|BASH_ENV        |        |           |       A       |</span><br><span class="line">+----------------+--------+-----------+---------------+</span><br></pre></td></tr></table></figure>

<p>上图只给出了三种模式，原因是第一种login实际上已经包含了两种，因为这两种模式下对配置文件的加载是一致的。</p>
<p>另外一篇<a href="http://www.solipsys.co.uk/new/BashInitialisationFiles.html" target="_blank" rel="noopener">文章</a>给出了一个更直观的图：</p>
<p><img src="/images/Linux%E7%B3%BB%E7%BB%9F%E4%B8%ADbash%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F/BashStartupFiles.png" alt="img"></p>
<p>上图的情况稍稍复杂一些，因为它使用了几个关于配置文件的参数：<code>--login</code>，<code>--rcfile</code>，<code>--noprofile</code>，<code>--norc</code>，这些参数的引入会使配置文件的加载稍稍发生改变，不过总体来说，不影响我们前面的讨论，相信这张图不会给你带来更多的疑惑。</p>
<h1 id="四、bash与sh陷阱"><a href="#四、bash与sh陷阱" class="headerlink" title="四、bash与sh陷阱"></a>四、bash与sh陷阱</h1><p><code>ssh user@remote ~/myscript.sh</code>属于哪一种模式？相信此时你可以非常轻松的回答出来：non-login + non-interactive。对于这种模式，bash会选择加载<code>$BASH_ENV</code>的值所对应的文件，所以为了让它加载<code>/etc/profile</code>，可以设定：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@local &gt; export BASH_ENV&#x3D;&#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<p>然后执行上面的命令，依旧会出现如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/myscript.sh: line n: app: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>

<p>这是怎么回事？这看起来像是环境变量引起的问题，为了证实这一猜想，我在这条命令之前加了一句：<code>which app</code>，来查看app的安装路径。在remote本机上执行脚本时，它会打印出app正确的安装路径。但再次用ssh来执行时，却遇到下面的错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span>: no app <span class="keyword">in</span> (/usr/bin:/bin:/usr/sbin:/sbin)</span><br></pre></td></tr></table></figure>

<p>这很奇怪，怎么括号中的环境变量没有了<code>app</code>程序的安装路径？不是已通过<code>/etc/profile</code>设置到<code>PATH</code>中了？再次在脚本中加入<code>echo $PATH</code>并以ssh执行，这才发现，环境变量仍是系统初始化时的结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin:/bin:/usr/sbin:/sbin</span><br></pre></td></tr></table></figure>

<p>这证明<code>/etc/profile</code>根本没有被调用。为什么？我们已经将<code>BASH_ENV</code>的值设置成了<code>/etc/profile。但是似乎并没有</code>加载<code>/etc/profile呢？</code></p>
<p>仔细查看之后才发现脚本<code>myscript.sh</code>的第一行为<code>#!/usr/bin/env sh</code>，注意看，它和前面提到的<code>#!/usr/bin/env bash</code>不一样，可能就是这里出了问题。我们先尝试把它改成<code>#!/usr/bin/env bash</code>，再次执行，错误果然消失了，这与我们前面的分析结果一致。</p>
<p>第一行的这个语句有什么用？设置成sh和bash有什么区别？带着这些疑问，再来查看<code>man bash</code>：</p>
<blockquote>
<p>If the program is a file beginning with #!, the remainder of the first line specifies an interpreter for the program.</p>
</blockquote>
<p>它表示这个文件的解释器，即用什么程序来打开此文件，就好比Windows上双击一个文件时会以什么程序打开一样。因为这里不是bash，而是sh，那么我们前面讨论的都不复有效了，真糟糕。我们来看看这个sh的路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user@remote &gt; ll &#96;which sh&#96;lrwxrwxrwx 1 root root 9 Apr 25  2014 &#x2F;usr&#x2F;bin&#x2F;sh -&gt; &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>原来sh只是bash的一个软链接，既然如此，<code>BASH_ENV</code>应该是有效的啊，为何此处无效？还是回到<code>man bash</code>，同样在INVOCATION一节的下部看到了这样的说明：</p>
<blockquote>
<p>If bash is invoked with the name sh, it tries to mimic the startup  behavior of historical versions of sh as closely as possible, while  conforming to the POSIX standard as well. When invoked as an interactive  login shell, or a non-interactive shell with the –login option, it  first attempts to read and execute commands from /etc/profile and  ~/.profile, in that order. The –noprofile option may be used to inhibit  this behavior. When invoked as an interactive shell with the name sh,  bash looks for the variable ENV, expands its value if it is defined, and  uses the expanded value as the name of a file to read and execute.  Since a shell invoked as sh does not attempt to read and execute  commands from any other startup files, the –rcfile option has no effect.  A non-interactive shell invoked with the name sh does not attempt to  read any other startup files. When invoked as sh, bash enters posix mode  after the startup files are read.</p>
</blockquote>
<p>简而言之，当bash以是sh命启动时，即我们此处的情况，bash会尽可能的模仿sh，所以配置文件的加载变成了下面这样：</p>
<ul>
<li>interactive + login: 读取<code>/etc/profile</code>和<code>~/.profile</code></li>
<li>non-interactive + login: 同上</li>
<li>interactive + non-login: 读取<code>ENV</code>环境变量对应的文件</li>
<li>non-interactive + non-login: 不读取任何文件</li>
</ul>
<p>这样便可以解释为什么出错了，因为这里属于non-interactive + non-login，所以bash不会读取任何文件，故而即使设置了<code>BASH_ENV</code>也不会起作用。所以为了解决问题，只需要把sh换成bash，再设置环境变量<code>BASH_ENV</code>即可。</p>
<p>另外，其实我们还可以设置参数到第一行的解释器中，如<code>#!/bin/bash --login</code>，如此一来，bash便会强制为login shell，所以<code>/etc/profile</code>也会被加载。相比上面那种方法，这种更为简单。</p>
<h1 id="五、总结与建议"><a href="#五、总结与建议" class="headerlink" title="五、总结与建议"></a>五、总结与建议</h1><h2 id="（一）、总结"><a href="#（一）、总结" class="headerlink" title="（一）、总结"></a>（一）、总结</h2><p>为了更好的理清这几种模式，下面我们对一些典型的启动方式各属于什么模式进行一个总结：</p>
<ul>
<li>登陆机器后的第一个shell：login + interactive</li>
<li>新启动一个shell进程，如运行<code>bash</code>：non-login + interactive</li>
<li>执行脚本，如<code>bash script.sh</code>：non-login + non-interactive</li>
<li>运行头部有如<code>#!/usr/bin/env bash</code>的可执行文件，如<code>./executable</code>：non-login + non-interactive</li>
<li>通过ssh登陆到远程主机：login + interactive</li>
<li>远程执行脚本，如<code>ssh user@remote script.sh</code>：non-login + non-interactive</li>
<li>远程执行脚本，同时请求控制台，如<code>ssh user@remote -t &#39;echo $PWD&#39;</code>：non-login + interactive</li>
<li>在图形化界面中打开terminal：</li>
<li>Linux上: non-login + interactive</li>
<li>Mac OS X上: login + interactive</li>
</ul>
<h2 id="（二）、建议"><a href="#（二）、建议" class="headerlink" title="（二）、建议"></a>（二）、建议</h2><p>回顾一下前面提到的所有配置文件，总共有以下几种：</p>
<ul>
<li>/etc/profile</li>
<li>~/.bash_profile</li>
<li>~/.bash_login</li>
<li>~/.profile</li>
<li>/etc/bash.bashrc</li>
<li>~/.bashrc</li>
<li>$BASH_ENV</li>
<li>$ENV</li>
</ul>
<p>不知你是否会有疑问，这么多的配置文件，究竟每个文件里面应该包含哪些配置，比如<code>PATH</code>应该在哪？提示符应该在哪配置？启动的程序应该在哪？等等。所以在文章的最后，我搜罗了一些最佳实践供各位参考。（这里只讨论属于用户个人的配置文件）</p>
<ul>
<li><code>~/.bash_profile</code>：应该尽可能的简单，通常会在最后加载<code>.profile</code>和<code>.bashrc</code>(注意顺序)</li>
<li><code>~/.bash_login</code>：在前面讨论过，别用它</li>
<li><code>~/.profile</code>：此文件用于login shell，所有你想在整个用户会话期间都有效的内容都应该放置于此，比如启动进程，环境变量等</li>
<li><code>~/.bashrc</code>：只放置与bash有关的命令，所有与交互有关的命令都应该出现在此，比如bash的补全、alias、颜色、提示符等等。</li>
</ul>
<p>的。</p>
<p>转自：<a href="https://blog.csdn.net/hudashi/article/details/82464995" target="_blank" rel="noopener">https://blog.csdn.net/hudashi/article/details/82464995</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2020/03/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>来源：<a href="https://github.com/hustcc/JS-Sorting-Algorithm" target="_blank" rel="noopener">https://github.com/hustcc/JS-Sorting-Algorithm</a></p>
<p>分享只为更多人受益，如有侵权请联系删除！</p>
</blockquote>
<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="/images/sort/sort.png" alt="sort"></p>
<h1 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h1><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<p>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。</p>
<h2 id="1-算法步骤"><a href="#1-算法步骤" class="headerlink" title="1. 算法步骤"></a>1. 算法步骤</h2><ol>
<li><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p>
</li>
<li><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p>
</li>
<li><p>针对所有的元素重复以上的步骤，除了最后一个。</p>
</li>
<li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>
</li>
</ol>
<h2 id="2-动图演示"><a href="#2-动图演示" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h2><p><img src="/images/sort/bubbleSort.gif" alt="动图演示"></p>
<h2 id="3-什么时候最快"><a href="#3-什么时候最快" class="headerlink" title="3. 什么时候最快"></a>3. 什么时候最快</h2><p>当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊）。</p>
<h2 id="4-什么时候最慢"><a href="#4-什么时候最慢" class="headerlink" title="4. 什么时候最慢"></a>4. 什么时候最慢</h2><p>当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。</p>
<h2 id="5-Java代码实现"><a href="#5-Java代码实现" class="headerlink" title="5. Java代码实现"></a>5. Java代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> <span class="keyword">implements</span> <span class="title">IArraySort</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span></span><br><span class="line">      <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">          arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">          arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line"></span><br><span class="line">          flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h1><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p>
<h2 id="1-算法步骤-1"><a href="#1-算法步骤-1" class="headerlink" title="1. 算法步骤"></a>1. 算法步骤</h2><ol>
<li><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</p>
</li>
<li><p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p>
</li>
<li><p>重复第二步，直到所有元素均排序完毕。</p>
</li>
</ol>
<h2 id="2-动图演示-1"><a href="#2-动图演示-1" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h2><p><img src="/images/sort/selectionSort.gif" alt="动图演示"></p>
<h2 id="3-Java代码实现"><a href="#3-Java代码实现" class="headerlink" title="3.Java代码实现"></a>3.Java代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> <span class="keyword">implements</span> <span class="title">IArraySort</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">    <span class="comment">// 总共要经过 N-1 轮比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> min = i;</span><br><span class="line">      <span class="comment">// 每轮需要比较的次数 N-i</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">          <span class="comment">// 记录目前能找到的最小值元素的下标</span></span><br><span class="line">          min = j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将找到的最小值和i位置所在的值进行交换</span></span><br><span class="line">      <span class="keyword">if</span> (i != min) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">        arr[i] = arr[min];</span><br><span class="line">        arr[min] = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a>三、插入排序</h1><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<p>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</p>
<h2 id="1-算法步骤-2"><a href="#1-算法步骤-2" class="headerlink" title="1. 算法步骤"></a>1. 算法步骤</h2><ol>
<li><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p>
</li>
<li><p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p>
</li>
</ol>
<h2 id="2-动图演示-2"><a href="#2-动图演示-2" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h2><p><img src="/images/sort/insertionSort.gif" alt="动图演示"></p>
<h2 id="3-Java-代码实现"><a href="#3-Java-代码实现" class="headerlink" title="3. Java 代码实现"></a>3. Java 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> <span class="keyword">implements</span> <span class="title">IArraySort</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">    <span class="comment">// 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 记录要插入的数据</span></span><br><span class="line">      <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">      <span class="comment">// 从已经排序的序列最右边的开始比较，找到比其小的数</span></span><br><span class="line">      <span class="keyword">int</span> j = i;</span><br><span class="line">      <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; tmp &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 存在比其小的数，插入</span></span><br><span class="line">      <span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、希尔排序"><a href="#四、希尔排序" class="headerlink" title="四、希尔排序"></a>四、希尔排序</h1><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p>
<p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>
<ul>
<li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li>
<li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li>
</ul>
<p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p>
<h2 id="1-算法步骤-3"><a href="#1-算法步骤-3" class="headerlink" title="1. 算法步骤"></a>1. 算法步骤</h2><ol>
<li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</li>
<li>按增量序列个数 k，对序列进行 k 趟排序；</li>
<li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ol>
<h2 id="2-Java-代码实现"><a href="#2-Java-代码实现" class="headerlink" title="2. Java 代码实现"></a>2. Java 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> <span class="keyword">implements</span> <span class="title">IArraySort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> gap = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (gap &lt; arr.length/<span class="number">3</span>) &#123;</span><br><span class="line">      gap = gap * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - gap;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; tmp) &#123;</span><br><span class="line">          arr[j + gap] = arr[j];</span><br><span class="line">          j -= gap;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + gap] = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">      gap = (<span class="keyword">int</span>) Math.floor(gap / <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、归并排序"><a href="#五、归并排序" class="headerlink" title="五、归并排序"></a>五、归并排序</h1><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>
<p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p>
<ul>
<li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</li>
<li>自下而上的迭代；</li>
</ul>
<p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p>
<h2 id="2-算法步骤"><a href="#2-算法步骤" class="headerlink" title="2. 算法步骤"></a>2. 算法步骤</h2><ol>
<li><p>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</p>
</li>
<li><p>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</p>
</li>
<li><p>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</p>
</li>
<li><p>重复步骤 3 直到某一指针达到序列尾；</p>
</li>
<li><p>将另一序列剩下的所有元素直接复制到合并序列尾。</p>
</li>
</ol>
<h2 id="3-动图演示"><a href="#3-动图演示" class="headerlink" title="3. 动图演示"></a>3. 动图演示</h2><p><img src="/images/sort/mergeSort.gif" alt="动图演示"></p>
<h2 id="4-Java-代码实现"><a href="#4-Java-代码实现" class="headerlink" title="4. Java 代码实现"></a>4. Java 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> <span class="keyword">implements</span> <span class="title">IArraySort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> middle = (<span class="keyword">int</span>) Math.floor(arr.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] left = Arrays.copyOfRange(arr, <span class="number">0</span>, middle);</span><br><span class="line">    <span class="keyword">int</span>[] right = Arrays.copyOfRange(arr, middle, arr.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge(sort(left), sort(right));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">        result[i++] = left[<span class="number">0</span>];</span><br><span class="line">        left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[i++] = right[<span class="number">0</span>];</span><br><span class="line">        right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      result[i++] = left[<span class="number">0</span>];</span><br><span class="line">      left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      result[i++] = right[<span class="number">0</span>];</span><br><span class="line">      right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、快速排序"><a href="#六、快速排序" class="headerlink" title="六、快速排序"></a>六、快速排序</h1><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p>
<p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p>
<p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p>
<blockquote>
<p>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p>
</blockquote>
<h2 id="1-算法步骤-4"><a href="#1-算法步骤-4" class="headerlink" title="1. 算法步骤"></a>1. 算法步骤</h2><ol>
<li><p>从数列中挑出一个元素，称为 “基准”（pivot）;</p>
</li>
<li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</p>
</li>
<li><p>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</p>
</li>
</ol>
<p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>
<h2 id="2-动图演示-3"><a href="#2-动图演示-3" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h2><p><img src="/images/sort/quickSort.gif" alt="动图演示"></p>
<h2 id="3-Java-代码实现-1"><a href="#3-Java-代码实现-1" class="headerlink" title="3. Java 代码实现"></a>3. Java 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> <span class="keyword">implements</span> <span class="title">IArraySort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">int</span> partitionIndex = partition(arr, left, right);</span><br><span class="line">      quickSort(arr, left, partitionIndex - <span class="number">1</span>);</span><br><span class="line">      quickSort(arr, partitionIndex + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设定基准值（pivot）</span></span><br><span class="line">    <span class="keyword">int</span> pivot = left;</span><br><span class="line">    <span class="keyword">int</span> index = pivot + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">        swap(arr, i, index);</span><br><span class="line">        index++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, pivot, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> index - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、堆排序"><a href="#七、堆排序" class="headerlink" title="七、堆排序"></a>七、堆排序</h1><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p>
<ol>
<li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li>
<li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</li>
</ol>
<p>堆排序的平均时间复杂度为 Ο(nlogn)。</p>
<h2 id="1-算法步骤-5"><a href="#1-算法步骤-5" class="headerlink" title="1. 算法步骤"></a>1. 算法步骤</h2><ol>
<li><p>将待排序序列构建成一个堆 H[0……n-1]，根据（升序降序需求）选择大顶堆或小顶堆；</p>
</li>
<li><p>把堆首（最大值）和堆尾互换；</p>
</li>
<li><p>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</p>
</li>
<li><p>重复步骤 2，直到堆的尺寸为 1。</p>
</li>
</ol>
<h2 id="2-动图演示-4"><a href="#2-动图演示-4" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h2><p><img src="/images/sort/heapSort.gif" alt="动图演示"></p>
<h2 id="3-Java-代码实现-2"><a href="#3-Java-代码实现-2" class="headerlink" title="3. Java 代码实现"></a>3. Java 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> <span class="keyword">implements</span> <span class="title">IArraySort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line"></span><br><span class="line">    buildMaxHeap(arr, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">      swap(arr, <span class="number">0</span>, i);</span><br><span class="line">      len--;</span><br><span class="line">      heapify(arr, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>) Math.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      heapify(arr, i, len);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> largest = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">      largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">      largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">      swap(arr, i, largest);</span><br><span class="line">      heapify(arr, largest, len);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、计数排序"><a href="#八、计数排序" class="headerlink" title="八、计数排序"></a>八、计数排序</h1><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<h2 id="1-动图演示"><a href="#1-动图演示" class="headerlink" title="1. 动图演示"></a>1. 动图演示</h2><p><img src="/images/sort/countingSort.gif" alt="动图演示"></p>
<h2 id="2-Java-代码实现-1"><a href="#2-Java-代码实现-1" class="headerlink" title="2. Java 代码实现"></a>2. Java 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSort</span> <span class="keyword">implements</span> <span class="title">IArraySort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxValue = getMaxValue(arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> countingSort(arr, maxValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] countingSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> maxValue) &#123;</span><br><span class="line">    <span class="keyword">int</span> bucketLen = maxValue + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[bucketLen];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">      bucket[value]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sortedIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class="line">      <span class="keyword">while</span> (bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        arr[sortedIndex++] = j;</span><br><span class="line">        bucket[j]--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMaxValue</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">      <span class="keyword">if</span> (maxValue &lt; value) &#123;</span><br><span class="line">        maxValue = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="九、桶排序"><a href="#九、桶排序" class="headerlink" title="九、桶排序"></a>九、桶排序</h1><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p>
<ol>
<li>在额外空间充足的情况下，尽量增大桶的数量</li>
<li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li>
</ol>
<p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p>
<h2 id="1-什么时候最快"><a href="#1-什么时候最快" class="headerlink" title="1. 什么时候最快"></a>1. 什么时候最快</h2><p>当输入的数据可以均匀的分配到每一个桶中。</p>
<h2 id="2-什么时候最慢"><a href="#2-什么时候最慢" class="headerlink" title="2. 什么时候最慢"></a>2. 什么时候最慢</h2><p>当输入的数据被分配到了同一个桶中。</p>
<h2 id="3-Java-代码实现-3"><a href="#3-Java-代码实现-3" class="headerlink" title="3. Java 代码实现"></a>3. Java 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BucketSort</span> <span class="keyword">implements</span> <span class="title">IArraySort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> InsertSort insertSort = <span class="keyword">new</span> InsertSort();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bucketSort(arr, <span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] bucketSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> bucketSize) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> minValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">      <span class="keyword">if</span> (value &lt; minValue) &#123;</span><br><span class="line">        minValue = value;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; maxValue) &#123;</span><br><span class="line">        maxValue = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bucketCount = (<span class="keyword">int</span>) Math.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[][] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[bucketCount][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用映射函数将数据分配到各个桶中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> index = (<span class="keyword">int</span>) Math.floor((arr[i] - minValue) / bucketSize);</span><br><span class="line">      buckets[index] = arrAppend(buckets[index], arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arrIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] bucket : buckets) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bucket.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对每个桶进行排序，这里使用了插入排序</span></span><br><span class="line">      bucket = insertSort.sort(bucket);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> value : bucket) &#123;</span><br><span class="line">        arr[arrIndex++] = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动扩容，并保存数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] arrAppend(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> value) &#123;</span><br><span class="line">    arr = Arrays.copyOf(arr, arr.length + <span class="number">1</span>);</span><br><span class="line">    arr[arr.length - <span class="number">1</span>] = value;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、基数排序"><a href="#十、基数排序" class="headerlink" title="十、基数排序"></a>十、基数排序</h1><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p>
<h2 id="1-基数排序-vs-计数排序-vs-桶排序"><a href="#1-基数排序-vs-计数排序-vs-桶排序" class="headerlink" title="1. 基数排序 vs 计数排序 vs 桶排序"></a>1. 基数排序 vs 计数排序 vs 桶排序</h2><p>基数排序有两种方法：</p>
<p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异案例看大家发的：</p>
<ul>
<li>基数排序：根据键值的每位数字来分配桶；</li>
<li>计数排序：每个桶只存储单一键值；</li>
<li>桶排序：每个桶存储一定范围的数值；</li>
</ul>
<h2 id="2-LSD-基数排序动图演示"><a href="#2-LSD-基数排序动图演示" class="headerlink" title="2. LSD 基数排序动图演示"></a>2. LSD 基数排序动图演示</h2><p><img src="/images/sort/radixSort.gif" alt="动图演示"></p>
<h2 id="3-Java-代码实现-4"><a href="#3-Java-代码实现-4" class="headerlink" title="3. Java 代码实现"></a>3. Java 代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基数排序</span></span><br><span class="line"><span class="comment"> * 考虑负数的情况还可以参考： https://code.i-harness.com/zh-CN/q/e98fa9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> <span class="keyword">implements</span> <span class="title">IArraySort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxDigit = getMaxDigit(arr);</span><br><span class="line">    <span class="keyword">return</span> radixSort(arr, maxDigit);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最高位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMaxDigit</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxValue = getMaxValue(arr);</span><br><span class="line">    <span class="keyword">return</span> getNumLenght(maxValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMaxValue</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">      <span class="keyword">if</span> (maxValue &lt; value) &#123;</span><br><span class="line">        maxValue = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getNumLenght</span><span class="params">(<span class="keyword">long</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lenght = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> temp = num; temp != <span class="number">0</span>; temp /= <span class="number">10</span>) &#123;</span><br><span class="line">      lenght++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lenght;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] radixSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> maxDigit) &#123;</span><br><span class="line">    <span class="keyword">int</span> mod = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> dev = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, dev *= <span class="number">10</span>, mod *= <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="comment">// 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)</span></span><br><span class="line">      <span class="keyword">int</span>[][] counter = <span class="keyword">new</span> <span class="keyword">int</span>[mod * <span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> bucket = ((arr[j] % mod) / dev) + mod;</span><br><span class="line">        counter[bucket] = arrayAppend(counter[bucket], arr[j]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span>[] bucket : counter) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : bucket) &#123;</span><br><span class="line">          arr[pos++] = value;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动扩容，并保存数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>[] arrayAppend(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> value) &#123;</span><br><span class="line">    arr = Arrays.copyOf(arr, arr.length + <span class="number">1</span>);</span><br><span class="line">    arr[arr.length - <span class="number">1</span>] = value;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法相关</category>
      </categories>
  </entry>
  <entry>
    <title>Java中各种锁详细介绍</title>
    <url>/2020/04/07/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<blockquote>
<p>转自：<a href="https://www.cnblogs.com/jyroy/p/11365935.html" target="_blank" rel="noopener">https://www.cnblogs.com/jyroy/p/11365935.html</a></p>
<p>相关文章：<a href="https://www.cnblogs.com/hustzzl/p/9343797.html" target="_blank" rel="noopener">https://www.cnblogs.com/hustzzl/p/9343797.html</a></p>
<p><a href="https://www.jianshu.com/p/e674ee68fd3f" target="_blank" rel="noopener">https://www.jianshu.com/p/e674ee68fd3f</a></p>
<p><a href="https://mp.weixin.qq.com/s/-fDGn-AIYJ64Q1MlqpDiBg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/-fDGn-AIYJ64Q1MlqpDiBg</a></p>
</blockquote>
<p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。</p>
<p>Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文内容的总体分类目录：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/1.png" alt="img"></p>
<h1 id="1-乐观锁-VS-悲观锁"><a href="#1-乐观锁-VS-悲观锁" class="headerlink" title="1. 乐观锁 VS 悲观锁"></a>1. 乐观锁 VS 悲观锁</h1><p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p>
<p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，<code>synchronized</code>关键字和<code>Lock</code>的实现类都是悲观锁。</p>
<p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p>
<p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/2.png" alt="img"></p>
<p>根据从上面的概念描述我们可以发现：</p>
<ul>
<li>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</li>
<li>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</li>
</ul>
<p>光说概念有些抽象，我们来看下乐观锁和悲观锁的调用方式示例：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/3.png" alt="img"></p>
<p>通过调用方式示例，我们可以发现悲观锁基本都是在显式的锁定之后再操作同步资源，而乐观锁则直接去操作同步资源。那么，为何乐观锁能够做到不锁定同步资源也可以正确的实现线程同步呢？我们通过介绍乐观锁的主要实现方式 “CAS” 的技术原理来为大家解惑。</p>
<p>CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。<code>java.util.concurrent</code>包中的原子类就是通过CAS来实现了乐观锁。</p>
<p>CAS算法涉及到三个操作数：</p>
<ul>
<li>需要读写的内存值 V。</li>
<li>进行比较的值 A。</li>
<li>要写入的新值 B。</li>
</ul>
<p>当且仅当 V 的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p>
<p>之前提到<code>java.util.concurrent</code>包中的原子类，就是通过CAS来实现了乐观锁，那么我们进入原子类<code>AtomicInteger</code>的源码，看一下<code>AtomicInteger</code>的定义：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/4.png" alt="img"></p>
<p>根据定义我们可以看出各属性的作用：</p>
<ul>
<li>unsafe： 获取并操作内存的数据。</li>
<li>valueOffset： 存储value在<code>AtomicInteger</code>中的偏移量。</li>
<li>value： 存储<code>AtomicInteger</code>的int值，该属性需要借助<code>volatile</code>关键字保证其在线程间是可见的。</li>
</ul>
<p>接下来，我们查看<code>AtomicInteger</code>的自增函数<code>incrementAndGet()</code>的源码时，发现自增函数底层调用的是<code>unsafe.getAndAddInt()</code>。但是由于JDK本身只有Unsafe.class，只通过class文件中的参数名，并不能很好的了解方法的作用，所以我们通过OpenJDK 8 来查看Unsafe的源码：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/5.png" alt="img"></p>
<p>根据OpenJDK 8的源码我们可以看出，<code>getAndAddInt()</code>循环获取给定对象o中的偏移量处的值v，然后判断内存值是否等于v。如果相等则将内存值设置为 v + delta，否则返回false，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在<code>compareAndSwapInt()</code>中，在JNI里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。</p>
<p>后续JDK通过CPU的cmpxchg指令，去比较寄存器中的 A 和 内存中的值 V。如果相等，就把要写入的新值 B 存入内存中。如果不相等，就将内存值 V 赋值给寄存器中的值 A。然后通过Java代码中的while循环再次调用cmpxchg指令进行重试，直到设置成功为止。</p>
<p>CAS虽然很高效，但是它也存在三大问题，这里也简单说一下：</p>
<ol>
<li>ABA问题。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。</li>
</ol>
<p>JDK从1.5开始提供了<code>AtomicStampedReference</code>类来解决ABA问题，具体操作封装在<code>compareAndSet()</code>中。<code>compareAndSet()</code>首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</p>
<ol start="2">
<li><p>循环时间长开销大。CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。</p>
</li>
<li><p>只能保证一个共享变量的原子操作。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。</p>
</li>
</ol>
<p>Java从1.5开始JDK提供了<code>AtomicReference</code>类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</p>
<h1 id="2-自旋锁-VS-适应性自旋锁"><a href="#2-自旋锁-VS-适应性自旋锁" class="headerlink" title="2. 自旋锁 VS 适应性自旋锁"></a>2. 自旋锁 VS 适应性自旋锁</h1><p>在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。</p>
<p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p>
<p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p>
<p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/6.png" alt="img"></p>
<p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreB<code>Lock</code>Spin来更改）没有成功获得锁，就应当挂起线程。</p>
<p>自旋锁的实现原理同样也是CAS，<code>AtomicInteger</code>中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/7.png" alt="img"></p>
<p>自旋锁在JDK1.4.2中引入，使用-XX:+UseSpinning来开启。JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p>
<p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p>
<p>在自旋锁中 另有三种常见的锁形式:Ticket<code>Lock</code>、CLH<code>Lock</code>和MCS<code>Lock</code>，本文中仅做名词介绍，不做深入讲解，感兴趣的同学可以自行查阅相关资料。</p>
<h1 id="3-无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁"><a href="#3-无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁" class="headerlink" title="3. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁"></a>3. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</h1><p>这四种锁是指锁的状态，专门针对<code>synchronized</code>的。在介绍这四种锁状态之前还需要介绍一些额外的知识。</p>
<p>首先为什么<code>synchronized</code>能实现线程同步？</p>
<p>在回答这个问题之前我们需要了解两个重要的概念：“Java对象头”、“Monitor”。</p>
<ul>
<li>Java对象头</li>
</ul>
<p><code>synchronized</code>是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？</p>
<p>我们以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。</p>
<p>Mark Word：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。</p>
<p>Klass Point：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>
<ul>
<li>Monitor</li>
</ul>
<p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。</p>
<p>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p>
<p>现在话题回到<code>synchronized</code>，<code>synchronized</code>通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p>
<p>如同我们在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是<code>synchronized</code>最初实现同步的方式，这就是JDK 6之前<code>synchronized</code>效率低的原因。这种依赖于操作系统Mutex <code>Lock</code>所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p>
<p>所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。</p>
<p>通过上面的介绍，我们对<code>synchronized</code>的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的Mark Word内容，然后再分别讲解四种锁状态的思路以及特点：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/8.png" alt="img"></p>
<h2 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h2><p>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p>
<p>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的CAS原理及应用即是无锁的实现。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。</p>
<h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p>
<p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p>
<p>当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。</p>
<p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p>
<p>偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：<code>-XX:-UseBiasedLocking=false</code>，关闭之后程序默认会进入轻量级锁状态。</p>
<h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h2><p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p>
<p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（<code>Lock</code> Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。</p>
<p>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向<code>Lock</code> Record的指针，并将<code>Lock</code> Record里的owner指针指向对象的Mark Word。</p>
<p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。</p>
<p>如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</p>
<p>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p>
<h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h2><p>升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p>
<p>整体的锁状态升级流程如下：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/9.png" alt="img"></p>
<p>综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p>
<h1 id="4-公平锁-VS-非公平锁"><a href="#4-公平锁-VS-非公平锁" class="headerlink" title="4. 公平锁 VS 非公平锁"></a>4. 公平锁 VS 非公平锁</h1><p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p>
<p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p>
<p>直接用语言描述可能有点抽象，这里作者用从别处看到的一个例子来讲述一下公平锁和非公平锁。</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/10.png" alt="img"></p>
<p>如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。</p>
<p>但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/11.png" alt="img"></p>
<p>接下来我们通过Reentrant<code>Lock</code>的源码来讲解公平锁和非公平锁。</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/12.png" alt="img"></p>
<p>根据代码可知，Reentrant<code>Lock</code>里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。Reentrant<code>Lock</code>默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。</p>
<p>下面我们来看一下公平锁与非公平锁的加锁方法的源码:</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/13.png" alt="img"></p>
<p>通过上图中的源代码对比，我们可以明显的看出公平锁与非公平锁的<code>Lock</code>()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：<code>hasQueuedPredecessors()</code>。</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/14.png" alt="img"></p>
<p>再进入<code>hasQueuedPredecessors()</code>，可以看到该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。</p>
<p>综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。</p>
<h1 id="5-可重入锁-VS-非可重入锁"><a href="#5-可重入锁-VS-非可重入锁" class="headerlink" title="5. 可重入锁 VS 非可重入锁"></a>5. 可重入锁 VS 非可重入锁</h1><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中Reentrant<code>Lock</code>和<code>synchronized</code>都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/15.png" alt="img"></p>
<p>在上面的代码中，类中的两个方法都是被内置锁<code>synchronized</code>修饰的，doSomething()方法中调用doOthers()方法。因为内置锁是可重入的，所以同一个线程在调用doOthers()时可以直接获得当前对象的锁，进入doOthers()进行操作。</p>
<p>如果是一个不可重入锁，那么当前线程在调用doOthers()之前需要将执行doSomething()时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。</p>
<p>而为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？我们通过图示和源码来分别解析一下。</p>
<p>还是打水的例子，有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/16.png" alt="img"></p>
<p>但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/17.png" alt="img"></p>
<p>之前我们说过Reentrant<code>Lock</code>和<code>synchronized</code>都是重入锁，那么我们通过重入锁Reentrant<code>Lock</code>以及非可重入锁NonReentrant<code>Lock</code>的源码来对比分析一下为什么非可重入锁在重复调用同步资源时会出现死锁。</p>
<p>首先Reentrant<code>Lock</code>和NonReentrant<code>Lock</code>都继承父类AQS，其父类AQS中维护了一个同步状态status来计数重入次数，status初始值为0。</p>
<p>当线程尝试获取锁时，可重入锁先尝试获取并更新status值，如果status == 0表示没有其他线程在执行同步代码，则把status置为1，当前线程开始执行。如果status != 0，则判断当前线程是否是获取到这个锁的线程，如果是的话执行status+1，且当前线程可以再次获取锁。而非可重入锁是直接去获取并尝试更新当前status的值，如果status != 0的话会导致其获取锁失败，当前线程阻塞。</p>
<p>释放锁时，可重入锁同样先获取当前status的值，在当前线程是持有锁的线程的前提下。如果status-1 == 0，则表示当前线程所有重复获取锁的操作都已经执行完毕，然后该线程才会真正释放锁。而非可重入锁则是在确定当前线程是持有锁的线程之后，直接将status置为0，将锁释放。</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/18.png" alt="img"></p>
<h1 id="6-独享锁-VS-共享锁"><a href="#6-独享锁-VS-共享锁" class="headerlink" title="6. 独享锁 VS 共享锁"></a>6. 独享锁 VS 共享锁</h1><p>独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过Reentrant<code>Lock</code>和ReentrantReadWrite<code>Lock</code>的源码来介绍独享锁和共享锁。</p>
<p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的<code>synchronized</code>和JUC中<code>Lock</code>的实现类就是互斥锁。</p>
<p>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p>
<p>独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p>
<p>下图为ReentrantReadWrite<code>Lock</code>的部分源码：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/19.png" alt="img"></p>
<p>我们看到ReentrantReadWrite<code>Lock</code>有两把锁：Read<code>Lock</code>和Write<code>Lock</code>，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现Read<code>Lock</code>和Write<code>Lock</code>是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、Reentrant<code>Lock</code>、Semaphore里面也都存在。</p>
<p>在ReentrantReadWrite<code>Lock</code>里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以ReentrantReadWrite<code>Lock</code>的并发性相比一般的互斥锁有了很大提升。</p>
<p>那读锁和写锁的具体加锁方式有什么区别呢？在了解源码之前我们需要回顾一下其他知识。</p>
<p>在最开始提及AQS的时候我们也提到了state字段（int类型，32位），该字段用来描述有多少线程获持有锁。</p>
<p>在独享锁中这个值通常是0或者1（如果是重入锁的话state值就是重入的次数），在共享锁中state就是持有锁的数量。但是在ReentrantReadWrite<code>Lock</code>中有读、写两把锁，所以需要在一个整型变量state上分别描述读锁和写锁的数量（或者也可以叫状态）。于是将state变量“按位切割”切分成了两个部分，高16位表示读锁状态（读锁个数），低16位表示写锁状态（写锁个数）。如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20181122104440388.png" alt="img"></p>
<p>了解了概念之后我们再来看代码，先看写锁的加锁源码：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/20.png" alt="img"></p>
<ul>
<li>这段代码首先取到当前锁的个数c，然后再通过c来获取写锁的个数w。因为写锁是低16位，所以取低16位的最大值与当前的c做与运算（ <code>int w = exclusiveCount(c);</code> ），高16位和0与运算后是0，剩下的就是低位运算的值，同时也是持有写锁的线程数目。</li>
<li>在取到写锁线程的数目后，首先判断是否已经有线程持有了锁。如果已经有线程持有了锁（c!=0），则查看当前写锁线程的数目，如果写线程数为0（即此时存在读锁）或者持有锁的线程不是当前线程就返回失败（涉及到公平锁和非公平锁的实现）。</li>
<li>如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</li>
<li>如果当且写线程数为0（那么读线程也应该为0，因为上面已经处理c!=0的情况），并且当前线程需要阻塞那么就返回失败；如果通过CAS增加写线程数失败也返回失败。</li>
<li>如果c=0，w=0或者c&gt;0，w&gt;0（重入），则设置当前线程或锁的拥有者，返回成功！</li>
</ul>
<p><code>tryAcquire()</code>除了重入条件（当前线程为获取了写锁的线程）之外，增加了一个读锁是否存在的判断。如果存在读锁，则写锁不能被获取，原因在于：必须确保写锁的操作对读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。</p>
<p>因此，只有等待其他读线程都释放了读锁，写锁才能被当前线程获取，而写锁一旦被获取，则其他读写线程的后续访问均被阻塞。写锁的释放与<code>ReentrantLock</code>的释放过程基本类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放，然后等待的读写线程才能够继续访问读写锁，同时前次写线程的修改对后续的读写线程可见。</p>
<p>接着是读锁的代码：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/21.png" alt="img"></p>
<p>可以看到在<code>tryAcquireShared(int unused)</code>方法中，如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态。如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠CAS保证）增加读状态，成功获取读锁。读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是“1&lt;&lt;16”。所以读写锁才能实现读读的过程共享，而读写、写读、写写的过程互斥。</p>
<p>此时，我们再回头看一下互斥锁Reentrant<code>Lock</code>中公平锁和非公平锁的加锁源码：</p>
<p><img src="/images/Java%E4%B8%AD%E5%90%84%E7%A7%8D%E9%94%81%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/22.png" alt="img"></p>
<p>我们发现在Reentrant<code>Lock</code>虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。根据源码所示，当某一个线程调用<code>Lock</code>方法获取锁时，如果同步资源没有被其他线程锁住，那么当前线程在使用CAS更新state成功后就会成功抢占该资源。而如果公共资源被占用且不是被当前线程占用，那么就会加锁失败。所以可以确定Reentrant<code>Lock</code>无论读操作还是写操作，添加的锁都是都是独享锁。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-锁</title>
    <url>/2019/11/13/MySQL%E9%94%81/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>数据库锁定机制简单来说，就是数据库为了保证数据的一致性，而使各种共享资源在被并发访问变得有序所设计的一种规则。对于任何一种数据库来说都需要有相应的锁定机制，所以MySQL自然也不能例外。MySQL数据库由于其自身架构的特点，存在多种数据存储引擎，每种存储引擎所针对的应用场景特点都不太一样，为了满足各自特定应用场景的需求，每种存储引擎的锁定机制都是为各自所面对的特定场景而优化设计，所以各存储引擎的锁定机制也有较大区别。MySQL各存储引擎使用了三种类型（级别）的锁定机制：表级锁定，行级锁定和页级锁定。</p>
<h2 id="1-表级锁定（table-level）"><a href="#1-表级锁定（table-level）" class="headerlink" title="1. 表级锁定（table-level）"></a>1. 表级锁定（table-level）</h2><p>表级别的锁定是MySQL各存储引擎中最大颗粒度的锁定机制。该锁定机制最大的特点是实现逻辑非常简单，带来的系统负面影响最小。所以获取锁和释放锁的速度很快。由于表级锁一次会将整个表锁定，所以可以很好的避免困扰我们的死锁问题。<br>当然，锁定颗粒度大所带来最大的负面影响就是出现锁定资源争用的概率也会最高，致使并大度大打折扣。<br>使用表级锁定的主要是MyISAM，MEMORY，CSV等一些非事务性存储引擎。</p>
<h2 id="2-行级锁定（row-level）"><a href="#2-行级锁定（row-level）" class="headerlink" title="2. 行级锁定（row-level）"></a>2. 行级锁定（row-level）</h2><p>行级锁定最大的特点就是锁定对象的颗粒度很小，也是目前各大数据库管理软件所实现的锁定颗粒度最小的。由于锁定颗粒度很小，所以发生锁定资源争用的概率也最小，能够给予应用程序尽可能大的并发处理能力而提高一些需要高并发应用系统的整体性能。<br>虽然能够在并发处理能力上面有较大的优势，但是行级锁定也因此带来了不少弊端。由于锁定资源的颗粒度很小，所以每次获取锁和释放锁需要做的事情也更多，带来的消耗自然也就更大了。此外，行级锁定也最容易发生死锁。<br>使用行级锁定的主要是InnoDB存储引擎。</p>
<h2 id="3-页级锁定（page-level）"><a href="#3-页级锁定（page-level）" class="headerlink" title="3. 页级锁定（page-level）"></a>3. 页级锁定（page-level）</h2><p>页级锁定是MySQL中比较独特的一种锁定级别，在其他数据库管理软件中也并不是太常见。页级锁定的特点是锁定颗粒度介于行级锁定与表级锁之间，所以获取锁定所需要的资源开销，以及所能提供的并发处理能力也同样是介于上面二者之间。另外，页级锁定和行级锁定一样，会发生死锁。<br>在数据库实现资源锁定的过程中，随着锁定资源颗粒度的减小，锁定相同数据量的数据所需要消耗的内存数量是越来越多的，实现算法也会越来越复杂。不过，随着锁定资源颗粒度的减小，应用程序的访问请求遇到锁等待的可能性也会随之降低，系统整体并发度也随之提升。<br>使用页级锁定的主要是BerkeleyDB存储引擎。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>MySQL这3种锁的特性可大致归纳如下：</p>
<ul>
<li>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低；</li>
<li>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高； </li>
<li>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</li>
</ul>
<p>适用：从锁的角度来说，表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统。</p>
<h1 id="二、表级锁定"><a href="#二、表级锁定" class="headerlink" title="二、表级锁定"></a>二、表级锁定</h1><p>由于MyISAM存储引擎使用的锁定机制完全是由MySQL提供的表级锁定实现，所以下面我们将以MyISAM存储引擎作为示例存储引擎。</p>
<h2 id="1-MySQL表级锁的锁模式"><a href="#1-MySQL表级锁的锁模式" class="headerlink" title="1. MySQL表级锁的锁模式"></a>1. MySQL表级锁的锁模式</h2><p>MySQL的表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）。<br>锁模式的兼容性：</p>
<ul>
<li>对MyISAM表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；</li>
<li>对MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作；</li>
<li>MyISAM表的读操作与写操作之间，以及写操作之间是串行的。当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作。其他线程的读、写操作都会等待，直到锁被释放为止。</li>
</ul>
<h2 id="2-如何加表锁"><a href="#2-如何加表锁" class="headerlink" title="2. 如何加表锁"></a>2. 如何加表锁</h2><p>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用LOCK  TABLE命令给MyISAM表显式加锁。</p>
<h2 id="3-MyISAM表锁优化建议"><a href="#3-MyISAM表锁优化建议" class="headerlink" title="3. MyISAM表锁优化建议"></a>3. MyISAM表锁优化建议</h2><p>对于MyISAM存储引擎，虽然使用表级锁定在锁定实现的过程中比实现行级锁定或者页级锁所带来的附加成本都要小，锁定本身所消耗的资源也是最少。但是由于锁定的颗粒度比较到，所以造成锁定资源的争用情况也会比其他的锁定级别都要多，从而在较大程度上会降低并发处理能力。所以，在优化MyISAM存储引擎锁定问题的时候，最关键的就是如何让其提高并发度。由于锁定级别是不可能改变的了，所以我们首先需要尽可能让锁定的时间变短，然后就是让可能并发进行的操作尽可能的并发。</p>
<h3 id="（1）查询表级锁争用情况"><a href="#（1）查询表级锁争用情况" class="headerlink" title="（1）查询表级锁争用情况"></a>（1）查询表级锁争用情况</h3><p>MySQL内部有两组专门的状态变量记录系统内部锁资源争用情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show status like &#39;table%&#39;;</span><br><span class="line">+----------------------------+---------+</span><br><span class="line">| Variable_name              | Value   |</span><br><span class="line">+----------------------------+---------+</span><br><span class="line">| Table_locks_immediate      | 100     |</span><br><span class="line">| Table_locks_waited         | 11      |</span><br><span class="line">+----------------------------+---------+</span><br></pre></td></tr></table></figure>

<p>这里有两个状态变量记录MySQL内部表级锁定的情况，两个变量说明如下：</p>
<ul>
<li>Table_locks_immediate：产生表级锁定的次数；</li>
<li>Table_locks_waited：出现表级锁定争用而发生等待的次数；</li>
</ul>
<p>两个状态值都是从系统启动后开始记录，出现一次对应的事件则数量加1。如果这里的Table_locks_waited状态值比较高，那么说明系统中表级锁定争用现象比较严重，就需要进一步分析为什么会有较多的锁定资源争用了。</p>
<h3 id="（2）缩短锁定时间"><a href="#（2）缩短锁定时间" class="headerlink" title="（2）缩短锁定时间"></a>（2）缩短锁定时间</h3><p>如何让锁定时间尽可能的短呢？唯一的办法就是让我们的Query执行时间尽可能的短。</p>
<ul>
<li>a) 尽两减少大的复杂Query，将复杂Query分拆成几个小的Query分布进行；</li>
<li>b) 尽可能的建立足够高效的索引，让数据检索更迅速；</li>
<li>c) 尽量让MyISAM存储引擎的表只存放必要的信息，控制字段类型；</li>
<li>d) 利用合适的机会优化MyISAM表数据文件。</li>
</ul>
<h3 id="（3）分离能并行的操作"><a href="#（3）分离能并行的操作" class="headerlink" title="（3）分离能并行的操作"></a>（3）分离能并行的操作</h3><p>说到MyISAM的表锁，而且是读写互相阻塞的表锁，可能有些人会认为在MyISAM存储引擎的表上就只能是完全的串行化，没办法再并行了。大家不要忘记了，MyISAM的存储引擎还有一个非常有用的特性，那就是ConcurrentInsert（并发插入）的特性。</p>
<p>MyISAM存储引擎有一个控制是否打开Concurrent Insert功能的参数选项：concurrent_insert，可以设置为0，1或者2。三个值的具体说明如下：</p>
<ul>
<li>concurrent_insert=2，无论MyISAM表中有没有空洞，都允许在表尾并发插入记录；</li>
<li>concurrent_insert=1，如果MyISAM表中没有空洞（即表的中间没有被删除的行），MyISAM允许在一个进程读表的同时，另一个进程从表尾插入记录。这也是MySQL的默认设置；</li>
<li>concurrent_insert=0，不允许并发插入。</li>
</ul>
<p>可以利用MyISAM存储引擎的并发插入特性，来解决应用中对同一表查询和插入的锁争用。例如，将concurrent_insert系统变量设为2，总是允许并发插入；同时，通过定期在系统空闲时段执行OPTIMIZE  TABLE语句来整理空间碎片，收回因删除记录而产生的中间空洞。</p>
<h3 id="（4）合理利用读写优先级"><a href="#（4）合理利用读写优先级" class="headerlink" title="（4）合理利用读写优先级"></a>（4）合理利用读写优先级</h3><p>MyISAM存储引擎的是读写互相阻塞的，那么，一个进程请求某个MyISAM表的读锁，同时另一个进程也请求同一表的写锁，MySQL如何处理呢？</p>
<p>答案是写进程先获得锁。不仅如此，即使读请求先到锁等待队列，写请求后到，写锁也会插到读锁请求之前。</p>
<p>这是因为MySQL的表级锁定对于读和写是有不同优先级设定的，默认情况下是写优先级要大于读优先级。</p>
<p>所以，如果我们可以根据各自系统环境的差异决定读与写的优先级：</p>
<p>通过执行命令SET LOW_PRIORITY_UPDATES=1，使该连接读比写的优先级高。如果我们的系统是一个以读为主，可以设置此参数，如果以写为主，则不用设置；</p>
<p>通过指定INSERT、UPDATE、DELETE语句的LOW_PRIORITY属性，降低该语句的优先级。</p>
<p>虽然上面方法都是要么更新优先，要么查询优先的方法，但还是可以用其来解决查询相对重要的应用（如用户登录系统）中，读锁等待严重的问题。</p>
<p>另外，MySQL也提供了一种折中的办法来调节读写冲突，即给系统参数max_write_lock_count设置一个合适的值，当一个表的读锁达到这个值后，MySQL就暂时将写请求的优先级降低，给读进程一定获得锁的机会。</p>
<p>这里还要强调一点：一些需要长时间运行的查询操作，也会使写进程“饿死”，因此，应用中应尽量避免出现长时间运行的查询操作，不要总想用一条SELECT语句来解决问题，因为这种看似巧妙的SQL语句，往往比较复杂，执行时间较长，在可能的情况下可以通过使用中间表等措施对SQL语句做一定的“分解”，使每一步查询都能在较短时间完成，从而减少锁冲突。如果复杂查询不可避免，应尽量安排在数据库空闲时段执行，比如一些定期统计可以安排在夜间执行。</p>
<h1 id="三、行级锁定"><a href="#三、行级锁定" class="headerlink" title="三、行级锁定"></a>三、行级锁定</h1><p>行级锁定不是MySQL自己实现的锁定方式，而是由其他存储引擎自己所实现的，如广为大家所知的InnoDB存储引擎，以及MySQL的分布式存储引擎NDBCluster等都是实现了行级锁定。考虑到行级锁定君由各个存储引擎自行实现，而且具体实现也各有差别，而InnoDB是目前事务型存储引擎中使用最为广泛的存储引擎，所以这里我们就主要分析一下InnoDB的锁定特性。</p>
<h2 id="1-InnoDB锁定模式及实现机制"><a href="#1-InnoDB锁定模式及实现机制" class="headerlink" title="1. InnoDB锁定模式及实现机制"></a>1. InnoDB锁定模式及实现机制</h2><p>考虑到行级锁定君由各个存储引擎自行实现，而且具体实现也各有差别，而InnoDB是目前事务型存储引擎中使用最为广泛的存储引擎，所以这里我们就主要分析一下InnoDB的锁定特性。</p>
<p>总的来说，InnoDB的锁定机制和Oracle数据库有不少相似之处。InnoDB的行级锁定同样分为两种类型，共享锁和排他锁，而在锁定机制的实现过程中为了让行级锁定和表级锁定共存，InnoDB也同样使用了意向锁（表级锁定）的概念，也就有了意向共享锁和意向排他锁这两种。</p>
<p>当一个事务需要给自己需要的某个资源加锁的时候，如果遇到一个共享锁正锁定着自己需要的资源的时候，自己可以再加一个共享锁，不过不能加排他锁。但是，如果遇到自己需要锁定的资源已经被一个排他锁占有之后，则只能等待该锁定释放资源之后自己才能获取锁定资源并添加自己的锁定。而意向锁的作用就是当一个事务在需要获取资源锁定的时候，如果遇到自己需要的资源已经被排他锁占用的时候，该事务可以需要锁定行的表上面添加一个合适的意向锁。如果自己需要一个共享锁，那么就在表上面添加一个意向共享锁。而如果自己需要的是某行（或者某些行）上面添加一个排他锁的话，则先在表上面添加一个意向排他锁。意向共享锁可以同时并存多个，但是意向排他锁同时只能有一个存在。所以，可以说InnoDB的锁定模式实际上可以分为四种：共享锁（S），排他锁（X），意向共享锁（IS）和意向排他锁（IX）</p>
<p>如果一个事务请求的锁模式与当前的锁兼容，InnoDB就将请求的锁授予该事务；反之，如果两者不兼容，该事务就要等待锁释放。</p>
<p>意向锁是InnoDB自动加的，不需用户干预。对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；对于普通SELECT语句，InnoDB不会加任何锁；事务可以通过以下语句显示给记录集加共享锁或排他锁。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">共享锁（S）：SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE</span><br><span class="line">排他锁（X)：SELECT * FROM table_name WHERE ... FOR UPDATE</span><br></pre></td></tr></table></figure>

<p>用SELECT … IN SHARE MODE获得共享锁，主要用在需要数据依存关系时来确认某行记录是否存在，并确保没有人对这个记录进行UPDATE或者DELETE操作。<br>但是如果当前事务也需要对该记录进行更新操作，则很有可能造成死锁，对于锁定行记录后需要进行更新操作的应用，应该使用SELECT… FOR UPDATE方式获得排他锁。</p>
<h2 id="2-InnoDB行锁实现方式"><a href="#2-InnoDB行锁实现方式" class="headerlink" title="2. InnoDB行锁实现方式"></a>2. InnoDB行锁实现方式</h2><p>InnoDB行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁</p>
<p>在实际应用中，要特别注意InnoDB行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。下面通过一些实际例子来加以说明。</p>
<ul>
<li>（1）在不通过索引条件查询的时候，InnoDB确实使用的是表锁，而不是行锁。</li>
<li>（2）由于MySQL的行锁是针对索引加的锁，不是针对记录加的锁，所以虽然是访问不同行的记录，但是如果是使用相同的索引键，是会出现锁冲突的。</li>
<li>（3）当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普通索引，InnoDB都会使用行锁来对数据加锁。</li>
<li>（4）即便在条件中使用了索引字段，但是否使用索引来检索数据是由MySQL通过判断不同执行计划的代价来决定的，如果MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。因此，在分析锁冲突时，别忘了检查SQL的执行计划，以确认是否真正使用了索引。</li>
</ul>
<h2 id="3-间隙锁（Next-Key锁）"><a href="#3-间隙锁（Next-Key锁）" class="headerlink" title="3. 间隙锁（Next-Key锁）"></a>3. 间隙锁（Next-Key锁）</h2><p>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；<br>对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-Key锁）。<br>例：<br>假如emp表中只有101条记录，其empid的值分别是 1,2,…,100,101，下面的SQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from emp where empid &gt; 100 for update;</span><br></pre></td></tr></table></figure>

<p>是一个范围条件的检索，InnoDB不仅会对符合条件的empid值为101的记录加锁，也会对empid大于101（这些记录并不存在）的“间隙”加锁。<br>InnoDB使用间隙锁的目的：</p>
<ul>
<li>（1）防止幻读，以满足相关隔离级别的要求。对于上面的例子，要是不使用间隙锁，如果其他事务插入了empid大于100的任何记录，那么本事务如果再次执行上述语句，就会发生幻读；</li>
<li>（2）为了满足其恢复和复制的需要。</li>
</ul>
<p>很显然，在使用范围条件检索并锁定记录时，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害。<br>除了间隙锁给InnoDB带来性能的负面影响之外，通过索引实现锁定的方式还存在其他几个较大的性能隐患：</p>
<ul>
<li>（1）当Query无法利用索引的时候，InnoDB会放弃使用行级别锁定而改用表级别的锁定，造成并发性能的降低；</li>
<li>（2）当Query使用的索引并不包含所有过滤条件的时候，数据检索使用到的索引键所只想的数据可能有部分并不属于该Query的结果集的行列，但是也会被锁定，因为间隙锁锁定的是一个范围，而不是具体的索引键；</li>
<li>（3）当Query在使用索引定位数据的时候，如果使用的索引键一样但访问的数据行不同的时候（索引只是过滤条件的一部分），一样会被锁定。</li>
</ul>
<p>因此，在实际应用开发中，尤其是并发插入比较多的应用，我们要尽量优化业务逻辑，尽量使用相等条件来访问更新数据，避免使用范围条件。</p>
<p>还要特别说明的是，InnoDB除了通过范围条件加锁时使用间隙锁外，如果使用相等条件请求给一个不存在的记录加锁，InnoDB也会使用间隙锁。</p>
<h2 id="4-死锁"><a href="#4-死锁" class="headerlink" title="4. 死锁"></a>4. 死锁</h2><p>上文讲过，MyISAM表锁是deadlock   free的，这是因为MyISAM总是一次获得所需的全部锁，要么全部满足，要么等待，因此不会出现死锁。但在InnoDB中，除单个SQL组成的事务外，锁是逐步获得的，当两个事务都需要获得对方持有的排他锁才能继续完成事务，这种循环锁等待就是典型的死锁。</p>
<p>在InnoDB的事务管理和锁定机制中，有专门检测死锁的机制，会在系统中产生死锁之后的很短时间内就检测到该死锁的存在。当InnoDB检测到系统中产生了死锁之后，InnoDB会通过相应的判断来选这产生死锁的两个事务中较小的事务来回滚，而让另外一个较大的事务成功完成。</p>
<p>那InnoDB是以什么来为标准判定事务的大小的呢？MySQL官方手册中也提到了这个问题，实际上在InnoDB发现死锁之后，会计算出两个事务各自插入、更新或者删除的数据量来判定两个事务的大小。也就是说哪个事务所改变的记录条数越多，在死锁中就越不会被回滚掉。</p>
<p>但是有一点需要注意的就是，当产生死锁的场景中涉及到不止InnoDB存储引擎的时候，InnoDB是没办法检测到该死锁的，这时候就只能通过锁定超时限制参数InnoDB_lock_wait_timeout来解决。<br>需要说明的是，这个参数并不是只用来解决死锁问题，在并发访问比较高的情况下，如果大量事务因无法立即获得所需的锁而挂起，会占用大量计算机资源，造成严重性能问题，甚至拖跨数据库。我们通过设置合适的锁等待超时阈值，可以避免这种情况发生。</p>
<p>通常来说，死锁都是应用设计的问题，通过调整业务流程、数据库对象设计、事务大小，以及访问数据库的SQL语句，绝大部分死锁都可以避免。下面就通过实例来介绍几种避免死锁的常用方法：</p>
<ul>
<li>（1）在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会。</li>
<li>（2）在程序以批量方式处理数据的时候，如果事先对数据排序，保证每个线程按固定的顺序来处理记录，也可以大大降低出现死锁的可能。</li>
<li>（3）在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁，更新时再申请排他锁，因为当用户申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁。</li>
<li>（4）在REPEATABLE-READ隔离级别下，如果两个线程同时对相同条件记录用SELECT…FOR   UPDATE加排他锁，在没有符合该条件记录情况下，两个线程都会加锁成功。程序发现记录尚不存在，就试图插入一条新记录，如果两个线程都这么做，就会出现死锁。这种情况下，将隔离级别改成READ  COMMITTED，就可避免问题。</li>
<li>（5）当隔离级别为READ COMMITTED时，如果两个线程都先执行SELECT…FOR  UPDATE，判断是否存在符合条件的记录，如果没有，就插入记录。此时，只有一个线程能插入成功，另一个线程会出现锁等待，当第1个线程提交后，第2个线程会因主键重出错，但虽然这个线程出错了，却会获得一个排他锁。这时如果有第3个线程又来申请排他锁，也会出现死锁。对于这种情况，可以直接做插入操作，然后再捕获主键重异常，或者在遇到主键重错误时，总是执行ROLLBACK释放获得的排他锁。</li>
</ul>
<h2 id="5-什么时候使用表锁"><a href="#5-什么时候使用表锁" class="headerlink" title="5. 什么时候使用表锁"></a>5. 什么时候使用表锁</h2><p>对于InnoDB表，在绝大部分情况下都应该使用行级锁，因为事务和行锁往往是我们之所以选择InnoDB表的理由。但在个别特殊事务中，也可以考虑使用表级锁：</p>
<ul>
<li>（1）事务需要更新大部分或全部数据，表又比较大，如果使用默认的行锁，不仅这个事务执行效率低，而且可能造成其他事务长时间锁等待和锁冲突，这种情况下可以考虑使用表锁来提高该事务的执行速度。</li>
<li>（2）事务涉及多个表，比较复杂，很可能引起死锁，造成大量事务回滚。这种情况也可以考虑一次性锁定事务涉及的表，从而避免死锁、减少数据库因事务回滚带来的开销。<br>当然，应用中这两种事务不能太多，否则，就应该考虑使用MyISAM表了。</li>
</ul>
<p>在InnoDB下，使用表锁要注意以下两点。</p>
<ul>
<li>（1）使用LOCK  TABLES虽然可以给InnoDB加表级锁，但必须说明的是，表锁不是由InnoDB存储引擎层管理的，而是由其上一层──MySQL  Server负责的，仅当autocommit=0、InnoDB_table_locks=1（默认设置）时，InnoDB层才能知道MySQL加的表锁，MySQL   Server也才能感知InnoDB加的行锁，这种情况下，InnoDB才能自动识别涉及表级锁的死锁，否则，InnoDB将无法自动检测并处理这种死锁。</li>
<li>（2）在用  LOCK TABLES对InnoDB表加锁时要注意，要将AUTOCOMMIT设为0，否则MySQL不会给表加锁；事务结束前，不要用UNLOCK  TABLES释放表锁，因为UNLOCK TABLES会隐含地提交事务；COMMIT或ROLLBACK并不能释放用LOCK  TABLES加的表级锁，必须用UNLOCK TABLES释放表锁。正确的方式见如下语句：<br>例如，如果需要写表t1并从表t读，可以按如下做：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET AUTOCOMMIT&#x3D;0;</span><br><span class="line">LOCK TABLES t1 WRITE, t2 READ, ...;</span><br><span class="line">[do something with tables t1 and t2 here];</span><br><span class="line">COMMIT;</span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>

<h2 id="6-InnoDB行锁优化建议"><a href="#6-InnoDB行锁优化建议" class="headerlink" title="6. InnoDB行锁优化建议"></a>6. InnoDB行锁优化建议</h2><p>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。当系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势了。但是，InnoDB的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</p>
<ul>
<li>（1）要想合理利用InnoDB的行级锁定，做到扬长避短，我们必须做好以下工作：<ul>
<li>a) 尽可能让所有的数据检索都通过索引来完成，从而避免InnoDB因为无法通过索引键加锁而升级为表级锁定；</li>
<li>b) 合理设计索引，让InnoDB在索引键上面加锁的时候尽可能准确，尽可能的缩小锁定范围，避免造成不必要的锁定而影响其他Query的执行；</li>
<li>c) 尽可能减少基于范围的数据检索过滤条件，避免因为间隙锁带来的负面影响而锁定了不该锁定的记录；</li>
<li>d) 尽量控制事务的大小，减少锁定的资源量和锁定时间长度；</li>
<li>e) 在业务环境允许的情况下，尽量使用较低级别的事务隔离，以减少MySQL因为实现事务隔离级别所带来的附加成本。</li>
</ul>
</li>
<li>（2）由于InnoDB的行级锁定和事务性，所以肯定会产生死锁，下面是一些比较常用的减少死锁产生概率的小建议：<ul>
<li>a) 类似业务模块中，尽可能按照相同的访问顺序来访问，防止产生死锁；</li>
<li>b) 在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；</li>
<li>c) 对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率。</li>
</ul>
</li>
<li>（3）可以通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show status like &#39;InnoDB_row_lock%&#39;;</span><br><span class="line">+-------------------------------+-------+</span><br><span class="line">| Variable_name                 | Value |</span><br><span class="line">+-------------------------------+-------+</span><br><span class="line">| InnoDB_row_lock_current_waits | 0     |</span><br><span class="line">| InnoDB_row_lock_time          | 0     |</span><br><span class="line">| InnoDB_row_lock_time_avg      | 0     |</span><br><span class="line">| InnoDB_row_lock_time_max      | 0     |</span><br><span class="line">| InnoDB_row_lock_waits         | 0     |</span><br><span class="line">+-------------------------------+-------+</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>InnoDB 的行级锁定状态变量不仅记录了锁定等待次数，还记录了锁定总时长，每次平均时长，以及最大时长，此外还有一个非累积状态量显示了当前正在等待锁定的等待数量。对各个状态量的说明如下：</p>
<ul>
<li>InnoDB_row_lock_current_waits：当前正在等待锁定的数量；</li>
<li>InnoDB_row_lock_time：从系统启动到现在锁定总时间长度；</li>
<li>InnoDB_row_lock_time_avg：每次等待所花平均时间；</li>
<li>InnoDB_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；</li>
<li>InnoDB_row_lock_waits：系统启动后到现在总共等待的次数；</li>
</ul>
<p>对于这5个状态变量，比较重要的主要是InnoDB_row_lock_time_avg（等待平均时长），InnoDB_row_lock_waits（等待总次数）以及InnoDB_row_lock_time（等待总时长）这三项。尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手指定优化计划。</p>
<p>如果发现锁争用比较严重，如InnoDB_row_lock_waits和InnoDB_row_lock_time_avg的值比较高，还可以通过设置InnoDB Monitors 来进一步观察发生锁冲突的表、数据行等，并分析锁争用的原因。</p>
<p>锁冲突的表、数据行等，并分析锁争用的原因。具体方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table InnoDB_monitor(a INT) engine&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>

<p>然后就可以用下面的语句来进行查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show engine InnoDB status;</span><br></pre></td></tr></table></figure>

<p>监视器可以通过发出下列语句来停止查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table InnoDB_monitor;</span><br></pre></td></tr></table></figure>

<p>设置监视器后，会有详细的当前锁等待的信息，包括表名、锁类型、锁定记录的情况等，便于进行进一步的分析和问题的确定。可能会有读者朋友问为什么要先创建一个叫InnoDB_monitor的表呢？因为创建该表实际上就是告诉InnoDB我们开始要监控他的细节状态了，然后InnoDB就会将比较详细的事务以及锁定信息记录进入MySQL的errorlog中，以便我们后面做进一步分析使用。打开监视器以后，默认情况下每15秒会向日志中记录监控的内容，如果长时间打开会导致.err文件变得非常的巨大，所以用户在确认问题原因之后，要记得删除监控表以关闭监视器，或者通过使用“–console”选项来启动服务器以关闭写日志文件。</p>
<h1 id="四、常用命令"><a href="#四、常用命令" class="headerlink" title="四、常用命令"></a>四、常用命令</h1><h2 id="查询哪些线程运行"><a href="#查询哪些线程运行" class="headerlink" title="查询哪些线程运行"></a>查询哪些线程运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show full processlist;</span><br></pre></td></tr></table></figure>

<h2 id="查看哪些表可以打开"><a href="#查看哪些表可以打开" class="headerlink" title="查看哪些表可以打开"></a>查看哪些表可以打开</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show open tables WHERE In_use&gt;0;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
